<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>lanyincao</title>
        <link>/</link>
        <description>personal blog by lanyincao</description>
        <lastBuildDate>Sat, 24 Aug 2019 07:51:58 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[useCallback]]></title>
            <link>/posts/2019-01-10/cache/</link>
            <guid>/posts/2019-01-10/cache/</guid>
            <pubDate>Wed, 09 Jan 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><div><div class="document_logo__1v782"><img src="/static/media/navi-logo.0f2f9d7f.svg" class="document_logo-navi__bOUrK" alt="logo"/><img src="/static/media/react-logo.5d5d9eef.svg" class="document_logo-react__3-boM" alt="logo"/></div><h2 id="cache-your-event-listener">Cache your event listener</h2><p>在js中，创建两个函数是不等的，对象也是这样。来个栗子看下</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
a <span class="token operator">===</span> b <span class="token comment">// false</span>
</code></pre><p>对象也是这样</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
d <span class="token operator">===</span> c <span class="token comment">// false</span>
</code></pre><p>那我们这样写  同一个引用就相等了</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> d
c <span class="token operator">===</span> d <span class="token comment">//true</span>
</code></pre><p>对象也是这样就不多提了，好了回到正题，我们在写React的时候经常需要给事件加上监听器,看一下代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击测试</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>我们’正常（<em>不正常</em>）的代码很多都是这样，当然不包含会有人来写<code>黑科技</code>啦。在这个click函数里，每次点击都会创建一个新的函数,因为这里我们需要传个参数。大家先不要急，传变化的参数后面会说到的。那对于这个我们应该怎么改呢。我们可以这么做？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\

<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击测试</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>或者</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\

<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击测试</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>上面大家都知道，那有列表的情况下呢</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\

<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>
          list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
            <span class="token parameter">item</span> <span class="token operator">=></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>这个代码是我们正常的写法了，在每次点击的时候都会生成一个新的函数，那这个我们其实就可以利用缓存函数了，这个缓存函数可以自己写比如我们这样改</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  
  <span class="token function-variable function">getCache</span> <span class="token operator">=</span> <span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>
          list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
            <span class="token parameter">item</span> <span class="token operator">=></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>这样只在第一次的时候会创建一个新的函数，在后面的每一次都会引用之前的函数啦。</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why React Hooks]]></title>
            <link>/posts/2019-02-15/hook/</link>
            <guid>/posts/2019-02-15/hook/</guid>
            <pubDate>Thu, 14 Feb 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><h2 id="why-react-hooks">why React Hooks</h2><p>React 在16.8.0的时候正式发布了<a href="https://reactjs.org/docs/hooks-intro.html">Hook</a>, 基础的hook有<code>useState</code>, <code>useReducer</code>, <code>useEffect</code></p><h3 id="mouse-position">Mouse Position</h3><p>这是一个获取鼠标位置的🌰, <a href="https://codesandbox.io/s/xj0ppk0pzw">mousePosition</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">MousePostion</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    y<span class="token punctuation">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>

  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousemove<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousemove<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function-variable function">mousemove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">
        Mouse X: </span><span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token plain-text"> Mouse Y: </span><span class="token punctuation">{</span> y <span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>如果我们想在其他的地方复用该组件，就要重写相同的代码  </p><p>如果我们想拿到x, y的时候在去做其他的事情，那么我们就需要去修改这个代码。这个行为就被限制在这个组件里面了。</p><h3 id="hoc">HOC</h3><p>用hoc来修改此组件，把x, y作为props传给任何需要用x, y的组件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">withMouseHoc</span><span class="token punctuation">(</span><span class="token parameter">ComponentWrap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> <span class="token punctuation">{</span>
      x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      y<span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function-variable function">mousemove</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ComponentWrap</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">this</span><span class="token punctuation">.</span><span class="token attr-value">state</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MouseHocDemo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        MouseHoc X: </span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token plain-text">, MouseHoc Y: </span><span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>此时我们把鼠标的行为通过hoc进行了一次封装，以后需要用到该行为的都可以完全复用。</p><p>虽然这是更多的代码，但我们正在朝着正确的方向前进。它不再与订阅行为紧密耦合。</p><p>如果我们想渲染一些不同的东西呢?我们总是需要做一个新的组件吗?</p><h3 id="render-props">render props</h3><p>用render props来改写</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">MouseRenderProps</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    y<span class="token punctuation">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function-variable function">mousemove</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>this<span class="token punctuation">.</span>state <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MouseRenderPropsDemo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MouseRenderProps</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
              MouseRenderProps X: </span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token plain-text">, MouseRenderProps Y: </span><span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MouseRenderProps</span></span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>renderProps也可以解决之前mouse的问题,和HOC具有相同的功效</p><p>这种细微的差别有一些非常棒的好处
现在，提供x和y的功能非常明显，您还可以轻松地重命名它们，以防止名称冲突。<br/>我们对渲染有灵活的控制。我们不需要创建新的组件，如果我们决定这样做，它只是一个简单的复制粘贴。<br/>您可以在组件呈现函数中直接看到所有这些。新开发人员很容易识别它。<br/>这种模式的主要问题是，您的组件必须在它们的呈现中嵌套许多这样的组件。一旦你开始嵌套多个渲染组件，你就很难推断出发生了什么。<br/>同时，这也造成了一种错误的等级观念。仅仅因为一个行为“嵌套”在另一个行为之下，并不意味着它依赖于父行为</p><p><em>如果有一种方法可以拥有所有这些能力，以一种声明方式。👀</em></p><h3 id="hook">Hook</h3><p>用 hook来改写</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>position<span class="token punctuation">,</span> setPosition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token function-variable function">mousemove</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>setPosition<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> position<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">MouseHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      MouseHook X: </span><span class="token punctuation">{</span>position<span class="token punctuation">.</span>x<span class="token punctuation">}</span><span class="token plain-text">, MouseHook Y: </span><span class="token punctuation">{</span>position<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>这就是我想要的一切。</p><p>不仅行为在它自己整洁的小程序包中，useEffect还阻止它分散在三个不同的生命周期钩子中
组件从哪里获取数据是非常清晰的，它被整齐地放置在render函数中。
无论我需要引入多少这样的代码，我的代码都不会变得越来越嵌套。</p><p><strong>但是 当使用hooks的时候也要遵守一些<a href="https://reactjs.org/docs/hooks-rules.html">原则</a></strong></p><h3 id="final">Final</h3><p>虽然hooks的出现带来了很多的便利，但是先不要急着去改写已有项目中的代码，
有可能后续部分hook还会发生改变，也有可能还存在某些问题，也有可能某些情况下是hook无法处理的。</p><p>虽然对于hook的利弊我还不太理解，但是我敢于去尝试，如果有愿意一起玩的，也可以联系我。</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A try/catch quiz]]></title>
            <link>/posts/2019-02-19/try-catch/</link>
            <guid>/posts/2019-02-19/try-catch/</guid>
            <pubDate>Mon, 18 Feb 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><h2 id="a-trycatch-quiz">a try/catch quiz</h2><p>在async/await出来后，在代码中使用了越来越多的try/catch, 但是很多时候对它并不了解，以及finally，接下来看几个小栗子  </p><h3 id="when-you-throw-a-catch">When you throw a catch</h3><p>如果在catch里抛出了一个错误，那么finally还会运行嘛。看下面的<a href="https://codepen.io/anon/pen/LqMoJd?editors=1111">例子</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错啦'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catch 执行'</span><span class="token punctuation">)</span>
    <span class="token keyword">throw</span> e
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally 运行'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最后执行'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p><em>catch 和 finally 的 <code>console.log</code>都执行了，但是最后一个console.log并没有执行</em></p><h3 id="try-without-catch">Try without catch</h3><p>当只有try / finally的时候<a href="https://codepen.io/anon/pen/LqMoJd?editors=1111">例子</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">example1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'try'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally 运行'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最后执行'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">example1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p><em>尽管没有catch finally仍然被执行了。当然即使有catch finally还是会被执行</em></p><h3 id="return-and-finally">Return and finally</h3><p>如果在try里面返回,那么 finally还会执行嘛<a href="https://codepen.io/anon/pen/LqMoJd?editors=1111">例子</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">example2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'return try'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally 运行'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">example2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p><em>即使在try里进行了return finally仍然会执行</em></p><h3 id="the-rule">The Rule</h3><p>finally 在try/catch/finally里，无论如何都会执行。所以可以在finally处理loading状态。那么<code>Promise.finally</code>是否也是一样。 </p><h3 id="promise-fulfilled">Promise fulfilled</h3><p>当promise的状态为<code>fulfilled</code>的时候, 执行了<a href="https://codepen.io/anon/pen/BMvgdK?editors=1112">finally</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolve'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><h3 id="promise-rejected">Promise rejected</h3><p>当promise的状态为<code>rejected</code>的时候, 是否执行了<a href="https://codepen.io/anon/pen/BMvgdK?editors=1112">finally</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">example1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolve'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catch'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">example1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p><em>当promise的状态为<code>rejected</code>的时候, finally 仍然会被执行。</em></p><p>这也是本文的灵感所在。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">promise文档</a><br/>比如在请求接口的时候，在接口没有返回之前显示loading信息，接口返回后无论成功还是失败都应该取消loading, 来个<a href="https://codesandbox.io/s/v10k0xyqwl">栗子🌰</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">LoadingMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">getMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>setLoading<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击加载</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>loading <span class="token operator">?</span> <span class="token string">"加载中..."</span> <span class="token punctuation">:</span> <span class="token string">"loading success"</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><em>对于无论是成功还是拒绝状态都要执行的，就可以放在finally里进行处理啦</em></p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React.forwardRef]]></title>
            <link>/posts/2019-04-13/forwardRef/</link>
            <guid>/posts/2019-04-13/forwardRef/</guid>
            <pubDate>Fri, 12 Apr 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><h1 id="reactforwardref">React.forwardRef</h1><p><code>forwardRef</code> 主要目的是为了解决高阶组件中无法拿到ref的问题，以及在函数式组件中，可以直接拿到原生的DOM元素  <a href="https://reactjs.org/docs/react-api.html#reactforwardref">forwardRef</a>  </p><p>接下来主要看下 <code>forwardRef</code> 的用法，以及在 <code>hooks</code> 中的相关用法</p><h2 id="高阶组件中的-ref">高阶组件中的 <code>ref</code></h2><p>在类组件中， 想要调用原生的事件， 我们的做法通常是暴露一个方法， 在方法内部调用原生的方法， 比如 <code>input</code> 的 <code>focus</code> 事件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">Input</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>

  <span class="token function-variable function">focus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>inputRef<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputRef <span class="token operator">=</span> el<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>在组件外部， 想要主动使 <code>input</code> 聚焦 </p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> testRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>testRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>

testRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p>用过传递 <code>ref</code>, 调用组件内部的 <code>focus</code> 方法， 使 <code>input</code> 主动聚焦  </p><p>那如果此时有一个高阶组件封装了这个 <code>Input</code> 组件 如何调用 <code>focus</code> 使 input 主动聚焦  </p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">Hoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token punctuation">/></span></span>
<span class="token punctuation">}</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Hoc</span></span> <span class="token punctuation">/></span></span>
</code></pre><p>此时， 如何调用 <code>Input</code> 里的 <code>focus</code> 方法， 似乎是没有办法(也有可能是我不知道), <code>forwardRef</code> 由此而生</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> testRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">Hoc</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>
<span class="token punctuation">}</span>

React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span>Hoc<span class="token punctuation">)</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Hoc</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>testRef<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>

testRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p>此时 <code>testRef.current.focus()</code> 就可以直接调用， 使 <code>input</code> 聚焦</p><h2 id="函数式组件--直接操作-dom">函数式组件  直接操作 <code>DOM</code></h2><p>我们不妨把  <code>Input</code> 改正函数式组件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">Input</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>Input<span class="token punctuation">)</span>
</code></pre><p>此时 <code>Input</code> 的 <code>ref</code> 直接挂在到 <code>DOM</code> 上了， 为了使 <code>input</code> 聚焦</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>

inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 聚焦 😊</span>
inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 失焦 😈</span>
</code></pre><h2 id="hooks-中使用">hooks 中使用</h2><p>如果想要达到和 <code>class</code> 相同的效果， 在函数中该如何做, <code>hooks</code> 提供了相应的api</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">Input</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  React<span class="token punctuation">.</span><span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">focus</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">blur</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>Input<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>使用 <code>Input</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>

inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 聚焦 😊</span>
inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 失焦 😈</span>
</code></pre><p>想要详细了解， 前往 <a href="https://reactjs.org/docs/react-api.html#reactforwardref">官网</a> </p><p><code>React</code> 官网团队 有了新的<a href="https://github.com/reactjs/rfcs/pull/107#issuecomment-466304382">提议</a>可能会解决 <code>forwardRef</code> 这种复杂的用法</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React Hooks vs Class]]></title>
            <link>/posts/2019-05-28/hooks-vs-class/</link>
            <guid>/posts/2019-05-28/hooks-vs-class/</guid>
            <pubDate>Mon, 27 May 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><h1 id="hooks-vs-class">Hooks vs Class</h1><p>React 释放 <code>hooks</code> 已经半年了，从 hooks 刚刚释放的时候我就开始关注，并且就开始去尝试使用它。 从释放到现在 hooks 刚过不少， 内部源码至少改了两三次， 那为什么要写这篇文章呢 ？ 是因为一次偶然的事情引发的。 有一天<code>渊虹</code>老哥抱着电脑对我说， 你看我这个表单的提交时间就是在调用 <code>onSubmit</code> 的时候有点延迟啊， 这是为什么呀? 我试了一下果然是这样， 很奇怪了，为什么会这样呢 ? 于是我想到的第一个问题就是难道我把<code>同步当做异步处理</code>导致的？ 还是有可能的啊，于是我在群里问了这样的一个问题</p><img src="https://user-images.githubusercontent.com/17973020/58377052-f8fcdd80-7faa-11e9-9755-773651feb5a1.png" height="500"/><img src="https://user-images.githubusercontent.com/17973020/58377171-0ca94380-7fad-11e9-9030-cd2a7d5fe676.png" height="500"/><p>于是我就在第二天跑了一下，试试同步当做异步处理的话，会造成多少的延迟。当数量<code>小于100个</code>时候，简单的函数同步异步时间基本一致，1000 个的时候时间就有一些小的差距了， 10000 个的时候差距非常明显， <code>所以必要的时候，同步还是同步，不要当做异步来处理了</code>, 那一个 <code>form</code> 内部超过 100 个校验函数基本不可能，所以这个方面我就忽略了, 那会不会是另外一种可能呢？</p><h2 id="render-时间长且次数多导致的延迟">render 时间长且次数多导致的延迟</h2><p>再一次分析了<code>渊虹</code>老哥的代码，发现在提交表单的时候，<code>render</code> 了四次，于是我去查了下源码，发现这四次分别是，<code>校验设置错误</code> =&gt; <code>设置提交状态</code> =&gt; <code>设置表单是否有效</code> =&gt; <code>设置提交次数</code>, 然后在调用 <code>onSubmit</code>， 哎呀这个地方有有待修改的，比如可以改成这样 <code>设置提交状态</code> =&gt; <code>如果有效，调用 onSubmit 在设置有效状态和提交次数</code>。 否则在 <code>设置错误和状态</code>， 这样呢就能保证 <code>onSubmit</code> 的提交只有一次 <code>setState</code> 的操作，看下代码的截图</p><p>之前的提交</p><p><img src="https://user-images.githubusercontent.com/17973020/58377128-31e98200-7fac-11e9-8627-685ce89c7ccf.png" alt="d97dca23"/></p><p>修改后的提交</p><p><img src="https://user-images.githubusercontent.com/17973020/58377137-52194100-7fac-11e9-9503-dfc0e707c492.png" alt="fc8f38a3"/></p><p>这样在 <code>onSubmit</code> 之前就会调用的很快， 即使 <code>render</code> 很耗时</p><p>那肯定会有人提出来这样的问题， render 时间长这个是业务代码中的问题导致的， 那么 <code>render</code> 次数过多这是为什么呢？为什么这里会 <code>render</code> 这么多次呢 ？那从这里就引起今天这个话题了？ <code>class vs hooks</code></p><p>代码点击这里 =&gt; <a href="https://codesandbox.io/s/hooks-vs-class-5buww">hooks vs class - CodeSandbox</a></p><p>最简单的就是在事件中来测试区别。<code>hooks and class</code> 的 <code>increase</code> 事件都是同步的，我们在点击 <code>increasement</code> 的按钮的时候打开控制台看下输出是什么</p><p><img src="https://user-images.githubusercontent.com/17973020/58377138-65c4a780-7fac-11e9-9267-9b40f275e8c5.png" alt="45965b8f"/></p><p>可以看到 <code>console</code> 的顺序是先输出了事件调用中的 <code>console</code>， 在输出了 <code>render</code> 中的 <code>console</code>， 这个大家都是知道的， <code>setState</code> 是<a href="https://reactjs.org/docs/faq-state.html#when-is-setstate-asynchronous">异步的</a> , 修改下代码，在这个事件函数里多次 <code>setState</code> 会怎么样呢？结果输出还是一样呢？对于这样是为什么，可以看<a href="https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous">官网</a>以及<a href="https://juejin.im/post/5b45c57c51882519790c7441">setState 解析</a>，
在点击 <code>increaseBy</code> 按钮，这个和 <code>decrease</code> 是一样的， 所以我们只取一个来分析， 点击 <code>increaseBy</code> 按钮后看下控制台的输出</p><p><code>class</code> 中的 <code>increase</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function-variable function">increaseBy</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fire increaseBy class"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p><code>hooks</code> 中的 <code>increase</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">increaseBy</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fire increaseBy hook"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>看下控制台的输出</p><p><img src="https://user-images.githubusercontent.com/17973020/58377148-7ecd5880-7fac-11e9-8686-523fb69f01d7.png" alt="e5a1163b"/></p><p><code>hooks</code> render 的次数是两次，然而在 class 中 render 了 四次，这是为什么呢？看起来很奇怪是不是。那我们不妨在 <code>hooks</code> 中在增加几个看看怎么样?</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">increaseBy</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fire increaseBy hook"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>在看下控制台的输出</p><p><img src="https://user-images.githubusercontent.com/17973020/58377153-8bea4780-7fac-11e9-8757-52307d8b6463.png" alt="2e4c8768"/></p><p>完全一样，那我们不妨修改下，在 <code>hooks</code> 中每次都设置不一样的值看看会发生什么</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">increaseBy</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fire increaseBy hook"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>输出如下</p><p><img src="https://user-images.githubusercontent.com/17973020/58377157-986ea000-7fac-11e9-88d3-ca0bbd31882c.png" alt="47307b50"/></p><p>这次是一致了对不对， 都是 <code>render</code> 了 4 次后才调用 <code>console</code> 的，至于在 class 中为什么表现是这样的看<a href="https://juejin.im/post/5b45c57c51882519790c7441">上面的文章</a></p><p>那在 <code>hooks</code> 中为什么会表现的如此不一致呢？ <a href="https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update">官网</a>也贴了出来</p><p><img src="https://user-images.githubusercontent.com/17973020/58377158-a6bcbc00-7fac-11e9-9b78-54572ac17b52.png" alt="dccae51f"/></p><p>会用 <code>Objest.is</code> 会进行比较，如果认为是一样的，那么就会 <code>bailout</code>, 有的人可能会和我有一样的想法，当初我在看这个时候，我觉得在调用第二次 <code>render</code> 的时候就知道是一样的了，那应该不会在到 <code>commit</code> 阶段了吧。我们不妨来试试</p><p>在 <code>hooks</code> 加上这段代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update hook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>在 class 中也加上这段代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><code>hooks</code> 中的 <code>increase</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">increaseBy</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fire increaseBy hook"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p><code>class</code> 中的 <code>increase</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function-variable function">increaseBy</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fire increaseBy class"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>此时在点击 <code>increaseBy</code> 按钮看下输出如何？</p><p><img src="https://user-images.githubusercontent.com/17973020/58377167-da97e180-7fac-11e9-930d-74da2f014e1e.png" alt="77290f12"/></p><p>果真是这样的， 在 <code>hooks</code> 中第二次执行 <code>render</code> 并不会在去执行 <code>commit</code> 了，只在第一次 <code>render</code> 的时候执行了 <code>commit</code>， 然而 <code>class</code> 中却每次都执行了。</p><p>有的同学会问执行 <code>setCount</code> 的时候内部源码肯定都会去执行， 那为啥不是 <code>4</code> 次 <code>render</code>， <code>一次 commit</code> 呢 ？那我们来看下源码为什么会出现这种情况？</p><p>在 <code>调用 setCount</code> 的时候会调用源码中的 <code>dispatch</code>函数，在第一次调用的时候</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>count + number = 2</code> 结果是 <code>2</code> 不等于上一次的 <code>0</code>, 所以会走到 <code>updateReducer</code>,
在 <code>updateReducer</code> 里面会进行比较</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span>_newState<span class="token punctuation">,</span> hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">markWorkInProgressReceivedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>如果不相同会如何， 会进行标记 <code>didReceiveUpdate</code>, 把 <code>didReceiveUpdate</code> 标记为 <code>true</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">markWorkInProgressReceivedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>如果为 <code>true</code>，会进行更新。对于 <code>didReceiveUpdate</code> 的其他标记是在 <code>beginWork</code> 函数中.</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span><span class="token parameter">current$$<span class="token number">1</span><span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderExpirationTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> updateExpirationTime <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>expirationTime<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>current$$<span class="token number">1</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> oldProps <span class="token operator">=</span> current$$<span class="token number">1.</span>memoizedProps<span class="token punctuation">;</span>
    <span class="token keyword">var</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldProps <span class="token operator">!==</span> newProps <span class="token operator">||</span> <span class="token function">hasContextChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// If props or context changed, mark the fiber as having performed work.</span>
      <span class="token comment">// This may be unset if the props are determined to be equal later (memo).</span>
      didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>updateExpirationTime <span class="token operator">&lt;</span> renderExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><p>这是第一次 <code>setCount</code>， 当第二次 setCount 的时候, <code>didReceiveUpdate</code> 为 <code>false</code>， 会走下面这段代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span>current$$<span class="token number">1</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>didReceiveUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">bailoutHooks</span><span class="token punctuation">(</span>current$$<span class="token number">1</span><span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderExpirationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>
    current$$<span class="token number">1</span><span class="token punctuation">,</span>
    workInProgress<span class="token punctuation">,</span>
    renderExpirationTime
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>这段代码在好几处都有， 其中一处就是在 <code>updateFunctionComponent</code> 这个函数中。那么 <code>bailoutHooks</code> 做了什么 ?</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">bailoutHooks</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> expirationTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  workInProgress<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> current<span class="token punctuation">.</span>updateQueue<span class="token punctuation">;</span>
  workInProgress<span class="token punctuation">.</span>effectTag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>Passive <span class="token operator">|</span> Update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>expirationTime <span class="token operator">&lt;=</span> expirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    current<span class="token punctuation">.</span>expirationTime <span class="token operator">=</span> NoWork<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p><code>WIP</code> 的 <code>updateQueue</code> 更新为 <code>current</code> 的 <code>updateQueue</code></p><p><code>bailoutOnAlreadyFinishedWork</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>
  <span class="token parameter">current$$<span class="token number">1</span><span class="token punctuation">,</span>
  workInProgress<span class="token punctuation">,</span>
  renderExpirationTime</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">cancelWorkTimer</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>current$$<span class="token number">1</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Reuse previous context list</span>
    workInProgress<span class="token punctuation">.</span>contextDependencies <span class="token operator">=</span> current$$<span class="token number">1.</span>contextDependencies<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>enableProfilerTimer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Don't update "base" render times for bailouts.</span>
    <span class="token function">stopProfilerTimerIfRunning</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Check if the children have any pending work.</span>
  <span class="token keyword">var</span> childExpirationTime <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>childExpirationTime<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>childExpirationTime <span class="token operator">&lt;</span> renderExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// The children don't have any work either. We can skip them.</span>
    <span class="token comment">// TODO: Once we add back resuming, we should check if the children are</span>
    <span class="token comment">// a work-in-progress set. If so, we need to transfer their effects.</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// This fiber doesn't have work, but its subtree does. Clone the child</span>
    <span class="token comment">// fibers and continue.</span>
    <span class="token function">cloneChildFibers</span><span class="token punctuation">(</span>current$$<span class="token number">1</span><span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>当执行到第三次 <code>setCount</code> 的时候， 会被直接 <code>return</code> 代码在 <code>dispatchAction</code> 中,
因为在 <code>queue.dispatch</code> 绑定了 <code>dispatchAction</code></p><pre><code class="language-jsx(84)" data-language="jsx(84)" data-highlighted-line-numbers="">function dispatchAction(fiber, queue, action) {
  !(numberOfReRenders &lt; RE_RENDER_LIMIT)
    ? invariant(
        false,
        &quot;Too many re-renders. React limits the number of renders to prevent an infinite loop.&quot;
      )
    : void 0;

  {
    !(arguments.length &lt;= 3)
      ? warning$1(
          false,
          &quot;State updates from the useState() and useReducer() Hooks don&#39;t support the &quot; +
            &quot;second callback argument. To execute a side effect after &quot; +
            &quot;rendering, declare it in the component body with useEffect().&quot;
        )
      : void 0;
  }

  var alternate = fiber.alternate;
  if (
    fiber === currentlyRenderingFiber$1 ||
    (alternate !== null &amp;&amp; alternate === currentlyRenderingFiber$1)
  ) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -&gt; linked list of updates. After this render pass, we&#39;ll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdate = true;
    var update = {
      expirationTime: renderExpirationTime,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };
    if (renderPhaseUpdates === null) {
      renderPhaseUpdates = new Map();
    }
    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
    if (firstRenderPhaseUpdate === undefined) {
      renderPhaseUpdates.set(queue, update);
    } else {
      // Append the update to the end of the list.
      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
      while (lastRenderPhaseUpdate.next !== null) {
        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      }
      lastRenderPhaseUpdate.next = update;
    }
  } else {
    flushPassiveEffects();

    var currentTime = requestCurrentTime();
    var _expirationTime = computeExpirationForFiber(currentTime, fiber);

    var _update2 = {
      expirationTime: _expirationTime,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };

    // Append the update to the end of the list.
    var _last = queue.last;
    if (_last === null) {
      // This is the first update. Create a circular list.
      _update2.next = _update2;
    } else {
      var first = _last.next;
      if (first !== null) {
        // Still circular.
        _update2.next = first;
      }
      _last.next = _update2;
    }
    queue.last = _update2;

    if (
      fiber.expirationTime === NoWork &amp;&amp;
      (alternate === null || alternate.expirationTime === NoWork)
    ) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var _lastRenderedReducer = queue.lastRenderedReducer;
      if (_lastRenderedReducer !== null) {
        var prevDispatcher = void 0;
        {
          prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }
        try {
          var currentState = queue.lastRenderedState;
          var _eagerState = _lastRenderedReducer(currentState, action);
          // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn&#39;t changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.
          _update2.eagerReducer = _lastRenderedReducer;
          _update2.eagerState = _eagerState;
          if (is(_eagerState, currentState)) {
            console.log(&quot;直接退出&quot;);
            // Fast path. We can bail out without scheduling React to re-render.
            // It&#39;s still possible that we&#39;ll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {
          // Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        }
      }
    }
    {
      if (shouldWarnForUnbatchedSetState === true) {
        warnIfNotCurrentlyBatchingInDev(fiber);
      }
    }
    scheduleWork(fiber, _expirationTime);
  }
}
</code></pre><p><code>_lastRenderedReducer</code> 就是 <code>basicStateReducer</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">basicStateReducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span> <span class="token function">action</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">:</span> action<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>第三第四次会在这个判断语句里退出。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is</span><span class="token punctuation">(</span>_eagerState<span class="token punctuation">,</span> currentState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Fast path. We can bail out without scheduling React to re-render.</span>
  <span class="token comment">// It's still possible that we'll need to rebase this update later,</span>
  <span class="token comment">// if the component re-renders for a different reason and by that</span>
  <span class="token comment">// time the reducer has changed.</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>那么第二次为什么不在这里退出呢 ？ 在第二次这里的语句是 <code>false</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>expirationTime <span class="token operator">===</span> NoWork <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>alternate <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> alternate<span class="token punctuation">.</span>expirationTime <span class="token operator">===</span> NoWork<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><p>追溯下内部的调用， 在第二次的时候 <code>fiber.expirationTime !== NoWork</code>, 所以这个判断语句就不会走, 那么第三次为什么又相等了呢？再一次看下 <code>bailoutHooks</code> 函数</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">bailoutHooks</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> expirationTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  workInProgress<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> current<span class="token punctuation">.</span>updateQueue<span class="token punctuation">;</span>
  workInProgress<span class="token punctuation">.</span>effectTag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>Passive <span class="token operator">|</span> Update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>expirationTime <span class="token operator">&lt;=</span> expirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    current<span class="token punctuation">.</span>expirationTime <span class="token operator">=</span> NoWork<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p><code>current.expirationTime = NoWork;</code> 进行了赋值。所以这就是整个过程了。</p><h2 id="总结">总结</h2><p><code>class</code> 和 <code>hooks</code> 中基本保持一致, 但是 <code>hooks</code> 中会做一层 <code>Object.is</code> 的判断，
所以在进行状态更新的时候， 需要注意下这点。还有在异步调用中， <code>hooks</code> 也无法拿到最新的值， 因为在一个函数中， 每次 <code>render</code> 都是新的函数， 所以输出的都是之前的值， 这个点要注意一下。这个可以参考 <code>Dan</code> 的博客 <a href="https://overreacted.io/a-complete-guide-to-useeffect/">A Complete Guide to useEffect</a></p><p><a href="https://codesandbox.io/s/hooks-vs-class-5buww">查看代码</a></p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React Hooks State 🤔]]></title>
            <link>/posts/2019-06-03/state/</link>
            <guid>/posts/2019-06-03/state/</guid>
            <pubDate>Sun, 02 Jun 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><h1 id="setxxxx-vs-setstate">setXXXX vs setState</h1><p>这篇文章主要是为了分析 <code>Hooks</code> 中 <code>setXXX</code> 和 class 中 <code>setState</code> 的一些不同之处， <a href="https://uni-blog.netlify.com/posts/2019-05-28/hooks-vs-class/">上篇文章</a> 分析了 <code>state</code> 的部分不同，以及各自调用触发的 <code>render</code> 次数的分析， 同步和异步状态下的区别。要记住的是在函数式组件中，<code>setXXX</code> 会进行 <code>Object.is</code> 进行比较。</p><h2 id="原因">原因</h2><p>为什么写这篇文章呢？因为昨天 <code>原型链</code> 在写 <code>form</code> 的时候遇到了一些问题， 至于为什么又是 <code>form</code> 我就不多做描述了。这是我和 <code>原型链</code> 的对话:</p><p><code>原型链</code>: 蓝银草为什么我调用 <code>setFieldValue</code> 设置的值不正确呢？
<code>我</code>：你是怎么调用的呢？
<code>原型链</code>: 我是连续调用 <code>setFieldValue</code> 两次，结果都是最后一次生效，但是调用 <code>setValues</code> 就是好的。
<code>我</code>：不可能吧，我看下你的实现，看了下原型链的演示，原来如此，我知道了为什么只显示最后一个了，这是 <code>React</code> 函数组件导致的这个问题。</p><p><a href="https://codesandbox.io/s/funny-mclean-6lru4">具体栗子点击这里</a></p><p><code>hook</code> 代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"牧老师"</span><span class="token punctuation">,</span>
    hobby<span class="token punctuation">:</span> <span class="token string">"唱, 跳, rap"</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update hook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name sync"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change hobby sync"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name async"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name async"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook sync:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook sync:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook async:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook async:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render hook"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hooks</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">
      name:</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">, hobby:</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>hobby<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">set name and hobby sync</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick1<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginLeft<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          set name and hobby async
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick2<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginLeft<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          set name and hobby by callback
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick3<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginLeft<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          set name and hobby by callback async
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>在代码里点击按钮，然后设置 <code>name</code> 和 <code>hobby</code>, 可能有人会问这不是两个属性值一起设置嘛，为什么不<code>setState({ ...state, name: &#x27;牧云云&#x27;, hobby: &#x27;coding&#x27; })</code>, 因为当时 <code>setFieldValue</code> 的用法是 <code>setFieldValue(key, value)</code>, 所以就调用了多次。此时点击 <code>set name and hobby sync</code> 按钮，会输出什么呢？</p><p><img src="https://user-images.githubusercontent.com/17973020/59817731-a3221800-9353-11e9-8a15-88bdbc67bcdd.png" alt="cc37e062"/></p><p>可以看到在事件中输出的都是上一次的 <code>state</code>, 然后 <code>render</code> 了一次，为什么 <code>render</code> 了一次可以看我<a href="https://uni-blog.netlify.com/posts/2019-05-28/hooks-vs-class/">上篇文章</a> 中的链接，这里我们先跳过这里，看 <code>render 部分</code>的输出</p><p><code>handleClick</code> 函数</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name sync"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change hobby sync"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>可以看出只有第二个生效了，直接看这个应该很容易知道，在调用第一次 <code>setState</code> 的时候，此时的 <code>name</code> 是 <code>牧云云</code>, 但是在设置第二个的时候， 此时的 <code>state</code> 还是上一次的 <code>name: 牧老师</code> 这个状态，所以在合并的过程，剩下的就是最后一次的 <code>setState</code> 的内容，那么输出的就是只有 <code>hobby: coding</code> 生效。那么在异步过程中呢？或者是 <code>非 React 合成事件和生命周期函数中</code>, 再次点击 <code>set name and hobby async</code>, 那么输出又是什么呢？</p><p><code>handleClick1</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">handleClick1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name async"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name async"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// setTimeout(() => {</span>
    <span class="token comment">//   setState({ ...state, hobby: "coding" });</span>
    <span class="token comment">//   console.log("hook state change name async", state);</span>
    <span class="token comment">// }, 3000);</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p><img src="https://user-images.githubusercontent.com/17973020/59817757-b8974200-9353-11e9-9dda-b211de81e24d.png" alt="55a12b25"/></p><p>可以看到 <code>render</code> 了两次，生命周期函数也走了两次，这个不是我们今天关心的重点，今天关心的重点在 <code>state</code> 的更新上, 第一次更新的时候 <code>name</code> 发生了变更，但是在第二次的时候，拿到的 <code>state</code> 仍然是之前的 <code>name: 牧老师</code>， 所以第一次设置的 <code>name: 牧云云</code> 被覆盖了，页面上基本看不出来 <code>name</code> 变化的过程, 那我们把第二个 <code>setState</code> 放到 <code>setTimeout</code> 中呢， 此时页面的变化过程是很容易看出来的</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">handleClick1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name async"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// setState({ ...state, hobby: "coding" });</span>
    <span class="token comment">// console.log("hook state change name async", state);</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name async"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>这样修改的话， 页面的变化过程就很清晰.这个可以自行查看例子.</p><h4 id="usecallback">useCallback</h4><p><code>setState</code> 在 hooks 中和 class 中都是支持回调的方式的，那么不妨尝试一下回调的方式</p><p><code>handleClick2</code> 函数</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">handleClick2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook sync:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook sync:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>那么输出的又是什么呢？</p><p><img src="https://user-images.githubusercontent.com/17973020/59817787-d5337a00-9353-11e9-88e1-e2306f65b8cf.png" alt="42e8111c"/></p><p>和我们预期的是一致的，<code>name</code> 和 <code>hobby</code> 都发生了更新, 这是为什么呢？单独看代码可以知道在执行函数的时候都会把上一次的 <code>state</code> 作为参数传递给下个函数使用，所以在调用的时候，每次 <code>preState</code> 都是上一次最新的 <code>state</code> 所以能拿到最新的。那么在异步中表现又是什么样的呢？
执行异步的代码</p><p><code>handleClick3</code> 函数</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">handleClick3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook async:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook async:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p><img src="https://user-images.githubusercontent.com/17973020/59817797-e2506900-9353-11e9-8aac-c71f58ceb4e6.png" alt="1bf0c6c2"/></p><p>表现的是一致的。在 class 中表现的是什么样的呢 ?</p><h3 id="class">Class</h3><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"牧老师"</span><span class="token punctuation">,</span>
    hobby<span class="token punctuation">:</span> <span class="token string">"唱, 跳, rap"</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render class"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Class</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">
        name:</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">, hobby:</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hobby<span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">set name and hobby</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>点击按钮看一下输出结果</p><p><img src="https://user-images.githubusercontent.com/17973020/59817816-f5fbcf80-9353-11e9-8d37-9aa3820dacbb.png" alt="c6f6e146"/></p><p><code>class</code> 中表现的是正常的，因为在 class 中， state 是挂在 <code>this</code> 上始终这个 state 都是相同的一个引用，所以在第一次 <code>setState</code> 后，此时的 <code>name</code> 修改为了 <code>牧云云</code>， 再一次调用 <code>setState</code> 的时候，内部拿到的 <code>this.state</code> 已经是最新的 <code>name</code> 了，所以在设置 <code>hobby</code> 的时候已经是最新的了。</p><p>看下 <code>updateReducer</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">updateReducer</span><span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> initialArg<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> hook <span class="token operator">=</span> <span class="token function">updateWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> queue <span class="token operator">=</span> hook<span class="token punctuation">.</span>queue<span class="token punctuation">;</span>
  <span class="token operator">!</span><span class="token punctuation">(</span>queue <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">invariant</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">'Should have a queue. This is likely a bug in React. Please file an issue.'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>

  queue<span class="token punctuation">.</span>lastRenderedReducer <span class="token operator">=</span> reducer<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>numberOfReRenders <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// This is a re-render. Apply the new render phase updates to the previous</span>
    <span class="token keyword">var</span> _dispatch <span class="token operator">=</span> queue<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>renderPhaseUpdates <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Render phase updates are stored in a map of queue -> linked list</span>
      <span class="token operator">...</span>省略部分
    <span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> _dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// The last update in the entire queue</span>
  <span class="token keyword">var</span> last <span class="token operator">=</span> queue<span class="token punctuation">.</span>last<span class="token punctuation">;</span>
  <span class="token comment">// The last update that is part of the base state.</span>
  <span class="token keyword">var</span> baseUpdate <span class="token operator">=</span> hook<span class="token punctuation">.</span>baseUpdate<span class="token punctuation">;</span>
  <span class="token keyword">var</span> baseState <span class="token operator">=</span> hook<span class="token punctuation">.</span>baseState<span class="token punctuation">;</span>

  <span class="token comment">// Find the first unprocessed update.</span>
  <span class="token keyword">var</span> first <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>baseUpdate <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// For the first update, the queue is a circular linked list where</span>
      <span class="token comment">// `queue.last.next = queue.first`. Once the first update commits, and</span>
      <span class="token comment">// the `baseUpdate` is no longer empty, we can unravel the list.</span>
      last<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    first <span class="token operator">=</span> baseUpdate<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    first <span class="token operator">=</span> last <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> last<span class="token punctuation">.</span>next <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _newState <span class="token operator">=</span> baseState<span class="token punctuation">;</span>
    <span class="token keyword">var</span> newBaseState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> newBaseUpdate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> prevUpdate <span class="token operator">=</span> baseUpdate<span class="token punctuation">;</span>
    <span class="token keyword">var</span> _update <span class="token operator">=</span> first<span class="token punctuation">;</span>
    <span class="token keyword">var</span> didSkip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> updateExpirationTime <span class="token operator">=</span> _update<span class="token punctuation">.</span>expirationTime<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>updateExpirationTime <span class="token operator">&lt;</span> renderExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Priority is insufficient. Skip this update. If this is the first</span>
        <span class="token comment">// skipped update, the previous update/state is the new base</span>
        <span class="token comment">// update/state.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>didSkip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          didSkip <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          newBaseUpdate <span class="token operator">=</span> prevUpdate<span class="token punctuation">;</span>
          newBaseState <span class="token operator">=</span> _newState<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Update the remaining priority in the queue.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>updateExpirationTime <span class="token operator">></span> remainingExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          remainingExpirationTime <span class="token operator">=</span> updateExpirationTime<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Process this update.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_update<span class="token punctuation">.</span>eagerReducer <span class="token operator">===</span> reducer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// If this update was processed eagerly, and its reducer matches the</span>
          <span class="token comment">// current reducer, we can use the eagerly computed state.</span>
          _newState <span class="token operator">=</span> _update<span class="token punctuation">.</span>eagerState<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">var</span> _action2 <span class="token operator">=</span> _update<span class="token punctuation">.</span>action<span class="token punctuation">;</span>
          _newState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>_newState<span class="token punctuation">,</span> _action2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      prevUpdate <span class="token operator">=</span> _update<span class="token punctuation">;</span>
      _update <span class="token operator">=</span> _update<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>_update <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> _update <span class="token operator">!==</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>didSkip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newBaseUpdate <span class="token operator">=</span> prevUpdate<span class="token punctuation">;</span>
      newBaseState <span class="token operator">=</span> _newState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Mark that the fiber performed work, but only if the new state is</span>
    <span class="token comment">// different from the current state.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span>_newState<span class="token punctuation">,</span> hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">markWorkInProgressReceivedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> _newState<span class="token punctuation">;</span>
    hook<span class="token punctuation">.</span>baseUpdate <span class="token operator">=</span> newBaseUpdate<span class="token punctuation">;</span>
    hook<span class="token punctuation">.</span>baseState <span class="token operator">=</span> newBaseState<span class="token punctuation">;</span>

    queue<span class="token punctuation">.</span>lastRenderedState <span class="token operator">=</span> _newState<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> dispatch <span class="token operator">=</span> queue<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><img src="https://user-images.githubusercontent.com/17973020/59817874-23e11400-9354-11e9-8f56-bf6995fc93e3.jpg" alt="ddda387a"/></p><p>关注这块代码</p><p><img src="https://user-images.githubusercontent.com/17973020/59817900-38bda780-9354-11e9-8769-0d2e3d62336d.jpg" alt="8764128b"/></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span>_update<span class="token punctuation">.</span>eagerReducer <span class="token operator">===</span> reducer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// If this update was processed eagerly, and its reducer matches the</span>
  <span class="token comment">// current reducer, we can use the eagerly computed state.</span>
  _newState <span class="token operator">=</span> _update<span class="token punctuation">.</span>eagerState<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> _action2 <span class="token operator">=</span> _update<span class="token punctuation">.</span>action<span class="token punctuation">;</span>
  _newState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>_newState<span class="token punctuation">,</span> _action2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>这个 <code>reducer</code> 是什么呢？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">updateState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">updateReducer</span><span class="token punctuation">(</span>basicStateReducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">basicStateReducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span> <span class="token function">action</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">:</span> action<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>所以这个 <code>reducer</code> 就是 <code>basicStateReducer</code>, 会进行判断，如果是函数就执行，如果不是函数就直接返回这个 <code>state</code>. <code>_update.action</code> 存储的就是<code>setXX</code> 的参数，所以在传递的不是函数的时候直接就会返回 <code>_action2</code>, 否则就会返回 <code>_action2(_newState)</code> 拿到最新的值.</p><p>那么为什么 <code>传递进去的 State</code> 不是最新的呢？ 可以参考 <a href="https://overreacted.io/how-are-function-components-different-from-classes/">How Are Function Components Different from Classes?</a> <code>Dan</code> 在这篇文章里面详细说明了，每次 <code>render</code> 都是新的函数.</p><h2 id="总结">总结</h2><p>类组件中， <code>setState</code> 会自动进行值的合并，所以可以单独设置一个值，但是在 <code>hooks</code> 中在调用 <code>setXXX</code> 的时候必须要设置全部的值，并且由于函数闭包的特性，调用多次 <code>setXXXX</code> 进行对象结构赋值的时候，拿到的 <code>state</code> 始终是之前的 <code>state</code>， 如果要想获取到最新的值，可以使用 <code>setXXX(callback)</code> 的方式拿到最新的值.</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React Context 😁]]></title>
            <link>/posts/2019-08-10/context/</link>
            <guid>/posts/2019-08-10/context/</guid>
            <pubDate>Fri, 09 Aug 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><h1 id="context">Context</h1><p><a href="https://reactjs.org/docs/context.html#when-to-use-context">context</a> 在 react 中是一个神奇的东西，<code>context</code> 的出现是为了解决在 react 中传递 props 需要多层传递的问题，
在使用了 context 之后可以有效的解决这个问题。从 15 版本到 16 版本, <code>context</code> 的 api 也发生了不少的变化。先看下在 class 中如何使用 context</p><h2 id="class-context">Class Context</h2><p>首先需要先声明一个 context, 如何声明？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> context <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>通过调用 <code>React.createContext</code> 来创建一个 context 的声明, 如何使用呢？比如此时有父组件叫做 app</p><p>app.js</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    value<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'lanyincao'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function-variable function">updateState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>context<span class="token punctuation">.</span>Provider
          value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">...</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">,</span> updateState<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updateState <span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token operator">></span>
          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token punctuation">.</span>Provider<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>可以通过调用 <code>context.Provider</code> 来作为父组件的那一层，此时需要接受一个 <code>value</code> 的 props, 每次 value 发生变化，都会触发 <code>context</code> 的重新渲染。</p><p>既然 <code>context</code> 的目的是为了解决 props 传递的问题，那么在子组件中是如何拿到在 app.js 中的数据呢, 假设此时有子组件叫 <code>ExampleA.js</code></p><p>ExampleA.js</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ExampleA</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span><span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>xxxx<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>在子组件中需要使用 <code>context.Consumer</code>, 这是一个 <a href="https://reactjs.org/docs/render-props.html#use-render-props-for-cross-cutting-concerns">render props</a> 组件, 接收一个参数叫做
<code>value</code>, 此时的 <code>value</code> 就是 <code>context.Provider</code> 传递下来的 <code>value</code>, 所以就可以在内部使用拿到的 <code>value</code>。</p><h2 id="tips">Tips</h2><p>在使用 <code>context</code> 的时候需要注意一些点，首先 <code>context</code> 是无法被 <code>bailout</code> 意思就是无论你是使用 <code>PureComponent</code> 还是 <code>memo</code> 都是无法阻止 <code>context</code> 的更新的。并且如果 context 所在的组件没有更新，但是 context 发生了更新，
那么此时只会渲染 <code>context</code> 的部分, 比如下面这段代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ExampleB</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
          <span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>div<span class="token operator">></span>
              <span class="token operator">&lt;</span>div<span class="token operator">></span>
                name<span class="token punctuation">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">.</span>age<span class="token punctuation">}</span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
              <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">.</span>updateState<span class="token punctuation">}</span><span class="token operator">></span>updateAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>此时点击 <code>updateAge</code> 会调用顶层的 <code>updateAge</code>, 那么 <code>app</code> 组件被更新，所以 <code>Provider</code> 的 <code>value</code> 发生了变化，所以 <code>context</code> 将会更新。但是 <code>ExampleB</code> 组件中的 <code>console.log(111)</code> 并
没有被打印出来，里面的 <code>age</code> 却发生了变化，这也是 <code>react</code> 本身做的优化之一吧，发生做不必要的渲染。那么在看下 <code>ExampleC</code> 组件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ExampleC</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
          <span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>div<span class="token operator">></span>
              <span class="token operator">&lt;</span>div<span class="token operator">></span>
                name<span class="token punctuation">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">.</span>age<span class="token punctuation">}</span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
              <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">.</span>updateState<span class="token punctuation">}</span><span class="token operator">></span>updateAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>此时 <code>ExampleC</code> 组件是 <code>PureComponent</code>, <code>PureComponent</code> 对组件做了部分优化，当 <code>props</code> 没有发生变化的时候是不会 <code>render</code> 的，此时 <code>ExampleC</code> 组件没有多余的 props, 点击 <code>updateAge</code>, 会发现 <code>ExampleC</code> 中的
<code>age</code> 也发生了变化，但是 <code>console.log(111)</code> 仍然也没有输出，所以无论是 <code>PureComponent</code> 还是 <code>memo</code>， <code>shouldComponentUpdate</code> 都是无法阻止 <code>context</code> 的更新的。</p><h2 id="hook-context">Hook Context</h2><p><code>React</code> 团队在去年 10 月份的 <code>conf</code> 上讲到了 <code>Hook</code>, 可以在函数中使用状态，那么 <code>Hook</code> 解决了什么问题呢？在 <code>class</code> 中很多时候需要使用 <code>Hoc</code>, <code>render props</code>, 这些高阶的方法来封装一些方法，在 <code>js</code> 中，
都知道<code>回调地狱</code>， 那么在 <code>react</code> 中就存在了一种叫做 <code>嵌套地狱</code> 的形式，比如</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Hoc<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>Hoc<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>Hoc<span class="token operator">></span>
          <span class="token operator">&lt;</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span>Hoc<span class="token operator">></span>
              <span class="token operator">&lt;</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span>Hoc<span class="token operator">></span>
                  <span class="token operator">&lt;</span>div <span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>Hoc<span class="token operator">></span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>Hoc<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Hoc<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Hoc<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span>Hoc<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Hoc<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Hoc<span class="token operator">></span>
</code></pre><p>这种有可能会嵌套的非常非常的神，对于调试来说也不是很方便。这也是 <code>Hook</code> 出来的原因之一。具体 <a href="https://reactjs.org/docs/hooks-intro.html">Hook 用法</a> 可以去参照官网即可。</p><p>今天在这里主要来介绍在 <code>Hook</code> 中如何使用 <code>context</code>， 在 <code>Hook</code> 有一个 <code>hook</code> 叫做 <a href="https://reactjs.org/docs/hooks-reference.html#usecontext">useContext</a></p><p><code>需要注意的是所有的</code>Hook<code>只能用于函数式组件中，如果在 class 中还需要用 class 的用法</code></p><p>不放把上面的 <code>ExampleB</code> 组件进行改造成函数组件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ExampleB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        name<span class="token punctuation">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">.</span>age<span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">.</span>updateState<span class="token punctuation">}</span><span class="token operator">></span>updateAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>在函数里使用了 <code>useContext</code>, 注意所有的 <code>Hook</code> 都必要在函数组件中的顶层使用！！！
<code>useContext</code> 接收的参数是 <code>context</code>, 这个地方要注意一下</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="">Correct<span class="token punctuation">:</span> <span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
Incorrect<span class="token punctuation">:</span> <span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
Incorrect<span class="token punctuation">:</span> <span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>useContext</code> 的返回值就是 <code>context.Provider</code> 的 <code>value</code> 的值，当 <code>value</code> 发生变化的时候，使用 <code>context</code> 的地方就会发生更新。比如此时点击
<code>updateAge</code>， 那么 <code>ExampleB</code> 就会发生更新，<code>age</code> 就会发生变化。</p><p>在 <code>Hook</code> 中使用 <code>useContext</code> 极为简单，但是一定要记得在<code>顶层使用</code>。<code>context</code> 通常会与 <code>useReducer</code> 一起使用, 比如创建一个简单的表单，就可以这么处理。至于如何创建
高效的 <code>Form</code>, 这里就不做详细的阐述。</p><h2 id="context-is-necessary">context is necessary?</h2><p><code>context</code> 一般能解决大部分的场景，但是是否所有的场景都适合 <code>context</code> 呢？现在市场上有很多的状态管理的库比如 <code>redux</code>, <code>mobx</code>, <code>rematch</code>, <code>reselect</code>, <code>dva</code> 等一些库来处理
状态的问题。这些库可能处理的不仅仅是状态的问题，还有一些异步操作，一些副作用的处理等。以 <code>react-redux</code> 为例</p><p>在 <code>react-redux</code> 中也使用了 context, 但是内部代码确采用了 <code>subscriber</code> 的方式，为什么？在 <code>class</code> 中说过只要使用 <code>context</code> 的地方,都会造成更新，那么比如在 A 组件中只需要 <code>age</code> 字段
在 <code>B</code> 组件中只需要 <code>name</code> 字段，所希望的是在修改 <code>age</code> 的时候， <code>B</code> 组件是不应该发生 <code>render</code> 的，所以 <code>react-redux</code> 内部采用了这种方式来处理 <code>context</code> 引起的性能问题。通常在日常的业务代码中
不用太关心这个问题，因为在使用 <code>context</code> 的时候通常涉及的组件数量不会很多，即使多 <code>render</code> 了几次也不会造成太大的影响。</p><p>如果你正在使用 <code>context</code>，又遇到了同样的性能问题，可能你并不想用 <code>react-redux</code>，那么我推荐使用 <a href="https://github.com/snakeUni/react-redux-chaos">react-redux-chaos</a> 这个库，这个库的写法很简单，也
做到了部分渲染，修改 A 组件并不会影响到 B 组件。只需要在组件中使用 <code>useSelector</code> 即可</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux-chaos'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ExampleA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> getState<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      age<span class="token punctuation">:</span> <span class="token punctuation">{</span>state<span class="token punctuation">.</span>age<span class="token punctuation">}</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'updateAge'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>updateAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>具体用法可以参考官网。</p><h2 id="conslusion">Conslusion</h2><p><code>context</code> 解决了状态多层传递的问题，但是也有可能会引起一些性能文艺。一般情况下不需要太多关注这个性能问题，除非真正的遇到这个问题。在函数中可以使用 <code>useContext</code> 新的 <code>Hook</code> 来达到和 class 中
同样的效果。</p><h2 id="thanks">Thanks</h2></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[🤔 Form]]></title>
            <link>/posts/2019-08-19/form/</link>
            <guid>/posts/2019-08-19/form/</guid>
            <pubDate>Sun, 18 Aug 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>表单组件是在 <code>B端</code> 开发中最常用的一个组件，比如 <code>Input</code>, <code>Textarea</code>, <code>DatePicker</code> 等等，这些都是常用的表单类组件，然而表单的管理确是比较复杂的部分。常规在开发表单的时候，很多时候可能不使用 <code>Form</code> 这样的组件而是这样</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>person<span class="token punctuation">,</span> setPerson<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    address<span class="token punctuation">:</span> <span class="token string">''</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">submit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>label<span class="token operator">></span>姓名<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>
      <span class="token operator">&lt;</span>Input value<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>person<span class="token punctuation">,</span> name<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>label<span class="token operator">></span>年龄<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>
      <span class="token operator">&lt;</span>Input value<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>age<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>person<span class="token punctuation">,</span> age<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>label<span class="token operator">></span>地址<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>
      <span class="token operator">&lt;</span>Input value<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>address<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>person<span class="token punctuation">,</span> address<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><p>如果不使用基础的 <code>form</code> 标签，基础表单基本上都是这么写的，声明表单中所需要的状态，对应的 <code>value</code> 与各自的组件对应起来，如果存在校验信息的是，还需要进行校验。因为表单很多时候是需要进行实时校验的，及时让用户发现问题，然后能及时改正问题。那这样每一个 <code>Input</code> 这样的组件都应该需要 <code>validate</code> 这样的一个校验函数，还有是否在 <code>onChange</code> 时候校验还是在 <code>onBlur</code> 的时候校验，这些都是需要考虑的问题。如果我们的状态不是特别多的情况下，这样写是没有什么问题的？但是即使是这样简单的表单，如果此时是 <code>A</code> 页面需要这样的表单， <code>B</code> 页面也同样需要这样的表单，<code>validate</code> 等都需要。那么要不去拷贝代码过来修改一下，要不自己封装一个 <code>Form</code> 来解决这个问题。</p><h2 id="封装-form-">封装 Form 😲</h2><p>考虑一下上面的代码如何封装成一个 <code>Form</code> 呢？就像上面的代码一样，组件的名称已经命名为 <code>Form</code> 了, 是否这样就可以了呢？如果存在这样的结构呢？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Form<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">B</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token constant">A</span>'<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token constant">B</span>'<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token constant">C</span>' <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">B</span>'<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span>'<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>
</code></pre><p>此时 <code>C</code> 组件内部才用了 <code>Input</code> 这样的组件，那如果在 <code>C&#x27;</code> 组件中用到了 <code>C</code> 组件的信息怎么办呢？
遇到这种场景通常的做法叫做 <code>lifting state up</code>, 状态提升，在更新 <code>C</code> 组件的时候，把状态同步更新到 <code>Form</code> 组件， <code>Form</code> 组件又把这个数据传递到 <code>C&#x27;</code> 组件， <code>C&#x27;</code> 组件拿到了正确的数据。<code>Nice</code>, 通过状态提升，成功的解决了这样的问题。但是这样每次就需要在 <code>Form</code> 中存储状态，然后还需要传递回调函数到需要的组件中，更新相应的状态。如果组件嵌套只有 <code>2 - 3</code> 层的时候，这样是完全没有问题的。但是如果组件嵌套有很多层呢？比如此时 <code>E 组件</code> 才是 <code>Input</code> 组件的所在，那么这样嵌套下去传递</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Form<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token constant">D</span><span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token constant">E</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">D</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">C</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">B</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>
</code></pre><p>的层数只会越来越多，后面维护起来要每一层每一层去看，防止其中一层出现问题了。针对这样的问题，如何解决呢？很多童鞋会想到 <code>react-redux</code>, <code>mbox</code> 通过状态管理工具来解决这样的传递的问题，恭喜思路是完全正确的，通过目前的一些状态管理库是可以做到的。不妨以 <code>react-redux</code> 举例， <code>react-redux</code> 内部使用了 <code>React Context</code>, 是的， <code>React</code> 团队为了解决这种问题，提供了 <code>context</code> 这样的 <code>api</code>, 那么 <code>context</code> 如何使用呢？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> FormContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>FormContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> value<span class="token punctuation">,</span> dispatch<span class="token punctuation">:</span> setValue <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>
      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>FormContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>首先需要使用 <code>React.createContext</code> 来创建一个 <code>context</code>, 然后在组件中使用 <code>context.Provider</code>, <code>context.Provider</code> 接受一个 <code>value</code> props， 如何获取到 <code>value</code> 中的值</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FormContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Field</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>FormContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>通过在<code>子组件</code>中使用 <code>useContext()</code> 获取到相应的 value, 如果在 <code>class 组件</code>中则</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FormContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Field</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>FormContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
        <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>FormContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>使用 <code>FormContext.Consumer</code> 的方式，这是一个 <code>render props</code> 的组件。因为一个普通的 <code>Form</code> 就可以简洁的完成了, 首先在 <code>Form</code> 组件中利用 <code>context.Provider</code> 把想要的值和方法传递下去，在 <code>Field</code> 组件中拿到 <code>value</code> 和 <code>dispatch</code>, 这样就解决了多层传递状态的问题。这样简约的表单用起来很爽，但是随着业务的慢慢复杂，需要的功能也会越来越多，表单中的组件也会越来越多，比如</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Form<span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">...</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>
</code></pre><p>有可能这样的 <code>Field</code> 组件可能有几十个甚至上百个，然后发现表单变得越来越慢越来越慢，这是为什么呢？因为在 <code>Field</code> 组件中每次执行 <code>dispatch</code> 都会修改顶层的 value, 顶层的 <code>value</code> 发生变化了，这样每一个 <code>Field</code> 组件都会被渲染，只要是使用了 <code>useContext()</code> 这样的组件都会被渲染，这个渲染的量可能非常非常的大，及时一个简单的 <code>Input</code> 修改了其中的一个值，也会造成整个 <code>Form</code> 重新 render, 一两次 render 可能耗时非常少，但是当达到上百个的时候，此时的 <code>render</code> 耗时就会非常非常的高。可能这第一个 <code>Field</code> 中只修改了 <code>a</code> 属性，可是其他的 <code>Field</code> 中都没有用到 <code>a</code> 属性，其余的子组件的渲染是多余的。但是 <code>context</code> 是无法被 <code>bail out</code> 的, 所以所有的 <code>Field</code> 都会渲染，那么不妨控制下 <code>Field</code> 的子组件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext<span class="token punctuation">,</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Field</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> validate<span class="token punctuation">,</span> validateOnChange <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Sub name<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span> validate<span class="token operator">=</span><span class="token punctuation">{</span>validate<span class="token punctuation">}</span> validateOnChange <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> validate<span class="token punctuation">,</span> validateOnchange<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>此时 <code>Field</code> 组件通过使用 <code>useMemo</code> 进行缓存，只有当数组的值发生变化的时候，才会再一次重新 <code>render</code>, <code>useMemo</code> 的作用和 <code>react-redux</code> 的 <code>connect</code> 高阶函数的作用是一样的，通过使用 <code>useMemo</code> 可以把 <code>render 时间长的子组件</code> 进行缓存，减少 <code>render</code> 时间，提升性能。</p><h2 id="optimize-form-">optimize form 😊</h2><p>此时是否已经完成了整个 <code>Form</code> 的优化过程了，此时的 <code>Form</code>, 包括常规使用的 <code>context</code> 通过 <code>memo</code> 进行优化实际上已经提高了很多。但是即使是单纯的一个 <code>Field</code> 组件，如果数量很多的情况下仍然还是会存在卡顿的情况的。特别是当接入了第三方组件库的时候。本身第三方组件提供的功能有很多，组件本身也会很复杂，不像原生的 <code>input</code> 那样简单，假设此时接入的是 <code>antd</code> 的组件库</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">CustomInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Field<span class="token operator">></span>
      <span class="token operator">&lt;</span>Input <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Field<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>在对 <code>Input</code> 进行快速输入的时候，可以看到页面的响应会有所延迟，如果打开 <code>chrome</code> 的 <code>performance</code> 进行录制的时候，就会看到一个长任务，关于 <code>长任务</code> 这里不做详细描述，这种可以通过时间分片（time slicing） 来解决这样的问题。但是我们集中在 <code>Field</code> 渲染这块，<code>Input</code> 的改动是非常频繁的，那么顶层的 <code>context</code> 修改的也非常频繁，即使使用了 <code>useMemo</code> 仍然还有卡顿的现象。<code>React 成员 Dan</code> 在 twitter 中说过 <code>context</code> 并不适合修改特别频繁的组件，比如 <code>Input</code>, 但是在 <code>Form</code> 中的确需要 <code>context</code> 来处理这样的问题。那么是否可以解决这样的问题？如何来优化 <code>Form</code>?</p><p>目前所有的数据都是存在了 <code>Form</code> 的顶层，在顶层更新触发子组件的更新，那么针对 <code>Field</code> 这么频繁的渲染，能否做到每次修改当前 <code>Field</code> 的时候，只会渲染当前的 <code>Field</code> 呢？</p><p><code>Form.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> formContext<span class="token punctuation">,</span> formApiContext<span class="token punctuation">,</span> formStateContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useForm <span class="token keyword">from</span> <span class="token string">'./useForm'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用 useForm</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>formState<span class="token punctuation">,</span> formApi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 注册器，用于调用局部更新函数</span>
  <span class="token keyword">const</span> fieldRegister <span class="token operator">=</span> <span class="token function">useRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>formContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>fieldRegister<span class="token punctuation">}</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>formStateContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>formState<span class="token punctuation">}</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>formApiContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>formApi<span class="token punctuation">}</span><span class="token operator">></span>
          <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>formApiContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>formStateContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>formContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>在 <code>Form.js</code> 中首先有三个 <code>context</code> 分别是 <code>formContext</code>, <code>formStateContext</code>, <code>formApiContext</code>。为什么不使用一个 context 呢？因为通过三个 context, 把各自的职能进行区分。多个 context 也能起到优化的作用，比如</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">A</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>formApiContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">B</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>formStateContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>那么每次 <code>formStateContext</code> 的 value 更新的时候，<code>formApiContext</code> 的使用处皆不受影响，<code>A</code> 组件不会因为 <code>B</code> 组件使用的 <code>context</code> 的值的变化而进行更新。这也是为什么使用多个 <code>context</code>。</p><p><code>useForm.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">useForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    values<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    errors<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 设置单个值</span>
  <span class="token keyword">const</span> <span class="token function-variable function">setValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cloneValues <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>values<span class="token punctuation">,</span> name<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> values<span class="token punctuation">:</span> cloneValues <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 设置单个错误信息</span>
  <span class="token keyword">const</span> <span class="token function-variable function">setError</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cloneErrors <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> name<span class="token punctuation">:</span> error <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> errors<span class="token punctuation">:</span> cloneErrors <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 获取单个值</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getValue</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>values<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 获取单个错误</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getError</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>errors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> setValue<span class="token punctuation">,</span> setError <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>在 <code>useForm.js</code> 中声明了一个状态，也可以使用 <code>useReducer</code>, 这里主要为了阐述思想，使用 <code>useState</code>。有两个函数分别是 <code>setValue</code> 和 <code>setError</code>, <code>setValue:</code> 是用来更新修改的值， <code>setError:</code> 用来设置错误的信息。<code>useRegister</code> 这里先暂不讨论，先看一下常规的 <code>Field</code> 组件。</p><p><code>Field.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> useFormApi <span class="token keyword">from</span> <span class="token string">'./useFormApi'</span><span class="token punctuation">;</span>

<span class="token comment">// 假设所有的</span>
<span class="token keyword">const</span> <span class="token function-variable function">Field</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> formApi <span class="token operator">=</span> <span class="token function">useFormApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    formApi<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    value<span class="token punctuation">:</span> formApi<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    error<span class="token punctuation">:</span> formApi<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    handleChange
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>一个简单的 <code>Field</code> 用于修改 <code>form</code> 的值，如何使用？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Field name<span class="token operator">=</span><span class="token string">'name'</span><span class="token operator">></span>
  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value<span class="token punctuation">,</span> handleChange <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Input value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Field<span class="token operator">></span>
</code></pre><p>这就是 <code>Field</code> 的简单用法，但是此时，只要使用 <code>Field</code> 的组件在其中一个 <code>Field</code> 组件发生更新的时候，其他的所有的 <code>Field</code> 组件也会发生更新。因为在每次更新值的时候，调用 <code>setValue</code>, <code>useForm</code> 更新，返回新的值，<code>context</code> 的 value 发生变化，所有用到 <code>context</code> 地方都会发生更新。此时也许会想到每次返回的 <code>formApi</code> 都是一个新的对象好像是没有意义的，是的，这里是没有意义的，这也是之前为什么要使用多个 <code>context</code>, 因为每次都是新的引用这是完全没有意义的，那么是不是应该进行缓存呢？貌似这种想法是可以的，OK，做下去。</p><p><code>Form.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用 useForm</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>formState<span class="token punctuation">,</span> formApi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 注册器，用于调用局部更新函数</span>
  <span class="token keyword">const</span> fieldRegister <span class="token operator">=</span> <span class="token function">useRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 缓存 api</span>
  <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>formApi<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>formContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>fieldRegister<span class="token punctuation">}</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>formStateContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>formState<span class="token punctuation">}</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>formApiContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>api<span class="token punctuation">}</span><span class="token operator">></span>
          <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>formApiContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>formStateContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>formContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>使用 <code>useState</code> 对 <code>formApi</code> 进行缓存，现在每次更新，<code>formApi</code> 都是之前的引用不在是新的引用，每次发生变化的是 <code>formState</code>, 此时修改 <code>Input</code> 的值发现一个问题，就是<code>Input</code> 输入不进去了？为什么呢？</p><p>因为在 <code>Field</code> 组件是使用了 <code>useFormApi</code></p><p><code>useFormApi.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> useContxt <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> formApiContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useFormApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> formApi <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>formApiContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> formApi<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>但是因为在 <code>Form</code> 中对 <code>formApi</code> 进行了缓存，所以使用 <code>useFormApi</code> 的组件都不会重新 <code>render</code>, 所以 <code>Input</code> 中的值会输入不进去。那么是不是需要把在 <code>Field</code> 组件中在使用 <code>useFormState</code> 呢？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> useContxt <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> formStateContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useFormState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> formState <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>formStateContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> formState<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>如何使用 <code>useFormState</code> 的话， 那就没有意义了，因为每一个 <code>Field</code> 都会进行 <code>render</code>, 所以还需要继续使用 <code>useFormApi</code>, 现在考虑一下如何让单个 <code>Field</code> 渲染不影响其他的呢？</p><p>在业务中，写组件的时候，两个组件如何做到互不影响，那就是组件管理自己的状态，比如:</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">A</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>name<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>age<span class="token punctuation">:</span> <span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'lanyincao'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>setName<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>setAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>此时 <code>A</code> 组件的状态只在自己的组件的内部，所以本身 <code>A</code> 组件的更新并不会影响到其他的组件的变化。那是否 <code>Field</code> 组件也可以这么做呢？</p><p><code>Field.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useFormApi <span class="token keyword">from</span> <span class="token string">'./useFormApi'</span><span class="token punctuation">;</span>

<span class="token comment">// 假设所有的</span>
<span class="token keyword">const</span> <span class="token function-variable function">Field</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> formApi <span class="token operator">=</span> <span class="token function">useFormApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> register <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>formContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 位置内部值的状态</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>formApi<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    formApi<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    register<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      setValue
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    value<span class="token punctuation">:</span> formApi<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    error<span class="token punctuation">:</span> formApi<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    handleChange
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>此时用过一个 register 把每一个 <code>Field</code> 的 setValue 注册进去，很多其他的高性能的 <code>Form</code> 都是采取 <code>Observer</code> 的形式的，包括 <code>react-redux</code> 如何解决性能问题的，都是通过 <code>Observer</code> 的形式。看下 <code>useRegister</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fields <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">register</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    fields<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">unregister</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    fields<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>fields<span class="token punctuation">,</span> <span class="token punctuation">{</span> register<span class="token punctuation">,</span> unregister <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>把 <code>Form</code> 中的 <code>useRegister</code> 移到 <code>useForm</code> 中, 修改 <code>useForm</code> 的返回值, 以及修改 <code>setValue</code></p><p><code>useForm.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useRegister <span class="token keyword">from</span> <span class="token string">'./register'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">useForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    values<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    errors<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>fields<span class="token punctuation">,</span> fieldsApi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 设置单个值</span>
  <span class="token keyword">const</span> <span class="token function-variable function">setValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cloneValues <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>values<span class="token punctuation">,</span> name<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取到当前修改的 field</span>
    <span class="token keyword">const</span> currentField <span class="token operator">=</span> fields<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> values<span class="token punctuation">:</span> cloneValues <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用内部的 setValue</span>
    currentField<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 设置单个错误信息</span>
  <span class="token keyword">const</span> <span class="token function-variable function">setError</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cloneErrors <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> name<span class="token punctuation">:</span> error <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> errors<span class="token punctuation">:</span> cloneErrors <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 获取单个值</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getValue</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>values<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 获取单个错误</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getError</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>errors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> setValue<span class="token punctuation">,</span> setError <span class="token punctuation">}</span><span class="token punctuation">,</span> fieldsApi<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p><code>Form.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> formContext<span class="token punctuation">,</span> formApiContext<span class="token punctuation">,</span> formStateContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useForm <span class="token keyword">from</span> <span class="token string">'./useForm'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用 useForm</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>formState<span class="token punctuation">,</span> formApi<span class="token punctuation">,</span> fieldsApi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 缓存 api</span>
  <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>formApi<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>formContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>fieldsApi<span class="token punctuation">}</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>formStateContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>formState<span class="token punctuation">}</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>formApiContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>formApi<span class="token punctuation">}</span><span class="token operator">></span>
          <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>formApiContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>formStateContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>formContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>现在修改其中一个 <code>Field</code> 的时候会调用内部的 <code>setValue</code> 方法，实现局部渲染。</p><h2 id="conclusion">conclusion</h2><ul><li><code>context</code> 比较适合于改动不是很频繁的组件</li><li>对于 render 时间较长的可以使用 <code>useMemo</code> 来优化</li><li>变动频繁的可以采用已有的状态管理库比如 <a href="https://github.com/snakeUni/react-redux-chaos">react-redux-chaos</a> 或者采取 <code>Observer</code> 的形式来处理</li></ul></div>]]></content:encoded>
        </item>
    </channel>
</rss>