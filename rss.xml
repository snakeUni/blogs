<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>lanyincao</title>
        <link>/</link>
        <description>personal blog by lanyincao</description>
        <lastBuildDate>Sun, 01 Dec 2019 01:45:22 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[useCallback]]></title>
            <link>/posts/2019-01-10/cache/</link>
            <guid>/posts/2019-01-10/cache/</guid>
            <pubDate>Wed, 09 Jan 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><div><div class="document_logo__1v782"><img src="./static/media/navi-logo.0f2f9d7f.svg" class="document_logo-navi__bOUrK" alt="logo"/><img src="./static/media/react-logo.5d5d9eef.svg" class="document_logo-react__3-boM" alt="logo"/></div><h2 id="cache-your-event-listener">Cache your event listener</h2><p>在js中，创建两个函数是不等的，对象也是这样。来个栗子看下</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
a <span class="token operator">===</span> b <span class="token comment">// false</span>
</code></pre><p>对象也是这样</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
d <span class="token operator">===</span> c <span class="token comment">// false</span>
</code></pre><p>那我们这样写  同一个引用就相等了</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> d
c <span class="token operator">===</span> d <span class="token comment">//true</span>
</code></pre><p>对象也是这样就不多提了，好了回到正题，我们在写React的时候经常需要给事件加上监听器,看一下代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击测试</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>我们’正常（<em>不正常</em>）的代码很多都是这样，当然不包含会有人来写<code>黑科技</code>啦。在这个click函数里，每次点击都会创建一个新的函数,因为这里我们需要传个参数。大家先不要急，传变化的参数后面会说到的。那对于这个我们应该怎么改呢。我们可以这么做？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\

<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击测试</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>或者</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\

<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击测试</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>上面大家都知道，那有列表的情况下呢</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\

<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>
          list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
            <span class="token parameter">item</span> <span class="token operator">=></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>这个代码是我们正常的写法了，在每次点击的时候都会生成一个新的函数，那这个我们其实就可以利用缓存函数了，这个缓存函数可以自己写比如我们这样改</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  
  <span class="token function-variable function">getCache</span> <span class="token operator">=</span> <span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>
          list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
            <span class="token parameter">item</span> <span class="token operator">=></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>这样只在第一次的时候会创建一个新的函数，在后面的每一次都会引用之前的函数啦。</p></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why React Hooks]]></title>
            <link>/posts/2019-02-15/hook/</link>
            <guid>/posts/2019-02-15/hook/</guid>
            <pubDate>Thu, 14 Feb 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><h2 id="why-react-hooks">why React Hooks</h2><p>React 在16.8.0的时候正式发布了<a href="https://reactjs.org/docs/hooks-intro.html">Hook</a>, 基础的hook有<code>useState</code>, <code>useReducer</code>, <code>useEffect</code></p><h3 id="mouse-position">Mouse Position</h3><p>这是一个获取鼠标位置的🌰, <a href="https://codesandbox.io/s/xj0ppk0pzw">mousePosition</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">MousePostion</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    y<span class="token punctuation">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>

  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousemove<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousemove<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function-variable function">mousemove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">
        Mouse X: </span><span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token plain-text"> Mouse Y: </span><span class="token punctuation">{</span> y <span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>如果我们想在其他的地方复用该组件，就要重写相同的代码  </p><p>如果我们想拿到x, y的时候在去做其他的事情，那么我们就需要去修改这个代码。这个行为就被限制在这个组件里面了。</p><h3 id="hoc">HOC</h3><p>用hoc来修改此组件，把x, y作为props传给任何需要用x, y的组件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">withMouseHoc</span><span class="token punctuation">(</span><span class="token parameter">ComponentWrap</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> <span class="token punctuation">{</span>
      x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      y<span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function-variable function">mousemove</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ComponentWrap</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">this</span><span class="token punctuation">.</span><span class="token attr-value">state</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MouseHocDemo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        MouseHoc X: </span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token plain-text">, MouseHoc Y: </span><span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>此时我们把鼠标的行为通过hoc进行了一次封装，以后需要用到该行为的都可以完全复用。</p><p>虽然这是更多的代码，但我们正在朝着正确的方向前进。它不再与订阅行为紧密耦合。</p><p>如果我们想渲染一些不同的东西呢?我们总是需要做一个新的组件吗?</p><h3 id="render-props">render props</h3><p>用render props来改写</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">MouseRenderProps</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    y<span class="token punctuation">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function-variable function">mousemove</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>this<span class="token punctuation">.</span>state <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MouseRenderPropsDemo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MouseRenderProps</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
              MouseRenderProps X: </span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token plain-text">, MouseRenderProps Y: </span><span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MouseRenderProps</span></span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>renderProps也可以解决之前mouse的问题,和HOC具有相同的功效</p><p>这种细微的差别有一些非常棒的好处
现在，提供x和y的功能非常明显，您还可以轻松地重命名它们，以防止名称冲突。<br/>我们对渲染有灵活的控制。我们不需要创建新的组件，如果我们决定这样做，它只是一个简单的复制粘贴。<br/>您可以在组件呈现函数中直接看到所有这些。新开发人员很容易识别它。<br/>这种模式的主要问题是，您的组件必须在它们的呈现中嵌套许多这样的组件。一旦你开始嵌套多个渲染组件，你就很难推断出发生了什么。<br/>同时，这也造成了一种错误的等级观念。仅仅因为一个行为“嵌套”在另一个行为之下，并不意味着它依赖于父行为</p><p><em>如果有一种方法可以拥有所有这些能力，以一种声明方式。👀</em></p><h3 id="hook">Hook</h3><p>用 hook来改写</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>position<span class="token punctuation">,</span> setPosition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token function-variable function">mousemove</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span> y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>setPosition<span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> position<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">MouseHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token function">useMousePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      MouseHook X: </span><span class="token punctuation">{</span>position<span class="token punctuation">.</span>x<span class="token punctuation">}</span><span class="token plain-text">, MouseHook Y: </span><span class="token punctuation">{</span>position<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>这就是我想要的一切。</p><p>不仅行为在它自己整洁的小程序包中，useEffect还阻止它分散在三个不同的生命周期钩子中
组件从哪里获取数据是非常清晰的，它被整齐地放置在render函数中。
无论我需要引入多少这样的代码，我的代码都不会变得越来越嵌套。</p><p><strong>但是 当使用hooks的时候也要遵守一些<a href="https://reactjs.org/docs/hooks-rules.html">原则</a></strong></p><h3 id="final">Final</h3><p>虽然hooks的出现带来了很多的便利，但是先不要急着去改写已有项目中的代码，
有可能后续部分hook还会发生改变，也有可能还存在某些问题，也有可能某些情况下是hook无法处理的。</p><p>虽然对于hook的利弊我还不太理解，但是我敢于去尝试，如果有愿意一起玩的，也可以联系我。</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A try/catch quiz]]></title>
            <link>/posts/2019-02-19/try-catch/</link>
            <guid>/posts/2019-02-19/try-catch/</guid>
            <pubDate>Mon, 18 Feb 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><h2 id="a-trycatch-quiz">a try/catch quiz</h2><p>在async/await出来后，在代码中使用了越来越多的try/catch, 但是很多时候对它并不了解，以及finally，接下来看几个小栗子  </p><h3 id="when-you-throw-a-catch">When you throw a catch</h3><p>如果在catch里抛出了一个错误，那么finally还会运行嘛。看下面的<a href="https://codepen.io/anon/pen/LqMoJd?editors=1111">例子</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错啦'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catch 执行'</span><span class="token punctuation">)</span>
    <span class="token keyword">throw</span> e
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally 运行'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最后执行'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p><em>catch 和 finally 的 <code>console.log</code>都执行了，但是最后一个console.log并没有执行</em></p><h3 id="try-without-catch">Try without catch</h3><p>当只有try / finally的时候<a href="https://codepen.io/anon/pen/LqMoJd?editors=1111">例子</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">example1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'try'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally 运行'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最后执行'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">example1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p><em>尽管没有catch finally仍然被执行了。当然即使有catch finally还是会被执行</em></p><h3 id="return-and-finally">Return and finally</h3><p>如果在try里面返回,那么 finally还会执行嘛<a href="https://codepen.io/anon/pen/LqMoJd?editors=1111">例子</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">example2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'return try'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally 运行'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">example2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p><em>即使在try里进行了return finally仍然会执行</em></p><h3 id="the-rule">The Rule</h3><p>finally 在try/catch/finally里，无论如何都会执行。所以可以在finally处理loading状态。那么<code>Promise.finally</code>是否也是一样。 </p><h3 id="promise-fulfilled">Promise fulfilled</h3><p>当promise的状态为<code>fulfilled</code>的时候, 执行了<a href="https://codepen.io/anon/pen/BMvgdK?editors=1112">finally</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolve'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><h3 id="promise-rejected">Promise rejected</h3><p>当promise的状态为<code>rejected</code>的时候, 是否执行了<a href="https://codepen.io/anon/pen/BMvgdK?editors=1112">finally</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">example1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolve'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catch'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">example1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p><em>当promise的状态为<code>rejected</code>的时候, finally 仍然会被执行。</em></p><p>这也是本文的灵感所在。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">promise文档</a><br/>比如在请求接口的时候，在接口没有返回之前显示loading信息，接口返回后无论成功还是失败都应该取消loading, 来个<a href="https://codesandbox.io/s/v10k0xyqwl">栗子🌰</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">LoadingMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">getMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>setLoading<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">点击加载</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>loading <span class="token operator">?</span> <span class="token string">"加载中..."</span> <span class="token punctuation">:</span> <span class="token string">"loading success"</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><em>对于无论是成功还是拒绝状态都要执行的，就可以放在finally里进行处理啦</em></p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React.forwardRef]]></title>
            <link>/posts/2019-04-13/forwardRef/</link>
            <guid>/posts/2019-04-13/forwardRef/</guid>
            <pubDate>Fri, 12 Apr 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><h1 id="reactforwardref">React.forwardRef</h1><p><code>forwardRef</code> 主要目的是为了解决高阶组件中无法拿到ref的问题，以及在函数式组件中，可以直接拿到原生的DOM元素  <a href="https://reactjs.org/docs/react-api.html#reactforwardref">forwardRef</a>  </p><p>接下来主要看下 <code>forwardRef</code> 的用法，以及在 <code>hooks</code> 中的相关用法</p><h2 id="高阶组件中的-ref">高阶组件中的 <code>ref</code></h2><p>在类组件中， 想要调用原生的事件， 我们的做法通常是暴露一个方法， 在方法内部调用原生的方法， 比如 <code>input</code> 的 <code>focus</code> 事件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">Input</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>

  <span class="token function-variable function">focus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>inputRef<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputRef <span class="token operator">=</span> el<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>在组件外部， 想要主动使 <code>input</code> 聚焦 </p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> testRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>testRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>

testRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p>用过传递 <code>ref</code>, 调用组件内部的 <code>focus</code> 方法， 使 <code>input</code> 主动聚焦  </p><p>那如果此时有一个高阶组件封装了这个 <code>Input</code> 组件 如何调用 <code>focus</code> 使 input 主动聚焦  </p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">Hoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token punctuation">/></span></span>
<span class="token punctuation">}</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Hoc</span></span> <span class="token punctuation">/></span></span>
</code></pre><p>此时， 如何调用 <code>Input</code> 里的 <code>focus</code> 方法， 似乎是没有办法(也有可能是我不知道), <code>forwardRef</code> 由此而生</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> testRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">Hoc</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>
<span class="token punctuation">}</span>

React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span>Hoc<span class="token punctuation">)</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Hoc</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>testRef<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>

testRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p>此时 <code>testRef.current.focus()</code> 就可以直接调用， 使 <code>input</code> 聚焦</p><h2 id="函数式组件--直接操作-dom">函数式组件  直接操作 <code>DOM</code></h2><p>我们不妨把  <code>Input</code> 改正函数式组件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">Input</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token spread"><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token attr-value">props</span><span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>Input<span class="token punctuation">)</span>
</code></pre><p>此时 <code>Input</code> 的 <code>ref</code> 直接挂在到 <code>DOM</code> 上了， 为了使 <code>input</code> 聚焦</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>

inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 聚焦 😊</span>
inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 失焦 😈</span>
</code></pre><h2 id="hooks-中使用">hooks 中使用</h2><p>如果想要达到和 <code>class</code> 相同的效果， 在函数中该如何做, <code>hooks</code> 提供了相应的api</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">Input</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  React<span class="token punctuation">.</span><span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">focus</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">blur</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>Input<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>使用 <code>Input</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>

inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 聚焦 😊</span>
inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 失焦 😈</span>
</code></pre><p>想要详细了解， 前往 <a href="https://reactjs.org/docs/react-api.html#reactforwardref">官网</a> </p><p><code>React</code> 官网团队 有了新的<a href="https://github.com/reactjs/rfcs/pull/107#issuecomment-466304382">提议</a>可能会解决 <code>forwardRef</code> 这种复杂的用法</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React Hooks vs Class]]></title>
            <link>/posts/2019-05-28/hooks-vs-class/</link>
            <guid>/posts/2019-05-28/hooks-vs-class/</guid>
            <pubDate>Mon, 27 May 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><h1 id="hooks-vs-class">Hooks vs Class</h1><p>React 释放 <code>hooks</code> 已经半年了，从 hooks 刚刚释放的时候我就开始关注，并且就开始去尝试使用它。 从释放到现在 hooks 刚过不少， 内部源码至少改了两三次， 那为什么要写这篇文章呢 ？ 是因为一次偶然的事情引发的。 有一天<code>渊虹</code>老哥抱着电脑对我说， 你看我这个表单的提交时间就是在调用 <code>onSubmit</code> 的时候有点延迟啊， 这是为什么呀? 我试了一下果然是这样， 很奇怪了，为什么会这样呢 ? 于是我想到的第一个问题就是难道我把<code>同步当做异步处理</code>导致的？ 还是有可能的啊，于是我在群里问了这样的一个问题</p><img src="https://user-images.githubusercontent.com/17973020/58377052-f8fcdd80-7faa-11e9-9755-773651feb5a1.png" height="500"/><img src="https://user-images.githubusercontent.com/17973020/58377171-0ca94380-7fad-11e9-9030-cd2a7d5fe676.png" height="500"/><p>于是我就在第二天跑了一下，试试同步当做异步处理的话，会造成多少的延迟。当数量<code>小于100个</code>时候，简单的函数同步异步时间基本一致，1000 个的时候时间就有一些小的差距了， 10000 个的时候差距非常明显， <code>所以必要的时候，同步还是同步，不要当做异步来处理了</code>, 那一个 <code>form</code> 内部超过 100 个校验函数基本不可能，所以这个方面我就忽略了, 那会不会是另外一种可能呢？</p><h2 id="render-时间长且次数多导致的延迟">render 时间长且次数多导致的延迟</h2><p>再一次分析了<code>渊虹</code>老哥的代码，发现在提交表单的时候，<code>render</code> 了四次，于是我去查了下源码，发现这四次分别是，<code>校验设置错误</code> =&gt; <code>设置提交状态</code> =&gt; <code>设置表单是否有效</code> =&gt; <code>设置提交次数</code>, 然后在调用 <code>onSubmit</code>， 哎呀这个地方有有待修改的，比如可以改成这样 <code>设置提交状态</code> =&gt; <code>如果有效，调用 onSubmit 在设置有效状态和提交次数</code>。 否则在 <code>设置错误和状态</code>， 这样呢就能保证 <code>onSubmit</code> 的提交只有一次 <code>setState</code> 的操作，看下代码的截图</p><p>之前的提交</p><p><img src="https://user-images.githubusercontent.com/17973020/58377128-31e98200-7fac-11e9-8627-685ce89c7ccf.png" alt="d97dca23"/></p><p>修改后的提交</p><p><img src="https://user-images.githubusercontent.com/17973020/58377137-52194100-7fac-11e9-9503-dfc0e707c492.png" alt="fc8f38a3"/></p><p>这样在 <code>onSubmit</code> 之前就会调用的很快， 即使 <code>render</code> 很耗时</p><p>那肯定会有人提出来这样的问题， render 时间长这个是业务代码中的问题导致的， 那么 <code>render</code> 次数过多这是为什么呢？为什么这里会 <code>render</code> 这么多次呢 ？那从这里就引起今天这个话题了？ <code>class vs hooks</code></p><p>代码点击这里 =&gt; <a href="https://codesandbox.io/s/hooks-vs-class-5buww">hooks vs class - CodeSandbox</a></p><p>最简单的就是在事件中来测试区别。<code>hooks and class</code> 的 <code>increase</code> 事件都是同步的，我们在点击 <code>increasement</code> 的按钮的时候打开控制台看下输出是什么</p><p><img src="https://user-images.githubusercontent.com/17973020/58377138-65c4a780-7fac-11e9-9267-9b40f275e8c5.png" alt="45965b8f"/></p><p>可以看到 <code>console</code> 的顺序是先输出了事件调用中的 <code>console</code>， 在输出了 <code>render</code> 中的 <code>console</code>， 这个大家都是知道的， <code>setState</code> 是<a href="https://reactjs.org/docs/faq-state.html#when-is-setstate-asynchronous">异步的</a> , 修改下代码，在这个事件函数里多次 <code>setState</code> 会怎么样呢？结果输出还是一样呢？对于这样是为什么，可以看<a href="https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous">官网</a>以及<a href="https://juejin.im/post/5b45c57c51882519790c7441">setState 解析</a>，
在点击 <code>increaseBy</code> 按钮，这个和 <code>decrease</code> 是一样的， 所以我们只取一个来分析， 点击 <code>increaseBy</code> 按钮后看下控制台的输出</p><p><code>class</code> 中的 <code>increase</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function-variable function">increaseBy</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fire increaseBy class"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p><code>hooks</code> 中的 <code>increase</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">increaseBy</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fire increaseBy hook"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>看下控制台的输出</p><p><img src="https://user-images.githubusercontent.com/17973020/58377148-7ecd5880-7fac-11e9-8686-523fb69f01d7.png" alt="e5a1163b"/></p><p><code>hooks</code> render 的次数是两次，然而在 class 中 render 了 四次，这是为什么呢？看起来很奇怪是不是。那我们不妨在 <code>hooks</code> 中在增加几个看看怎么样?</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">increaseBy</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fire increaseBy hook"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>在看下控制台的输出</p><p><img src="https://user-images.githubusercontent.com/17973020/58377153-8bea4780-7fac-11e9-8757-52307d8b6463.png" alt="2e4c8768"/></p><p>完全一样，那我们不妨修改下，在 <code>hooks</code> 中每次都设置不一样的值看看会发生什么</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">increaseBy</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fire increaseBy hook"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>输出如下</p><p><img src="https://user-images.githubusercontent.com/17973020/58377157-986ea000-7fac-11e9-88d3-ca0bbd31882c.png" alt="47307b50"/></p><p>这次是一致了对不对， 都是 <code>render</code> 了 4 次后才调用 <code>console</code> 的，至于在 class 中为什么表现是这样的看<a href="https://juejin.im/post/5b45c57c51882519790c7441">上面的文章</a></p><p>那在 <code>hooks</code> 中为什么会表现的如此不一致呢？ <a href="https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update">官网</a>也贴了出来</p><p><img src="https://user-images.githubusercontent.com/17973020/58377158-a6bcbc00-7fac-11e9-9b78-54572ac17b52.png" alt="dccae51f"/></p><p>会用 <code>Objest.is</code> 会进行比较，如果认为是一样的，那么就会 <code>bailout</code>, 有的人可能会和我有一样的想法，当初我在看这个时候，我觉得在调用第二次 <code>render</code> 的时候就知道是一样的了，那应该不会在到 <code>commit</code> 阶段了吧。我们不妨来试试</p><p>在 <code>hooks</code> 加上这段代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update hook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>在 class 中也加上这段代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><code>hooks</code> 中的 <code>increase</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">increaseBy</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fire increaseBy hook"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p><code>class</code> 中的 <code>increase</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function-variable function">increaseBy</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> number <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fire increaseBy class"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>此时在点击 <code>increaseBy</code> 按钮看下输出如何？</p><p><img src="https://user-images.githubusercontent.com/17973020/58377167-da97e180-7fac-11e9-930d-74da2f014e1e.png" alt="77290f12"/></p><p>果真是这样的， 在 <code>hooks</code> 中第二次执行 <code>render</code> 并不会在去执行 <code>commit</code> 了，只在第一次 <code>render</code> 的时候执行了 <code>commit</code>， 然而 <code>class</code> 中却每次都执行了。</p><p>有的同学会问执行 <code>setCount</code> 的时候内部源码肯定都会去执行， 那为啥不是 <code>4</code> 次 <code>render</code>， <code>一次 commit</code> 呢 ？那我们来看下源码为什么会出现这种情况？</p><p>在 <code>调用 setCount</code> 的时候会调用源码中的 <code>dispatch</code>函数，在第一次调用的时候</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>count + number = 2</code> 结果是 <code>2</code> 不等于上一次的 <code>0</code>, 所以会走到 <code>updateReducer</code>,
在 <code>updateReducer</code> 里面会进行比较</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span>_newState<span class="token punctuation">,</span> hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">markWorkInProgressReceivedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>如果不相同会如何， 会进行标记 <code>didReceiveUpdate</code>, 把 <code>didReceiveUpdate</code> 标记为 <code>true</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">markWorkInProgressReceivedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>如果为 <code>true</code>，会进行更新。对于 <code>didReceiveUpdate</code> 的其他标记是在 <code>beginWork</code> 函数中.</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span><span class="token parameter">current$$<span class="token number">1</span><span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderExpirationTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> updateExpirationTime <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>expirationTime<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>current$$<span class="token number">1</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> oldProps <span class="token operator">=</span> current$$<span class="token number">1.</span>memoizedProps<span class="token punctuation">;</span>
    <span class="token keyword">var</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldProps <span class="token operator">!==</span> newProps <span class="token operator">||</span> <span class="token function">hasContextChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// If props or context changed, mark the fiber as having performed work.</span>
      <span class="token comment">// This may be unset if the props are determined to be equal later (memo).</span>
      didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>updateExpirationTime <span class="token operator">&lt;</span> renderExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><p>这是第一次 <code>setCount</code>， 当第二次 setCount 的时候, <code>didReceiveUpdate</code> 为 <code>false</code>， 会走下面这段代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span>current$$<span class="token number">1</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>didReceiveUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">bailoutHooks</span><span class="token punctuation">(</span>current$$<span class="token number">1</span><span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderExpirationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>
    current$$<span class="token number">1</span><span class="token punctuation">,</span>
    workInProgress<span class="token punctuation">,</span>
    renderExpirationTime
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>这段代码在好几处都有， 其中一处就是在 <code>updateFunctionComponent</code> 这个函数中。那么 <code>bailoutHooks</code> 做了什么 ?</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">bailoutHooks</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> expirationTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  workInProgress<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> current<span class="token punctuation">.</span>updateQueue<span class="token punctuation">;</span>
  workInProgress<span class="token punctuation">.</span>effectTag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>Passive <span class="token operator">|</span> Update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>expirationTime <span class="token operator">&lt;=</span> expirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    current<span class="token punctuation">.</span>expirationTime <span class="token operator">=</span> NoWork<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p><code>WIP</code> 的 <code>updateQueue</code> 更新为 <code>current</code> 的 <code>updateQueue</code></p><p><code>bailoutOnAlreadyFinishedWork</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>
  <span class="token parameter">current$$<span class="token number">1</span><span class="token punctuation">,</span>
  workInProgress<span class="token punctuation">,</span>
  renderExpirationTime</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">cancelWorkTimer</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>current$$<span class="token number">1</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Reuse previous context list</span>
    workInProgress<span class="token punctuation">.</span>contextDependencies <span class="token operator">=</span> current$$<span class="token number">1.</span>contextDependencies<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>enableProfilerTimer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Don't update "base" render times for bailouts.</span>
    <span class="token function">stopProfilerTimerIfRunning</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Check if the children have any pending work.</span>
  <span class="token keyword">var</span> childExpirationTime <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>childExpirationTime<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>childExpirationTime <span class="token operator">&lt;</span> renderExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// The children don't have any work either. We can skip them.</span>
    <span class="token comment">// TODO: Once we add back resuming, we should check if the children are</span>
    <span class="token comment">// a work-in-progress set. If so, we need to transfer their effects.</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// This fiber doesn't have work, but its subtree does. Clone the child</span>
    <span class="token comment">// fibers and continue.</span>
    <span class="token function">cloneChildFibers</span><span class="token punctuation">(</span>current$$<span class="token number">1</span><span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>当执行到第三次 <code>setCount</code> 的时候， 会被直接 <code>return</code> 代码在 <code>dispatchAction</code> 中,
因为在 <code>queue.dispatch</code> 绑定了 <code>dispatchAction</code></p><pre><code class="language-jsx(84)" data-language="jsx(84)" data-highlighted-line-numbers="">function dispatchAction(fiber, queue, action) {
  !(numberOfReRenders &lt; RE_RENDER_LIMIT)
    ? invariant(
        false,
        &quot;Too many re-renders. React limits the number of renders to prevent an infinite loop.&quot;
      )
    : void 0;

  {
    !(arguments.length &lt;= 3)
      ? warning$1(
          false,
          &quot;State updates from the useState() and useReducer() Hooks don&#39;t support the &quot; +
            &quot;second callback argument. To execute a side effect after &quot; +
            &quot;rendering, declare it in the component body with useEffect().&quot;
        )
      : void 0;
  }

  var alternate = fiber.alternate;
  if (
    fiber === currentlyRenderingFiber$1 ||
    (alternate !== null &amp;&amp; alternate === currentlyRenderingFiber$1)
  ) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -&gt; linked list of updates. After this render pass, we&#39;ll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdate = true;
    var update = {
      expirationTime: renderExpirationTime,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };
    if (renderPhaseUpdates === null) {
      renderPhaseUpdates = new Map();
    }
    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
    if (firstRenderPhaseUpdate === undefined) {
      renderPhaseUpdates.set(queue, update);
    } else {
      // Append the update to the end of the list.
      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
      while (lastRenderPhaseUpdate.next !== null) {
        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      }
      lastRenderPhaseUpdate.next = update;
    }
  } else {
    flushPassiveEffects();

    var currentTime = requestCurrentTime();
    var _expirationTime = computeExpirationForFiber(currentTime, fiber);

    var _update2 = {
      expirationTime: _expirationTime,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    };

    // Append the update to the end of the list.
    var _last = queue.last;
    if (_last === null) {
      // This is the first update. Create a circular list.
      _update2.next = _update2;
    } else {
      var first = _last.next;
      if (first !== null) {
        // Still circular.
        _update2.next = first;
      }
      _last.next = _update2;
    }
    queue.last = _update2;

    if (
      fiber.expirationTime === NoWork &amp;&amp;
      (alternate === null || alternate.expirationTime === NoWork)
    ) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var _lastRenderedReducer = queue.lastRenderedReducer;
      if (_lastRenderedReducer !== null) {
        var prevDispatcher = void 0;
        {
          prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }
        try {
          var currentState = queue.lastRenderedState;
          var _eagerState = _lastRenderedReducer(currentState, action);
          // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn&#39;t changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.
          _update2.eagerReducer = _lastRenderedReducer;
          _update2.eagerState = _eagerState;
          if (is(_eagerState, currentState)) {
            console.log(&quot;直接退出&quot;);
            // Fast path. We can bail out without scheduling React to re-render.
            // It&#39;s still possible that we&#39;ll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {
          // Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        }
      }
    }
    {
      if (shouldWarnForUnbatchedSetState === true) {
        warnIfNotCurrentlyBatchingInDev(fiber);
      }
    }
    scheduleWork(fiber, _expirationTime);
  }
}
</code></pre><p><code>_lastRenderedReducer</code> 就是 <code>basicStateReducer</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">basicStateReducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span> <span class="token function">action</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">:</span> action<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>第三第四次会在这个判断语句里退出。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is</span><span class="token punctuation">(</span>_eagerState<span class="token punctuation">,</span> currentState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Fast path. We can bail out without scheduling React to re-render.</span>
  <span class="token comment">// It's still possible that we'll need to rebase this update later,</span>
  <span class="token comment">// if the component re-renders for a different reason and by that</span>
  <span class="token comment">// time the reducer has changed.</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>那么第二次为什么不在这里退出呢 ？ 在第二次这里的语句是 <code>false</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>expirationTime <span class="token operator">===</span> NoWork <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>alternate <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> alternate<span class="token punctuation">.</span>expirationTime <span class="token operator">===</span> NoWork<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><p>追溯下内部的调用， 在第二次的时候 <code>fiber.expirationTime !== NoWork</code>, 所以这个判断语句就不会走, 那么第三次为什么又相等了呢？再一次看下 <code>bailoutHooks</code> 函数</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">bailoutHooks</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> expirationTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  workInProgress<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> current<span class="token punctuation">.</span>updateQueue<span class="token punctuation">;</span>
  workInProgress<span class="token punctuation">.</span>effectTag <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>Passive <span class="token operator">|</span> Update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>expirationTime <span class="token operator">&lt;=</span> expirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    current<span class="token punctuation">.</span>expirationTime <span class="token operator">=</span> NoWork<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p><code>current.expirationTime = NoWork;</code> 进行了赋值。所以这就是整个过程了。</p><h2 id="总结">总结</h2><p><code>class</code> 和 <code>hooks</code> 中基本保持一致, 但是 <code>hooks</code> 中会做一层 <code>Object.is</code> 的判断，
所以在进行状态更新的时候， 需要注意下这点。还有在异步调用中， <code>hooks</code> 也无法拿到最新的值， 因为在一个函数中， 每次 <code>render</code> 都是新的函数， 所以输出的都是之前的值， 这个点要注意一下。这个可以参考 <code>Dan</code> 的博客 <a href="https://overreacted.io/a-complete-guide-to-useeffect/">A Complete Guide to useEffect</a></p><p><a href="https://codesandbox.io/s/hooks-vs-class-5buww">查看代码</a></p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React Hooks State 🤔]]></title>
            <link>/posts/2019-06-03/state/</link>
            <guid>/posts/2019-06-03/state/</guid>
            <pubDate>Sun, 02 Jun 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><h1 id="setxxxx-vs-setstate">setXXXX vs setState</h1><p>这篇文章主要是为了分析 <code>Hooks</code> 中 <code>setXXX</code> 和 class 中 <code>setState</code> 的一些不同之处， <a href="https://uni-blog.netlify.com/posts/2019-05-28/hooks-vs-class/">上篇文章</a> 分析了 <code>state</code> 的部分不同，以及各自调用触发的 <code>render</code> 次数的分析， 同步和异步状态下的区别。要记住的是在函数式组件中，<code>setXXX</code> 会进行 <code>Object.is</code> 进行比较。</p><h2 id="原因">原因</h2><p>为什么写这篇文章呢？因为昨天 <code>原型链</code> 在写 <code>form</code> 的时候遇到了一些问题， 至于为什么又是 <code>form</code> 我就不多做描述了。这是我和 <code>原型链</code> 的对话:</p><p><code>原型链</code>: 蓝银草为什么我调用 <code>setFieldValue</code> 设置的值不正确呢？
<code>我</code>：你是怎么调用的呢？
<code>原型链</code>: 我是连续调用 <code>setFieldValue</code> 两次，结果都是最后一次生效，但是调用 <code>setValues</code> 就是好的。
<code>我</code>：不可能吧，我看下你的实现，看了下原型链的演示，原来如此，我知道了为什么只显示最后一个了，这是 <code>React</code> 函数组件导致的这个问题。</p><p><a href="https://codesandbox.io/s/funny-mclean-6lru4">具体栗子点击这里</a></p><p><code>hook</code> 代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"牧老师"</span><span class="token punctuation">,</span>
    hobby<span class="token punctuation">:</span> <span class="token string">"唱, 跳, rap"</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update hook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name sync"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change hobby sync"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name async"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name async"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook sync:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook sync:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleClick3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook async:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook async:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render hook"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hooks</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">
      name:</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">, hobby:</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>hobby<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">set name and hobby sync</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick1<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginLeft<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          set name and hobby async
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick2<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginLeft<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          set name and hobby by callback
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick3<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginLeft<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
          set name and hobby by callback async
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>在代码里点击按钮，然后设置 <code>name</code> 和 <code>hobby</code>, 可能有人会问这不是两个属性值一起设置嘛，为什么不<code>setState({ ...state, name: &#x27;牧云云&#x27;, hobby: &#x27;coding&#x27; })</code>, 因为当时 <code>setFieldValue</code> 的用法是 <code>setFieldValue(key, value)</code>, 所以就调用了多次。此时点击 <code>set name and hobby sync</code> 按钮，会输出什么呢？</p><p><img src="https://user-images.githubusercontent.com/17973020/59817731-a3221800-9353-11e9-8a15-88bdbc67bcdd.png" alt="cc37e062"/></p><p>可以看到在事件中输出的都是上一次的 <code>state</code>, 然后 <code>render</code> 了一次，为什么 <code>render</code> 了一次可以看我<a href="https://uni-blog.netlify.com/posts/2019-05-28/hooks-vs-class/">上篇文章</a> 中的链接，这里我们先跳过这里，看 <code>render 部分</code>的输出</p><p><code>handleClick</code> 函数</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name sync"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change hobby sync"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>可以看出只有第二个生效了，直接看这个应该很容易知道，在调用第一次 <code>setState</code> 的时候，此时的 <code>name</code> 是 <code>牧云云</code>, 但是在设置第二个的时候， 此时的 <code>state</code> 还是上一次的 <code>name: 牧老师</code> 这个状态，所以在合并的过程，剩下的就是最后一次的 <code>setState</code> 的内容，那么输出的就是只有 <code>hobby: coding</code> 生效。那么在异步过程中呢？或者是 <code>非 React 合成事件和生命周期函数中</code>, 再次点击 <code>set name and hobby async</code>, 那么输出又是什么呢？</p><p><code>handleClick1</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">handleClick1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name async"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name async"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// setTimeout(() => {</span>
    <span class="token comment">//   setState({ ...state, hobby: "coding" });</span>
    <span class="token comment">//   console.log("hook state change name async", state);</span>
    <span class="token comment">// }, 3000);</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p><img src="https://user-images.githubusercontent.com/17973020/59817757-b8974200-9353-11e9-9dda-b211de81e24d.png" alt="55a12b25"/></p><p>可以看到 <code>render</code> 了两次，生命周期函数也走了两次，这个不是我们今天关心的重点，今天关心的重点在 <code>state</code> 的更新上, 第一次更新的时候 <code>name</code> 发生了变更，但是在第二次的时候，拿到的 <code>state</code> 仍然是之前的 <code>name: 牧老师</code>， 所以第一次设置的 <code>name: 牧云云</code> 被覆盖了，页面上基本看不出来 <code>name</code> 变化的过程, 那我们把第二个 <code>setState</code> 放到 <code>setTimeout</code> 中呢， 此时页面的变化过程是很容易看出来的</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">handleClick1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name async"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// setState({ ...state, hobby: "coding" });</span>
    <span class="token comment">// console.log("hook state change name async", state);</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hook state change name async"</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>这样修改的话， 页面的变化过程就很清晰.这个可以自行查看例子.</p><h4 id="usecallback">useCallback</h4><p><code>setState</code> 在 hooks 中和 class 中都是支持回调的方式的，那么不妨尝试一下回调的方式</p><p><code>handleClick2</code> 函数</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">handleClick2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook sync:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook sync:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>那么输出的又是什么呢？</p><p><img src="https://user-images.githubusercontent.com/17973020/59817787-d5337a00-9353-11e9-88e1-e2306f65b8cf.png" alt="42e8111c"/></p><p>和我们预期的是一致的，<code>name</code> 和 <code>hobby</code> 都发生了更新, 这是为什么呢？单独看代码可以知道在执行函数的时候都会把上一次的 <code>state</code> 作为参数传递给下个函数使用，所以在调用的时候，每次 <code>preState</code> 都是上一次最新的 <code>state</code> 所以能拿到最新的。那么在异步中表现又是什么样的呢？
执行异步的代码</p><p><code>handleClick3</code> 函数</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">handleClick3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook async:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">preState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pre hook async:"</span><span class="token punctuation">,</span> preState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>preState<span class="token punctuation">,</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p><img src="https://user-images.githubusercontent.com/17973020/59817797-e2506900-9353-11e9-8aac-c71f58ceb4e6.png" alt="1bf0c6c2"/></p><p>表现的是一致的。在 class 中表现的是什么样的呢 ?</p><h3 id="class">Class</h3><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"牧老师"</span><span class="token punctuation">,</span>
    hobby<span class="token punctuation">:</span> <span class="token string">"唱, 跳, rap"</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"牧云云"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> hobby<span class="token punctuation">:</span> <span class="token string">"coding"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render class"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Class</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">
        name:</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text">, hobby:</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hobby<span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">set name and hobby</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>点击按钮看一下输出结果</p><p><img src="https://user-images.githubusercontent.com/17973020/59817816-f5fbcf80-9353-11e9-8d37-9aa3820dacbb.png" alt="c6f6e146"/></p><p><code>class</code> 中表现的是正常的，因为在 class 中， state 是挂在 <code>this</code> 上始终这个 state 都是相同的一个引用，所以在第一次 <code>setState</code> 后，此时的 <code>name</code> 修改为了 <code>牧云云</code>， 再一次调用 <code>setState</code> 的时候，内部拿到的 <code>this.state</code> 已经是最新的 <code>name</code> 了，所以在设置 <code>hobby</code> 的时候已经是最新的了。</p><p>看下 <code>updateReducer</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">updateReducer</span><span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> initialArg<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> hook <span class="token operator">=</span> <span class="token function">updateWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> queue <span class="token operator">=</span> hook<span class="token punctuation">.</span>queue<span class="token punctuation">;</span>
  <span class="token operator">!</span><span class="token punctuation">(</span>queue <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">invariant</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">'Should have a queue. This is likely a bug in React. Please file an issue.'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>

  queue<span class="token punctuation">.</span>lastRenderedReducer <span class="token operator">=</span> reducer<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>numberOfReRenders <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// This is a re-render. Apply the new render phase updates to the previous</span>
    <span class="token keyword">var</span> _dispatch <span class="token operator">=</span> queue<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>renderPhaseUpdates <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Render phase updates are stored in a map of queue -> linked list</span>
      <span class="token operator">...</span>省略部分
    <span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> _dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// The last update in the entire queue</span>
  <span class="token keyword">var</span> last <span class="token operator">=</span> queue<span class="token punctuation">.</span>last<span class="token punctuation">;</span>
  <span class="token comment">// The last update that is part of the base state.</span>
  <span class="token keyword">var</span> baseUpdate <span class="token operator">=</span> hook<span class="token punctuation">.</span>baseUpdate<span class="token punctuation">;</span>
  <span class="token keyword">var</span> baseState <span class="token operator">=</span> hook<span class="token punctuation">.</span>baseState<span class="token punctuation">;</span>

  <span class="token comment">// Find the first unprocessed update.</span>
  <span class="token keyword">var</span> first <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>baseUpdate <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// For the first update, the queue is a circular linked list where</span>
      <span class="token comment">// `queue.last.next = queue.first`. Once the first update commits, and</span>
      <span class="token comment">// the `baseUpdate` is no longer empty, we can unravel the list.</span>
      last<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    first <span class="token operator">=</span> baseUpdate<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    first <span class="token operator">=</span> last <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> last<span class="token punctuation">.</span>next <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _newState <span class="token operator">=</span> baseState<span class="token punctuation">;</span>
    <span class="token keyword">var</span> newBaseState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> newBaseUpdate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> prevUpdate <span class="token operator">=</span> baseUpdate<span class="token punctuation">;</span>
    <span class="token keyword">var</span> _update <span class="token operator">=</span> first<span class="token punctuation">;</span>
    <span class="token keyword">var</span> didSkip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> updateExpirationTime <span class="token operator">=</span> _update<span class="token punctuation">.</span>expirationTime<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>updateExpirationTime <span class="token operator">&lt;</span> renderExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Priority is insufficient. Skip this update. If this is the first</span>
        <span class="token comment">// skipped update, the previous update/state is the new base</span>
        <span class="token comment">// update/state.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>didSkip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          didSkip <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          newBaseUpdate <span class="token operator">=</span> prevUpdate<span class="token punctuation">;</span>
          newBaseState <span class="token operator">=</span> _newState<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Update the remaining priority in the queue.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>updateExpirationTime <span class="token operator">></span> remainingExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          remainingExpirationTime <span class="token operator">=</span> updateExpirationTime<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// Process this update.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_update<span class="token punctuation">.</span>eagerReducer <span class="token operator">===</span> reducer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// If this update was processed eagerly, and its reducer matches the</span>
          <span class="token comment">// current reducer, we can use the eagerly computed state.</span>
          _newState <span class="token operator">=</span> _update<span class="token punctuation">.</span>eagerState<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">var</span> _action2 <span class="token operator">=</span> _update<span class="token punctuation">.</span>action<span class="token punctuation">;</span>
          _newState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>_newState<span class="token punctuation">,</span> _action2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      prevUpdate <span class="token operator">=</span> _update<span class="token punctuation">;</span>
      _update <span class="token operator">=</span> _update<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>_update <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> _update <span class="token operator">!==</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>didSkip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newBaseUpdate <span class="token operator">=</span> prevUpdate<span class="token punctuation">;</span>
      newBaseState <span class="token operator">=</span> _newState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Mark that the fiber performed work, but only if the new state is</span>
    <span class="token comment">// different from the current state.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is</span><span class="token punctuation">(</span>_newState<span class="token punctuation">,</span> hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">markWorkInProgressReceivedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> _newState<span class="token punctuation">;</span>
    hook<span class="token punctuation">.</span>baseUpdate <span class="token operator">=</span> newBaseUpdate<span class="token punctuation">;</span>
    hook<span class="token punctuation">.</span>baseState <span class="token operator">=</span> newBaseState<span class="token punctuation">;</span>

    queue<span class="token punctuation">.</span>lastRenderedState <span class="token operator">=</span> _newState<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> dispatch <span class="token operator">=</span> queue<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><img src="https://user-images.githubusercontent.com/17973020/59817874-23e11400-9354-11e9-8f56-bf6995fc93e3.jpg" alt="ddda387a"/></p><p>关注这块代码</p><p><img src="https://user-images.githubusercontent.com/17973020/59817900-38bda780-9354-11e9-8769-0d2e3d62336d.jpg" alt="8764128b"/></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span>_update<span class="token punctuation">.</span>eagerReducer <span class="token operator">===</span> reducer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// If this update was processed eagerly, and its reducer matches the</span>
  <span class="token comment">// current reducer, we can use the eagerly computed state.</span>
  _newState <span class="token operator">=</span> _update<span class="token punctuation">.</span>eagerState<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> _action2 <span class="token operator">=</span> _update<span class="token punctuation">.</span>action<span class="token punctuation">;</span>
  _newState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>_newState<span class="token punctuation">,</span> _action2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>这个 <code>reducer</code> 是什么呢？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">updateState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">updateReducer</span><span class="token punctuation">(</span>basicStateReducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">basicStateReducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span> <span class="token function">action</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">:</span> action<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>所以这个 <code>reducer</code> 就是 <code>basicStateReducer</code>, 会进行判断，如果是函数就执行，如果不是函数就直接返回这个 <code>state</code>. <code>_update.action</code> 存储的就是<code>setXX</code> 的参数，所以在传递的不是函数的时候直接就会返回 <code>_action2</code>, 否则就会返回 <code>_action2(_newState)</code> 拿到最新的值.</p><p>那么为什么 <code>传递进去的 State</code> 不是最新的呢？ 可以参考 <a href="https://overreacted.io/how-are-function-components-different-from-classes/">How Are Function Components Different from Classes?</a> <code>Dan</code> 在这篇文章里面详细说明了，每次 <code>render</code> 都是新的函数.</p><h2 id="总结">总结</h2><p>类组件中， <code>setState</code> 会自动进行值的合并，所以可以单独设置一个值，但是在 <code>hooks</code> 中在调用 <code>setXXX</code> 的时候必须要设置全部的值，并且由于函数闭包的特性，调用多次 <code>setXXXX</code> 进行对象结构赋值的时候，拿到的 <code>state</code> 始终是之前的 <code>state</code>， 如果要想获取到最新的值，可以使用 <code>setXXX(callback)</code> 的方式拿到最新的值.</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React Context 😁]]></title>
            <link>/posts/2019-08-10/context/</link>
            <guid>/posts/2019-08-10/context/</guid>
            <pubDate>Fri, 09 Aug 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><h1 id="context">Context</h1><p><a href="https://reactjs.org/docs/context.html#when-to-use-context">context</a> 在 react 中是一个神奇的东西，<code>context</code> 的出现是为了解决在 react 中传递 props 需要多层传递的问题，
在使用了 context 之后可以有效的解决这个问题。从 15 版本到 16 版本, <code>context</code> 的 api 也发生了不少的变化。先看下在 class 中如何使用 context</p><h2 id="class-context">Class Context</h2><p>首先需要先声明一个 context, 如何声明？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> context <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>通过调用 <code>React.createContext</code> 来创建一个 context 的声明, 如何使用呢？比如此时有父组件叫做 app</p><p>app.js</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    value<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'lanyincao'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function-variable function">updateState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>context<span class="token punctuation">.</span>Provider
          value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">...</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">,</span> updateState<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updateState <span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token operator">></span>
          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token punctuation">.</span>Provider<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>可以通过调用 <code>context.Provider</code> 来作为父组件的那一层，此时需要接受一个 <code>value</code> 的 props, 每次 value 发生变化，都会触发 <code>context</code> 的重新渲染。</p><p>既然 <code>context</code> 的目的是为了解决 props 传递的问题，那么在子组件中是如何拿到在 app.js 中的数据呢, 假设此时有子组件叫 <code>ExampleA.js</code></p><p>ExampleA.js</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ExampleA</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span><span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>xxxx<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>在子组件中需要使用 <code>context.Consumer</code>, 这是一个 <a href="https://reactjs.org/docs/render-props.html#use-render-props-for-cross-cutting-concerns">render props</a> 组件, 接收一个参数叫做
<code>value</code>, 此时的 <code>value</code> 就是 <code>context.Provider</code> 传递下来的 <code>value</code>, 所以就可以在内部使用拿到的 <code>value</code>。</p><h2 id="tips">Tips</h2><p>在使用 <code>context</code> 的时候需要注意一些点，首先 <code>context</code> 是无法被 <code>bailout</code> 意思就是无论你是使用 <code>PureComponent</code> 还是 <code>memo</code> 都是无法阻止 <code>context</code> 的更新的。并且如果 context 所在的组件没有更新，但是 context 发生了更新，
那么此时只会渲染 <code>context</code> 的部分, 比如下面这段代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ExampleB</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
          <span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>div<span class="token operator">></span>
              <span class="token operator">&lt;</span>div<span class="token operator">></span>
                name<span class="token punctuation">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">.</span>age<span class="token punctuation">}</span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
              <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">.</span>updateState<span class="token punctuation">}</span><span class="token operator">></span>updateAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>此时点击 <code>updateAge</code> 会调用顶层的 <code>updateAge</code>, 那么 <code>app</code> 组件被更新，所以 <code>Provider</code> 的 <code>value</code> 发生了变化，所以 <code>context</code> 将会更新。但是 <code>ExampleB</code> 组件中的 <code>console.log(111)</code> 并
没有被打印出来，里面的 <code>age</code> 却发生了变化，这也是 <code>react</code> 本身做的优化之一吧，发生做不必要的渲染。那么在看下 <code>ExampleC</code> 组件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ExampleC</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
          <span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>div<span class="token operator">></span>
              <span class="token operator">&lt;</span>div<span class="token operator">></span>
                name<span class="token punctuation">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">.</span>age<span class="token punctuation">}</span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
              <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">.</span>updateState<span class="token punctuation">}</span><span class="token operator">></span>updateAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>此时 <code>ExampleC</code> 组件是 <code>PureComponent</code>, <code>PureComponent</code> 对组件做了部分优化，当 <code>props</code> 没有发生变化的时候是不会 <code>render</code> 的，此时 <code>ExampleC</code> 组件没有多余的 props, 点击 <code>updateAge</code>, 会发现 <code>ExampleC</code> 中的
<code>age</code> 也发生了变化，但是 <code>console.log(111)</code> 仍然也没有输出，所以无论是 <code>PureComponent</code> 还是 <code>memo</code>， <code>shouldComponentUpdate</code> 都是无法阻止 <code>context</code> 的更新的。</p><h2 id="hook-context">Hook Context</h2><p><code>React</code> 团队在去年 10 月份的 <code>conf</code> 上讲到了 <code>Hook</code>, 可以在函数中使用状态，那么 <code>Hook</code> 解决了什么问题呢？在 <code>class</code> 中很多时候需要使用 <code>Hoc</code>, <code>render props</code>, 这些高阶的方法来封装一些方法，在 <code>js</code> 中，
都知道<code>回调地狱</code>， 那么在 <code>react</code> 中就存在了一种叫做 <code>嵌套地狱</code> 的形式，比如</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Hoc<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>Hoc<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>Hoc<span class="token operator">></span>
          <span class="token operator">&lt;</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span>Hoc<span class="token operator">></span>
              <span class="token operator">&lt;</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span>Hoc<span class="token operator">></span>
                  <span class="token operator">&lt;</span>div <span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>Hoc<span class="token operator">></span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>Hoc<span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Hoc<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Hoc<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span>Hoc<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Hoc<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Hoc<span class="token operator">></span>
</code></pre><p>这种有可能会嵌套的非常非常的神，对于调试来说也不是很方便。这也是 <code>Hook</code> 出来的原因之一。具体 <a href="https://reactjs.org/docs/hooks-intro.html">Hook 用法</a> 可以去参照官网即可。</p><p>今天在这里主要来介绍在 <code>Hook</code> 中如何使用 <code>context</code>， 在 <code>Hook</code> 有一个 <code>hook</code> 叫做 <a href="https://reactjs.org/docs/hooks-reference.html#usecontext">useContext</a></p><p><code>需要注意的是所有的</code>Hook<code>只能用于函数式组件中，如果在 class 中还需要用 class 的用法</code></p><p>不放把上面的 <code>ExampleB</code> 组件进行改造成函数组件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ExampleB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        name<span class="token punctuation">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token punctuation">{</span>value<span class="token punctuation">.</span>age<span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">.</span>updateState<span class="token punctuation">}</span><span class="token operator">></span>updateAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>在函数里使用了 <code>useContext</code>, 注意所有的 <code>Hook</code> 都必要在函数组件中的顶层使用！！！
<code>useContext</code> 接收的参数是 <code>context</code>, 这个地方要注意一下</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="">Correct<span class="token punctuation">:</span> <span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
Incorrect<span class="token punctuation">:</span> <span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
Incorrect<span class="token punctuation">:</span> <span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>useContext</code> 的返回值就是 <code>context.Provider</code> 的 <code>value</code> 的值，当 <code>value</code> 发生变化的时候，使用 <code>context</code> 的地方就会发生更新。比如此时点击
<code>updateAge</code>， 那么 <code>ExampleB</code> 就会发生更新，<code>age</code> 就会发生变化。</p><p>在 <code>Hook</code> 中使用 <code>useContext</code> 极为简单，但是一定要记得在<code>顶层使用</code>。<code>context</code> 通常会与 <code>useReducer</code> 一起使用, 比如创建一个简单的表单，就可以这么处理。至于如何创建
高效的 <code>Form</code>, 这里就不做详细的阐述。</p><h2 id="context-is-necessary">context is necessary?</h2><p><code>context</code> 一般能解决大部分的场景，但是是否所有的场景都适合 <code>context</code> 呢？现在市场上有很多的状态管理的库比如 <code>redux</code>, <code>mobx</code>, <code>rematch</code>, <code>reselect</code>, <code>dva</code> 等一些库来处理
状态的问题。这些库可能处理的不仅仅是状态的问题，还有一些异步操作，一些副作用的处理等。以 <code>react-redux</code> 为例</p><p>在 <code>react-redux</code> 中也使用了 context, 但是内部代码确采用了 <code>subscriber</code> 的方式，为什么？在 <code>class</code> 中说过只要使用 <code>context</code> 的地方,都会造成更新，那么比如在 A 组件中只需要 <code>age</code> 字段
在 <code>B</code> 组件中只需要 <code>name</code> 字段，所希望的是在修改 <code>age</code> 的时候， <code>B</code> 组件是不应该发生 <code>render</code> 的，所以 <code>react-redux</code> 内部采用了这种方式来处理 <code>context</code> 引起的性能问题。通常在日常的业务代码中
不用太关心这个问题，因为在使用 <code>context</code> 的时候通常涉及的组件数量不会很多，即使多 <code>render</code> 了几次也不会造成太大的影响。</p><p>如果你正在使用 <code>context</code>，又遇到了同样的性能问题，可能你并不想用 <code>react-redux</code>，那么我推荐使用 <a href="https://github.com/snakeUni/react-redux-chaos">react-redux-chaos</a> 这个库，这个库的写法很简单，也
做到了部分渲染，修改 A 组件并不会影响到 B 组件。只需要在组件中使用 <code>useSelector</code> 即可</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux-chaos'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ExampleA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> getState<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      age<span class="token punctuation">:</span> <span class="token punctuation">{</span>state<span class="token punctuation">.</span>age<span class="token punctuation">}</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'updateAge'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>updateAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>具体用法可以参考官网。</p><h2 id="conslusion">Conslusion</h2><p><code>context</code> 解决了状态多层传递的问题，但是也有可能会引起一些性能文艺。一般情况下不需要太多关注这个性能问题，除非真正的遇到这个问题。在函数中可以使用 <code>useContext</code> 新的 <code>Hook</code> 来达到和 class 中
同样的效果。</p><h2 id="thanks">Thanks</h2></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[🤔 Form]]></title>
            <link>/posts/2019-08-19/form/</link>
            <guid>/posts/2019-08-19/form/</guid>
            <pubDate>Sun, 18 Aug 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>表单组件是在 <code>B端</code> 开发中最常用的一个组件，比如 <code>Input</code>, <code>Textarea</code>, <code>DatePicker</code> 等等，这些都是常用的表单类组件，然而表单的管理确是比较复杂的部分。常规在开发表单的时候，很多时候可能不使用 <code>Form</code> 这样的组件而是这样</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>person<span class="token punctuation">,</span> setPerson<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    address<span class="token punctuation">:</span> <span class="token string">''</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">submit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>label<span class="token operator">></span>姓名<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>
      <span class="token operator">&lt;</span>Input value<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>name<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>person<span class="token punctuation">,</span> name<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>label<span class="token operator">></span>年龄<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>
      <span class="token operator">&lt;</span>Input value<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>age<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>person<span class="token punctuation">,</span> age<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>label<span class="token operator">></span>地址<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>
      <span class="token operator">&lt;</span>Input value<span class="token operator">=</span><span class="token punctuation">{</span>person<span class="token punctuation">.</span>address<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>person<span class="token punctuation">,</span> address<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><p>如果不使用基础的 <code>form</code> 标签，基础表单基本上都是这么写的，声明表单中所需要的状态，对应的 <code>value</code> 与各自的组件对应起来，如果存在校验信息的是，还需要进行校验。因为表单很多时候是需要进行实时校验的，及时让用户发现问题，然后能及时改正问题。那这样每一个 <code>Input</code> 这样的组件都应该需要 <code>validate</code> 这样的一个校验函数，还有是否在 <code>onChange</code> 时候校验还是在 <code>onBlur</code> 的时候校验，这些都是需要考虑的问题。如果我们的状态不是特别多的情况下，这样写是没有什么问题的？但是即使是这样简单的表单，如果此时是 <code>A</code> 页面需要这样的表单， <code>B</code> 页面也同样需要这样的表单，<code>validate</code> 等都需要。那么要不去拷贝代码过来修改一下，要不自己封装一个 <code>Form</code> 来解决这个问题。</p><h2 id="封装-form-">封装 Form 😲</h2><p>考虑一下上面的代码如何封装成一个 <code>Form</code> 呢？就像上面的代码一样，组件的名称已经命名为 <code>Form</code> 了, 是否这样就可以了呢？如果存在这样的结构呢？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Form<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">B</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token constant">A</span>'<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token constant">B</span>'<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token constant">C</span>' <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">B</span>'<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span>'<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>
</code></pre><p>此时 <code>C</code> 组件内部才用了 <code>Input</code> 这样的组件，那如果在 <code>C&#x27;</code> 组件中用到了 <code>C</code> 组件的信息怎么办呢？
遇到这种场景通常的做法叫做 <code>lifting state up</code>, 状态提升，在更新 <code>C</code> 组件的时候，把状态同步更新到 <code>Form</code> 组件， <code>Form</code> 组件又把这个数据传递到 <code>C&#x27;</code> 组件， <code>C&#x27;</code> 组件拿到了正确的数据。<code>Nice</code>, 通过状态提升，成功的解决了这样的问题。但是这样每次就需要在 <code>Form</code> 中存储状态，然后还需要传递回调函数到需要的组件中，更新相应的状态。如果组件嵌套只有 <code>2 - 3</code> 层的时候，这样是完全没有问题的。但是如果组件嵌套有很多层呢？比如此时 <code>E 组件</code> 才是 <code>Input</code> 组件的所在，那么这样嵌套下去传递</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Form<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token constant">B</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token constant">C</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token constant">D</span><span class="token operator">></span>
          <span class="token operator">&lt;</span><span class="token constant">E</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">D</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">C</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">B</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>
</code></pre><p>的层数只会越来越多，后面维护起来要每一层每一层去看，防止其中一层出现问题了。针对这样的问题，如何解决呢？很多童鞋会想到 <code>react-redux</code>, <code>mbox</code> 通过状态管理工具来解决这样的传递的问题，恭喜思路是完全正确的，通过目前的一些状态管理库是可以做到的。不妨以 <code>react-redux</code> 举例， <code>react-redux</code> 内部使用了 <code>React Context</code>, 是的， <code>React</code> 团队为了解决这种问题，提供了 <code>context</code> 这样的 <code>api</code>, 那么 <code>context</code> 如何使用呢？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> FormContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>FormContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> value<span class="token punctuation">,</span> dispatch<span class="token punctuation">:</span> setValue <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>
      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>FormContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>首先需要使用 <code>React.createContext</code> 来创建一个 <code>context</code>, 然后在组件中使用 <code>context.Provider</code>, <code>context.Provider</code> 接受一个 <code>value</code> props， 如何获取到 <code>value</code> 中的值</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FormContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Field</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>FormContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>通过在<code>子组件</code>中使用 <code>useContext()</code> 获取到相应的 value, 如果在 <code>class 组件</code>中则</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> FormContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Field</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>FormContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
        <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>FormContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>使用 <code>FormContext.Consumer</code> 的方式，这是一个 <code>render props</code> 的组件。因为一个普通的 <code>Form</code> 就可以简洁的完成了, 首先在 <code>Form</code> 组件中利用 <code>context.Provider</code> 把想要的值和方法传递下去，在 <code>Field</code> 组件中拿到 <code>value</code> 和 <code>dispatch</code>, 这样就解决了多层传递状态的问题。这样简约的表单用起来很爽，但是随着业务的慢慢复杂，需要的功能也会越来越多，表单中的组件也会越来越多，比如</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Form<span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Field <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">...</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>
</code></pre><p>有可能这样的 <code>Field</code> 组件可能有几十个甚至上百个，然后发现表单变得越来越慢越来越慢，这是为什么呢？因为在 <code>Field</code> 组件中每次执行 <code>dispatch</code> 都会修改顶层的 value, 顶层的 <code>value</code> 发生变化了，这样每一个 <code>Field</code> 组件都会被渲染，只要是使用了 <code>useContext()</code> 这样的组件都会被渲染，这个渲染的量可能非常非常的大，及时一个简单的 <code>Input</code> 修改了其中的一个值，也会造成整个 <code>Form</code> 重新 render, 一两次 render 可能耗时非常少，但是当达到上百个的时候，此时的 <code>render</code> 耗时就会非常非常的高。可能这第一个 <code>Field</code> 中只修改了 <code>a</code> 属性，可是其他的 <code>Field</code> 中都没有用到 <code>a</code> 属性，其余的子组件的渲染是多余的。但是 <code>context</code> 是无法被 <code>bail out</code> 的, 所以所有的 <code>Field</code> 都会渲染，那么不妨控制下 <code>Field</code> 的子组件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext<span class="token punctuation">,</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Field</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> validate<span class="token punctuation">,</span> validateOnChange <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Sub name<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span> validate<span class="token operator">=</span><span class="token punctuation">{</span>validate<span class="token punctuation">}</span> validateOnChange <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> validate<span class="token punctuation">,</span> validateOnchange<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>此时 <code>Field</code> 组件通过使用 <code>useMemo</code> 进行缓存，只有当数组的值发生变化的时候，才会再一次重新 <code>render</code>, <code>useMemo</code> 的作用和 <code>react-redux</code> 的 <code>connect</code> 高阶函数的作用是一样的，通过使用 <code>useMemo</code> 可以把 <code>render 时间长的子组件</code> 进行缓存，减少 <code>render</code> 时间，提升性能。</p><h2 id="optimize-form-">optimize form 😊</h2><p>此时是否已经完成了整个 <code>Form</code> 的优化过程了，此时的 <code>Form</code>, 包括常规使用的 <code>context</code> 通过 <code>memo</code> 进行优化实际上已经提高了很多。但是即使是单纯的一个 <code>Field</code> 组件，如果数量很多的情况下仍然还是会存在卡顿的情况的。特别是当接入了第三方组件库的时候。本身第三方组件提供的功能有很多，组件本身也会很复杂，不像原生的 <code>input</code> 那样简单，假设此时接入的是 <code>antd</code> 的组件库</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> Input <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">CustomInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Field<span class="token operator">></span>
      <span class="token operator">&lt;</span>Input <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Field<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>在对 <code>Input</code> 进行快速输入的时候，可以看到页面的响应会有所延迟，如果打开 <code>chrome</code> 的 <code>performance</code> 进行录制的时候，就会看到一个长任务，关于 <code>长任务</code> 这里不做详细描述，这种可以通过时间分片（time slicing） 来解决这样的问题。但是我们集中在 <code>Field</code> 渲染这块，<code>Input</code> 的改动是非常频繁的，那么顶层的 <code>context</code> 修改的也非常频繁，即使使用了 <code>useMemo</code> 仍然还有卡顿的现象。<code>React 成员 Dan</code> 在 twitter 中说过 <code>context</code> 并不适合修改特别频繁的组件，比如 <code>Input</code>, 但是在 <code>Form</code> 中的确需要 <code>context</code> 来处理这样的问题。那么是否可以解决这样的问题？如何来优化 <code>Form</code>?</p><p>目前所有的数据都是存在了 <code>Form</code> 的顶层，在顶层更新触发子组件的更新，那么针对 <code>Field</code> 这么频繁的渲染，能否做到每次修改当前 <code>Field</code> 的时候，只会渲染当前的 <code>Field</code> 呢？</p><p><code>Form.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> formContext<span class="token punctuation">,</span> formApiContext<span class="token punctuation">,</span> formStateContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useForm <span class="token keyword">from</span> <span class="token string">'./useForm'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用 useForm</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>formState<span class="token punctuation">,</span> formApi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 注册器，用于调用局部更新函数</span>
  <span class="token keyword">const</span> fieldRegister <span class="token operator">=</span> <span class="token function">useRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>formContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>fieldRegister<span class="token punctuation">}</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>formStateContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>formState<span class="token punctuation">}</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>formApiContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>formApi<span class="token punctuation">}</span><span class="token operator">></span>
          <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>formApiContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>formStateContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>formContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>在 <code>Form.js</code> 中首先有三个 <code>context</code> 分别是 <code>formContext</code>, <code>formStateContext</code>, <code>formApiContext</code>。为什么不使用一个 context 呢？因为通过三个 context, 把各自的职能进行区分。多个 context 也能起到优化的作用，比如</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">A</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>formApiContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">B</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>formStateContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>那么每次 <code>formStateContext</code> 的 value 更新的时候，<code>formApiContext</code> 的使用处皆不受影响，<code>A</code> 组件不会因为 <code>B</code> 组件使用的 <code>context</code> 的值的变化而进行更新。这也是为什么使用多个 <code>context</code>。</p><p><code>useForm.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">useForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    values<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    errors<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 设置单个值</span>
  <span class="token keyword">const</span> <span class="token function-variable function">setValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cloneValues <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>values<span class="token punctuation">,</span> name<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> values<span class="token punctuation">:</span> cloneValues <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 设置单个错误信息</span>
  <span class="token keyword">const</span> <span class="token function-variable function">setError</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cloneErrors <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> name<span class="token punctuation">:</span> error <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> errors<span class="token punctuation">:</span> cloneErrors <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 获取单个值</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getValue</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>values<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 获取单个错误</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getError</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>errors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> setValue<span class="token punctuation">,</span> setError <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>在 <code>useForm.js</code> 中声明了一个状态，也可以使用 <code>useReducer</code>, 这里主要为了阐述思想，使用 <code>useState</code>。有两个函数分别是 <code>setValue</code> 和 <code>setError</code>, <code>setValue:</code> 是用来更新修改的值， <code>setError:</code> 用来设置错误的信息。<code>useRegister</code> 这里先暂不讨论，先看一下常规的 <code>Field</code> 组件。</p><p><code>Field.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> useFormApi <span class="token keyword">from</span> <span class="token string">'./useFormApi'</span><span class="token punctuation">;</span>

<span class="token comment">// 假设所有的</span>
<span class="token keyword">const</span> <span class="token function-variable function">Field</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> formApi <span class="token operator">=</span> <span class="token function">useFormApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    formApi<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    value<span class="token punctuation">:</span> formApi<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    error<span class="token punctuation">:</span> formApi<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    handleChange
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>一个简单的 <code>Field</code> 用于修改 <code>form</code> 的值，如何使用？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Field name<span class="token operator">=</span><span class="token string">'name'</span><span class="token operator">></span>
  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value<span class="token punctuation">,</span> handleChange <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Input value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Field<span class="token operator">></span>
</code></pre><p>这就是 <code>Field</code> 的简单用法，但是此时，只要使用 <code>Field</code> 的组件在其中一个 <code>Field</code> 组件发生更新的时候，其他的所有的 <code>Field</code> 组件也会发生更新。因为在每次更新值的时候，调用 <code>setValue</code>, <code>useForm</code> 更新，返回新的值，<code>context</code> 的 value 发生变化，所有用到 <code>context</code> 地方都会发生更新。此时也许会想到每次返回的 <code>formApi</code> 都是一个新的对象好像是没有意义的，是的，这里是没有意义的，这也是之前为什么要使用多个 <code>context</code>, 因为每次都是新的引用这是完全没有意义的，那么是不是应该进行缓存呢？貌似这种想法是可以的，OK，做下去。</p><p><code>Form.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用 useForm</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>formState<span class="token punctuation">,</span> formApi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 注册器，用于调用局部更新函数</span>
  <span class="token keyword">const</span> fieldRegister <span class="token operator">=</span> <span class="token function">useRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 缓存 api</span>
  <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>formApi<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>formContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>fieldRegister<span class="token punctuation">}</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>formStateContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>formState<span class="token punctuation">}</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>formApiContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>api<span class="token punctuation">}</span><span class="token operator">></span>
          <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>formApiContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>formStateContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>formContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>使用 <code>useState</code> 对 <code>formApi</code> 进行缓存，现在每次更新，<code>formApi</code> 都是之前的引用不在是新的引用，每次发生变化的是 <code>formState</code>, 此时修改 <code>Input</code> 的值发现一个问题，就是<code>Input</code> 输入不进去了？为什么呢？</p><p>因为在 <code>Field</code> 组件是使用了 <code>useFormApi</code></p><p><code>useFormApi.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> useContxt <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> formApiContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useFormApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> formApi <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>formApiContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> formApi<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>但是因为在 <code>Form</code> 中对 <code>formApi</code> 进行了缓存，所以使用 <code>useFormApi</code> 的组件都不会重新 <code>render</code>, 所以 <code>Input</code> 中的值会输入不进去。那么是不是需要把在 <code>Field</code> 组件中在使用 <code>useFormState</code> 呢？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> useContxt <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> formStateContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useFormState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> formState <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>formStateContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> formState<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>如何使用 <code>useFormState</code> 的话， 那就没有意义了，因为每一个 <code>Field</code> 都会进行 <code>render</code>, 所以还需要继续使用 <code>useFormApi</code>, 现在考虑一下如何让单个 <code>Field</code> 渲染不影响其他的呢？</p><p>在业务中，写组件的时候，两个组件如何做到互不影响，那就是组件管理自己的状态，比如:</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">A</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>name<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>age<span class="token punctuation">:</span> <span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'lanyincao'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>setName<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>setAge<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>此时 <code>A</code> 组件的状态只在自己的组件的内部，所以本身 <code>A</code> 组件的更新并不会影响到其他的组件的变化。那是否 <code>Field</code> 组件也可以这么做呢？</p><p><code>Field.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useFormApi <span class="token keyword">from</span> <span class="token string">'./useFormApi'</span><span class="token punctuation">;</span>

<span class="token comment">// 假设所有的</span>
<span class="token keyword">const</span> <span class="token function-variable function">Field</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> formApi <span class="token operator">=</span> <span class="token function">useFormApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> register <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>formContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 位置内部值的状态</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>formApi<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    formApi<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    register<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      setValue
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    value<span class="token punctuation">:</span> formApi<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    error<span class="token punctuation">:</span> formApi<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    handleChange
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>此时用过一个 register 把每一个 <code>Field</code> 的 setValue 注册进去，很多其他的高性能的 <code>Form</code> 都是采取 <code>Observer</code> 的形式的，包括 <code>react-redux</code> 如何解决性能问题的，都是通过 <code>Observer</code> 的形式。看下 <code>useRegister</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fields <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">register</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    fields<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">unregister</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    fields<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>fields<span class="token punctuation">,</span> <span class="token punctuation">{</span> register<span class="token punctuation">,</span> unregister <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>把 <code>Form</code> 中的 <code>useRegister</code> 移到 <code>useForm</code> 中, 修改 <code>useForm</code> 的返回值, 以及修改 <code>setValue</code></p><p><code>useForm.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useRegister <span class="token keyword">from</span> <span class="token string">'./register'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">useForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    values<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    errors<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>fields<span class="token punctuation">,</span> fieldsApi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 设置单个值</span>
  <span class="token keyword">const</span> <span class="token function-variable function">setValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cloneValues <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>values<span class="token punctuation">,</span> name<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取到当前修改的 field</span>
    <span class="token keyword">const</span> currentField <span class="token operator">=</span> fields<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> values<span class="token punctuation">:</span> cloneValues <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用内部的 setValue</span>
    currentField<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 设置单个错误信息</span>
  <span class="token keyword">const</span> <span class="token function-variable function">setError</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cloneErrors <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> name<span class="token punctuation">:</span> error <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> errors<span class="token punctuation">:</span> cloneErrors <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 获取单个值</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getValue</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>values<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 获取单个错误</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getError</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>errors<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> setValue<span class="token punctuation">,</span> setError <span class="token punctuation">}</span><span class="token punctuation">,</span> fieldsApi<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p><code>Form.js</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> formContext<span class="token punctuation">,</span> formApiContext<span class="token punctuation">,</span> formStateContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> useForm <span class="token keyword">from</span> <span class="token string">'./useForm'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用 useForm</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>formState<span class="token punctuation">,</span> formApi<span class="token punctuation">,</span> fieldsApi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 缓存 api</span>
  <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>formApi<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>formContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>fieldsApi<span class="token punctuation">}</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>formStateContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>formState<span class="token punctuation">}</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>formApiContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>formApi<span class="token punctuation">}</span><span class="token operator">></span>
          <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>formApiContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>formStateContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>formContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>现在修改其中一个 <code>Field</code> 的时候会调用内部的 <code>setValue</code> 方法，实现局部渲染。</p><h2 id="conclusion">conclusion</h2><ul><li><code>context</code> 比较适合于改动不是很频繁的组件</li><li>对于 render 时间较长的可以使用 <code>useMemo</code> 来优化</li><li>变动频繁的可以采用已有的状态管理库比如 <a href="https://github.com/snakeUni/react-redux-chaos">react-redux-chaos</a> 或者采取 <code>Observer</code> 的形式来处理</li></ul></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to use context efficient]]></title>
            <link>/posts/2019-08-24/how-to-use-context-efficient/</link>
            <guid>/posts/2019-08-24/how-to-use-context-efficient/</guid>
            <pubDate>Fri, 23 Aug 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>如何高效的使用 <code>context</code>, <a href="https://lanyincao.netlify.com/posts/2019-08-19/form/">上一篇文章</a> 详细的讲述了如何写一个 <code>Form</code>, 以及如何改造 <code>Form</code> 的性能。那么是否同样的
写法也可以运用于普通组件呢？</p><h1 id="回顾-context">回顾 context</h1><p><a href="https://lanyincao.netlify.com/posts/2019-08-10/context/">在 context 文章中</a>讲了具体的用法, 同时也讲了 <code>Hook</code> 中和 <code>Class</code> 中使用 <code>Context</code> 的区别。同时也说过在使用 <code>Context</code> 的
一些问题。这样的问题该如何去解决呢？在 <code>Form</code> 中的方案是否可以复用到其他普通的组件中呢？</p><h1 id="react-redux">react-redux</h1><p><a href="https://github.com/reduxjs/react-redux">react-redux</a> 是由 <a href="https://github.com/reduxjs/redux">redux</a> 延伸出来的，用于 react 中的状态管理库，状态管理在 <code>2018</code> 年是非常非常的火，同时
也延伸出了一大批状态管理的库比如 <a href="https://github.com/mobxjs/mobx">mobx</a>, <a href="https://github.com/dvajs/dva">dva</a> 等等都是非常优秀的库。<code>react-redux</code> 在很多项目中都使用了这个库。那么这个库是否存在同样的
问题呢？不妨用一个简单的 demo 来看一下。</p><p><code>react-redux-demo</code></p><p>从 <code>console.log</code> 中可以看出在修改 count 的时候只有 <code>Count</code> 组件更新，在修改 <code>person</code> 的时候只有 <code>Person</code> 组件更新。因为无论是 <code>Count</code> 还是 <code>Person</code>，
都在自己所需要的 <code>props</code> 发生变化的时候才会更新。这个是符合 <code>React</code> 的正常的数据流的，组件的 <code>props</code> 变化会让组件发生更新。</p><p>那么是否 <code>connect</code> 每次都会执行呢？<code>connect</code> 是一个 <code>HOC</code>, 会返回新的组件，那不妨在 <code>mapStateToProps</code> 中加入 <code>console.log</code></p><p><code>mapCountStateToProps</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">mapCountStateToProps</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mapCountStateToProps'</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><code>mapPersonStateToProps</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">mapPersonStateToProps</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mapPersonStateToProps'</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> address <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> address <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><code>Count</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">Count</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render count'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div<span class="token operator">></span>count<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'increase'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>
          increase
        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'decrease'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>
          decrease
        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p><code>Person</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> name<span class="token punctuation">,</span> address <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render person'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div<span class="token operator">></span>
          <span class="token operator">&lt;</span>span<span class="token operator">></span>name<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
          <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginLeft<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>address<span class="token punctuation">:</span> <span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div<span class="token operator">></span>
          <span class="token operator">&lt;</span>button
            onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'updateName'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token string">'牧云云'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
          <span class="token operator">></span>
            updateName
          <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
          <span class="token operator">&lt;</span>button
            onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
              <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'updateAddress'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token string">'hangzhou'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token operator">></span>
            updateAddress
          <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>点击 <code>increase</code> 或者 <code>decrease</code> 按钮，看一下控制台</p><p><img src="https://user-images.githubusercontent.com/17973020/63645933-381e0480-c73b-11e9-891b-f4bf7ba23a84.jpg" alt="context1"/></p><p>仔细观察下发现 <code>render count</code> 是正常的渲染，因为点击了 <code>increase</code> 或者 <code>decrease</code>, 但是 <code>mapCountStateToProps</code> 以及
<code>mapPersonStateToProps</code> 每次都会被输出，即使只更新了 <code>count</code> 组件的 <code>props</code>, 其实这个大家不同太过于关心，我之前在 <code>twitter</code> 上
问过 <code>Dan</code>, 关于渲染次数的问题， <code>Dan</code> 的回答就是不要太过在意 <code>render</code> 次数这是内部的实现细节了。那这个地方会有影响吗？</p><p><code>connect</code> 只是一个普通的高阶组件，不妨看一下 <code>connect</code> 的源码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createConnect</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
  connectHOC <span class="token operator">=</span> connectAdvanced<span class="token punctuation">,</span>
  mapStateToPropsFactories <span class="token operator">=</span> defaultMapStateToPropsFactories<span class="token punctuation">,</span>
  mapDispatchToPropsFactories <span class="token operator">=</span> defaultMapDispatchToPropsFactories<span class="token punctuation">,</span>
  mergePropsFactories <span class="token operator">=</span> defaultMergePropsFactories<span class="token punctuation">,</span>
  selectorFactory <span class="token operator">=</span> defaultSelectorFactory
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span>
    <span class="token parameter">mapStateToProps<span class="token punctuation">,</span>
    mapDispatchToProps<span class="token punctuation">,</span>
    mergeProps<span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      pure <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      areStatesEqual <span class="token operator">=</span> strictEqual<span class="token punctuation">,</span>
      areOwnPropsEqual <span class="token operator">=</span> shallowEqual<span class="token punctuation">,</span>
      areStatePropsEqual <span class="token operator">=</span> shallowEqual<span class="token punctuation">,</span>
      areMergedPropsEqual <span class="token operator">=</span> shallowEqual<span class="token punctuation">,</span>
      <span class="token operator">...</span>extraOptions
    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> initMapStateToProps <span class="token operator">=</span> <span class="token function">match</span><span class="token punctuation">(</span>
      mapStateToProps<span class="token punctuation">,</span>
      mapStateToPropsFactories<span class="token punctuation">,</span>
      <span class="token string">'mapStateToProps'</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> initMapDispatchToProps <span class="token operator">=</span> <span class="token function">match</span><span class="token punctuation">(</span>
      mapDispatchToProps<span class="token punctuation">,</span>
      mapDispatchToPropsFactories<span class="token punctuation">,</span>
      <span class="token string">'mapDispatchToProps'</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> initMergeProps <span class="token operator">=</span> <span class="token function">match</span><span class="token punctuation">(</span>mergeProps<span class="token punctuation">,</span> mergePropsFactories<span class="token punctuation">,</span> <span class="token string">'mergeProps'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">connectHOC</span><span class="token punctuation">(</span>selectorFactory<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// used in error messages</span>
      methodName<span class="token punctuation">:</span> <span class="token string">'connect'</span><span class="token punctuation">,</span>

      <span class="token comment">// used to compute Connect's displayName from the wrapped component's displayName.</span>
      <span class="token function-variable function">getDisplayName</span><span class="token punctuation">:</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Connect(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>

      <span class="token comment">// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes</span>
      shouldHandleStateChanges<span class="token punctuation">:</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">,</span>

      <span class="token comment">// passed through to selectorFactory</span>
      initMapStateToProps<span class="token punctuation">,</span>
      initMapDispatchToProps<span class="token punctuation">,</span>
      initMergeProps<span class="token punctuation">,</span>
      pure<span class="token punctuation">,</span>
      areStatesEqual<span class="token punctuation">,</span>
      areOwnPropsEqual<span class="token punctuation">,</span>
      areStatePropsEqual<span class="token punctuation">,</span>
      areMergedPropsEqual<span class="token punctuation">,</span>

      <span class="token comment">// any extra options args can override defaults of connect or connectAdvanced</span>
      <span class="token operator">...</span>extraOptions
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><code>connect</code> 本身不会有一些复杂的计算，所以即使每次都执行是没有影响的。</p><p><code>有可能你特别在意 render 的次数，可能就是不想 connect 每次都要执行，就是有这样的强迫症，那么应该如何去修改这个呢？</code></p><hr/><h1 id="从零实现一个状态管理">从零实现一个状态管理</h1><p>在开始这个部分之前，首先要比较熟悉 <code>redux</code>, 因为这部分很多代码都是继续沿用 <code>redux</code> 中的代码。</p><p>一步一步的来，首先对于状态管理，应该需要一个 <code>Provider</code>, 不妨来实现这个 <code>Provider</code>, Provider 还是使用 <code>React</code> 的 <code>context api</code>,
这个实现是使用了 <code>TS</code>, 如果对 <code>TS</code> 不熟悉的可以查看<a href="https://www.typescriptlang.org/">官网</a></p><p><code>Provider</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> storeContext<span class="token punctuation">,</span> selectorContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./context'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ProviderProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./type'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token operator">=</span> React<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> Provider<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">:</span> ProviderProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 缓存 value 的值进行局部更新</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>api<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>storeContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>selectorContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>api<span class="token punctuation">}</span><span class="token operator">></span>
        <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>selectorContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>storeContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>在 <code>Provider</code> 中使用了两个 <code>context</code>, 为什么要使用两个一模一样的呢？后面会详细解释, 在看一下 <code>context</code> 的声明</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UseStoreResult <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./type'</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> storeContext <span class="token operator">=</span> React<span class="token punctuation">.</span>createContext<span class="token operator">&lt;</span>UseStoreResult<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>

<span class="token comment">/**
 * selectorContext 用户获取值并且可以和 dispatch 相应的值 这个可以进行缓存所以真正存储只的地方是 storeContext
 */</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> selectorContext <span class="token operator">=</span> React<span class="token punctuation">.</span>createContext<span class="token operator">&lt;</span>UseStoreResult<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>
</code></pre><p>这些类型的地方为了方便快速直接用 <code>any</code> 来代替, 可以看出，在 <code>context</code> 中声明了两个 <code>context</code>, 在 <code>Provider</code> 中使用了
这两个 <code>context</code>。</p><p>因为整个部分都是采用 <code>Hooks</code> 的方式来开发的，所以不再命名为 <code>createStore</code> 所以采用 <code>useStore</code>。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> useStore<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">></span><span class="token punctuation">(</span>
  reducer<span class="token punctuation">:</span> ReducerType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>
  initialState<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>
  enhancer<span class="token operator">?</span><span class="token punctuation">:</span> any
<span class="token punctuation">)</span><span class="token punctuation">:</span> UseStoreResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token keyword">get</span><span class="token punctuation">,</span> <span class="token keyword">set</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useCurrent</span><span class="token punctuation">(</span>initialState <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> listeners <span class="token operator">=</span> useRef<span class="token operator">&lt;</span>Listener<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// 继续使用 redux 中的中间件</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token keyword">typeof</span> initialState <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> enhancer <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token punctuation">(</span><span class="token keyword">typeof</span> enhancer <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> arguments<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
      <span class="token string">'It looks like you are passing several store enhancers to '</span> <span class="token operator">+</span>
        <span class="token string">'useStore(). This is not supported. Instead, compose them '</span> <span class="token operator">+</span>
        <span class="token string">'together to a single function.'</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> initialState <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> enhancer <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    enhancer <span class="token operator">=</span> initialState
    initialState <span class="token operator">=</span> <span class="token keyword">undefined</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> enhancer <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> enhancer <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Expected the enhancer to be a function.'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">enhancer</span><span class="token punctuation">(</span>useStore<span class="token punctuation">)</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 返回 store 存的所有的 state
   */</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token constant">T</span>

  <span class="token comment">/**
   * 监听器用于更新子组件
   * @param listener
   */</span>
  <span class="token keyword">const</span> <span class="token function-variable function">subscriber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">listener<span class="token punctuation">:</span> Listener</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> listener <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'expected listener to be a object'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 加入到监听器中</span>
    listeners<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>
      listeners<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * 用于修改值, 用于中间件的时候可以不传第二个值，但是在 selector 中仍然需要
   * @param action
   * @param deps 可能不存在，如果不存在则全部更新
   */</span>
  <span class="token keyword">const</span> <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">:</span> Action<span class="token punctuation">,</span> deps<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldState <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 获取到执行后的 state</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>oldState <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span>
    <span class="token keyword">set</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>

    <span class="token keyword">const</span> changeKeys<span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token comment">// 进行浅比较获取到修改的值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      deps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token function">getPath</span><span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
        <span class="token keyword">const</span> newValue <span class="token operator">=</span> <span class="token function">getPath</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          changeKeys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 遍历监听器，只对变化的组件进行更新</span>
    listeners<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">listener</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> listenerProps <span class="token operator">=</span> listener<span class="token punctuation">.</span>props
      <span class="token comment">// 如果依赖存在则更新依赖中的选项，如果不存在则更新全部</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历监听器，对修改的部分进行更新</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> changeKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>listenerProps<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>changeKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            listener<span class="token punctuation">.</span><span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        listener<span class="token punctuation">.</span><span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> action
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    getState<span class="token punctuation">:</span> getState<span class="token punctuation">,</span>
    subscriber<span class="token punctuation">:</span> subscriber<span class="token punctuation">,</span>
    dispatch<span class="token punctuation">:</span> dispatch
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p><code>useStore</code> 前面的部分和 <code>redux</code> 中的代码完全一样，所以这个地方暂时可以不看, <code>subscriber</code> 部分也基本没有什么变化，但是
还是要看一下 <code>listener</code> 的参数是什么样子的。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">subscriber</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">listener<span class="token punctuation">:</span> Listener</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> listener <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'expected listener to be a object'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 加入到监听器中</span>
  listeners<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>
    listeners<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Listener</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">listener</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> any
  props<span class="token punctuation">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><p>可以看定义的接口，<code>subscriber</code> 的参数是一个对象，对象中包括 <code>listener</code> 函数和一个 <code>props</code>, 具体用法这两个是干什么用的, 后面会讲到</p><p>在看 <code>dispatch</code> 这个函数， <code>dispatch</code> 是主体的部分， <code>dispatch</code> 接受了两个参数，第一个参数是 <code>action</code> 第二个参数是一个 <code>deps</code> 依赖数组
那么这里为什么需要这样的一个依赖项呢？在看下 <code>useSelector</code></p><p><code>useSelector</code> 是最最最主要的部分，也是最关键的部分，在业务代码中，只需要使用 <code>useSelector</code> 就能实现<code>局部渲染</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> useSelector<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span>
  <span class="token function-variable function">callback</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">:</span> UseSelectorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>selectorContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> forceUpdate <span class="token operator">=</span> <span class="token function">useForceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>api<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'expected useSelector to be used in Provider'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> propsRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取到返回的 props</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSame</span><span class="token punctuation">(</span>propsRef<span class="token punctuation">.</span>current<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    propsRef<span class="token punctuation">.</span>current <span class="token operator">=</span> props<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> current <span class="token operator">=</span> propsRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// 订阅需要的信息</span>
    api<span class="token punctuation">.</span><span class="token function">subscriber</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token function-variable function">listener</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      props<span class="token punctuation">:</span> current
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>api<span class="token punctuation">,</span> forceUpdate<span class="token punctuation">,</span> current<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">dispatch</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">:</span> Action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      api<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> action<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    getState<span class="token punctuation">:</span> api<span class="token punctuation">.</span>getState
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><code>useSelector</code> 使用了 <code>selectorContext</code>，而不是 <code>storeContext</code>, 为什么？因为只要 <code>store</code> 发生变化，那么 <code>storeContext</code> 必然会
重新 <code>render</code>, <code>storeContext</code> 重新 <code>render</code>, 使用 <code>storeContext</code> 的地方都会重新 <code>render</code>, 那么为什么 <code>selectorContext</code> 不会呢？
在会有看下 <code>Provider</code> 的代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> Provider<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">:</span> ProviderProps<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 缓存 value 的值进行局部更新</span>
<span class="token operator">></span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>api<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> 🤔

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>storeContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>selectorContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>api<span class="token punctuation">}</span><span class="token operator">></span>
        <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>selectorContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>storeContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>箭头所指的这个部分就是关键所在 <code>const [api] = useState(value)</code> 通过这样，把 <code>value</code> 进行缓存了，这样即使每次 <code>render</code>,
此时的 <code>api</code> 都是相同的。也就不会造成使用 <code>selectorContext</code> 的地方的就会更新。</p><p>那么如果 <code>useSelector</code> 不更新那在业务代码中使用 <code>useSelector()</code> 不也不更新了吗？这样就会造成 bug 的产生，这是万万不允许的。
所以在 <code>useSelector</code> 内部使用了 <code>useForceUpdate</code>。</p><p><code>useForceUpdate</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">forceReducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">:</span> boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">!</span>state<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * forceUpdate
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useForceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">useReducer</span><span class="token punctuation">(</span>forceReducer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>现在可以看到在 <code>useSelector</code> 内部的 <code>useEffect</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> propsRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取到返回的 props</span>
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSame</span><span class="token punctuation">(</span>propsRef<span class="token punctuation">.</span>current<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  propsRef<span class="token punctuation">.</span>current <span class="token operator">=</span> props<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> current <span class="token operator">=</span> propsRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>

<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// 订阅需要的信息</span>
  api<span class="token punctuation">.</span><span class="token function">subscriber</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">listener</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    props<span class="token punctuation">:</span> current
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>api<span class="token punctuation">,</span> forceUpdate<span class="token punctuation">,</span> current<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>只有在 <code>current</code> 变化的时候会再一次重新注册 <code>listener</code>, 这个 <code>current</code> 通过调用 <code>callback(api.getState())</code> 所得，
也就是只有在 <code>useSelector</code> 的依赖发生变化的时候才会重新注册。在业务里可以这样使用 <code>useSelector(() =&gt; [&#x27;a&#x27;, &#x27;b&#x27;])</code> 这里的
<code>a</code> 和 <code>b</code> 都是使用 <code>useSelector</code> 组件里需要使用到的值。把使用的值作为依赖，只要使用的值发生改变的时候，才会进行 <code>render</code>。</p><p>在看下 <code>useSelector</code> 的返回值</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">return</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">dispatch</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">:</span> Action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    api<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> action<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  getState<span class="token punctuation">:</span> api<span class="token punctuation">.</span>getState
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>此时的返回值接管了 <code>store</code> 中的 <code>dispatch</code> 函数, dispatch 的第二个参数也是 <code>useSelector</code> 的依赖项，所以在每次执行 <code>dispatch</code> 的时候都会
执行 <code>selector</code> 的 <code>dispatch</code>， 然后调用 <code>store</code> 中的 <code>dispatch</code> 。在回头看下 <code>store</code> 中的 <code>dispatch</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">/**
 * 用于修改值, 用于中间件的时候可以不传第二个值，但是在 selector 中仍然需要
 * @param action
 * @param deps 可能不存在，如果不存在则全部更新
 */</span>
<span class="token keyword">const</span> <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">:</span> Action<span class="token punctuation">,</span> deps<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> oldState <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 获取到执行后的 state</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>oldState <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span>
  <span class="token keyword">set</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>

  <span class="token keyword">const</span> changeKeys<span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token comment">// 进行浅比较获取到修改的值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    deps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token function">getPath</span><span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token keyword">const</span> newValue <span class="token operator">=</span> <span class="token function">getPath</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        changeKeys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 遍历监听器，只对变化的组件进行更新</span>
  listeners<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">listener</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> listenerProps <span class="token operator">=</span> listener<span class="token punctuation">.</span>props
    <span class="token comment">// 如果依赖存在则更新依赖中的选项，如果不存在则更新全部</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 遍历监听器，对修改的部分进行更新</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> changeKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>listenerProps<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>changeKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          listener<span class="token punctuation">.</span><span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      listener<span class="token punctuation">.</span><span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> action
<span class="token punctuation">}</span>
</code></pre><p>首先根据 <code>deps</code> 找出哪些是修改的值，因为一个组件有可能会有许多依赖项，但是在这个组件中只修改了使用的 <code>a</code>, <code>b</code> 没有改变， 那么其他组件依赖了这个 <code>b</code> 也
不应该更新，所以需要找出改变的依赖项</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  deps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token function">getPath</span><span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> newValue <span class="token operator">=</span> <span class="token function">getPath</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      changeKeys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>找出改变的依赖项后，对 <code>listeners</code> 进行遍历, 找出所有使用了 <code>useSelector</code> 的地方的所有依赖，看是否存在其他的依赖项也包括这次改变的依赖项，比如此时更改了
<code>a</code>, 那么所有其他组件中有对 <code>a</code> 的依赖项的都应该进行重新 <code>render</code>。这也是 <code>store</code> 中 <code>dispatch</code> 的主要逻辑。</p><p>基本上一个状态管理的所有代码已经讲清楚了，那么不妨试试。</p><p>点击 <code>increase</code> 或者 <code>decrease</code>, 只打印出了 <code>render count selector</code> 所以每次 <code>useSelector</code> 也只是单次渲染。这个也是局部渲染了。</p><p><img src="https://user-images.githubusercontent.com/17973020/63645935-4c620180-c73b-11e9-8536-122dfed705a7.jpg" alt="context2"/></p><p>最后贴一下代码，代码也可以在<a href="https://github.com/snakeUni/lanyincaos.cn/tree/master/src/pages/posts/2019-08-24-how-to-use-context-efficient">这里找到</a></p><p><code>react-redux-demo</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span>

<span class="token comment">// 一个简单的 reducer</span>
<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">'increase'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">case</span> <span class="token string">'decrease'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">case</span> <span class="token string">'updateName'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> name<span class="token punctuation">:</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">case</span> <span class="token string">'updateAddress'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> address<span class="token punctuation">:</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  name<span class="token punctuation">:</span> <span class="token string">'lanyincao'</span><span class="token punctuation">,</span>
  address<span class="token punctuation">:</span> <span class="token string">'shanghai'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">mapCountStateToProps</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mapCountStateToProps'</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Count</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render count'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div<span class="token operator">></span>count<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'increase'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>
          increase
        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'decrease'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>
          decrease
        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">mapPersonStateToProps</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mapPersonStateToProps'</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> address <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> address <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> name<span class="token punctuation">,</span> address <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render person'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div<span class="token operator">></span>
          <span class="token operator">&lt;</span>span<span class="token operator">></span>name<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
          <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginLeft<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>address<span class="token punctuation">:</span> <span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div<span class="token operator">></span>
          <span class="token operator">&lt;</span>button
            onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'updateName'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token string">'牧云云'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
          <span class="token operator">></span>
            updateName
          <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
          <span class="token operator">&lt;</span>button
            onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
              <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'updateAddress'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token string">'hangzhou'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token operator">></span>
            updateAddress
          <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// count</span>
<span class="token keyword">const</span> ConnectCount <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapCountStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// person</span>
<span class="token keyword">const</span> ConnectPerson <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapPersonStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>App<span class="token operator">></span>
        <span class="token operator">&lt;</span>ConnectCount <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>ConnectPerson <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><code>react-redux-chaos demo</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useStore<span class="token punctuation">,</span> Provider<span class="token punctuation">,</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux-chaos'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'lanyincao'</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">'shanghai'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">'increase'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">case</span> <span class="token string">'decrease'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">case</span> <span class="token string">'updateName'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> name<span class="token punctuation">:</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">case</span> <span class="token string">'updateAddress'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> address<span class="token punctuation">:</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> getState<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render count selector'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> state<span class="token punctuation">:</span> any <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>count<span class="token punctuation">:</span> <span class="token punctuation">{</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'increase'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>
        increase
      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'decrease'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>
        decrease
      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> getState<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render person selector'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> state<span class="token punctuation">:</span> any <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>span<span class="token operator">></span>name<span class="token punctuation">:</span> <span class="token punctuation">{</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
        <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginLeft<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>address<span class="token punctuation">:</span> <span class="token punctuation">{</span>state<span class="token punctuation">.</span>address<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>button
          onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'updateName'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token string">'牧云云'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">></span>
          updateName
        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>button
          onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
            <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'updateAddress'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token string">'hangzhou'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token operator">></span>
          updateAddress
        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>App<span class="token operator">></span>
      <span class="token operator">&lt;</span>Count <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>Person <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h1 id="conclusion">conclusion</h1><p><code>context</code> 用法很简单，当想要业务逻辑分离的时候可以尝试使用多个 <code>context</code> 能做到减少更新的作用。也可以使用 <code>useMemo</code> 等相关的 <code>api</code>,
比较在乎 <code>render</code> 次数的话，可以采用 <code>react-redux</code> 一些成熟的库，或者 <a href="https://github.com/snakeUni/react-redux-chaos">react-redux-chaos</a></p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to write test]]></title>
            <link>/posts/2019-08-30/how-to-write-test/</link>
            <guid>/posts/2019-08-30/how-to-write-test/</guid>
            <pubDate>Thu, 29 Aug 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>测试有可能很多人都认为是这是测试人员应该做的事情，但是很多时候开发也需要来写测试，
很久以前可能被大家所知道的就是 <a href="https://zh.wikipedia.org/wiki/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95">黑盒测试</a>
和 <a href="https://zh.wikipedia.org/wiki/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95">白盒测试</a>， 一般开发在测试自己的代码的时候都是
白盒测试，因为白盒测试是知道内部代码的逻辑的。相当于是完全透明的。</p><h2 id="测试是否有必要">测试是否有必要</h2><p>很多开发可能不会去主动写测试，不写测试的原因可能会有很多。但是无非以下几个</p><ul><li>不知道测试是什么</li><li>知道部分测试，但是不会写</li><li>忙于业务，根本没时间去写</li><li>代码完美，毫无破绽，完全不需要去写</li></ul><p>那么是否需要些测试呢？测试的作用是让你对你的代码有信心，可以及时的发现内部的问题，然后及时修复，避免发到线上的时候会出现线上问题，
那么应该如何写测试呢？</p><h2 id="what-are-you-testing">what are you testing?</h2><p>在开始写一个测试的时候，需要问自己一个问题，需要测试什么？首先对理解想要测试的什么，才可以真正的开始写测试，比如一个 <code>sum</code> 函数</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>这是一个求和函数，假如此时准备开始写测试了，所以确认需要测试的就是 <code>sum</code> 这个函数, 知道这个函数的功能就是求和，所以第一步就是 <code>确认需要测试的是什么</code></p><h2 id="what-should-it-do">What should it do?</h2><p>测试的这个做了什么，还是以求和函数为例，求和函数做的就是求和，并且知道调用求和函数 <code>sum(1,2)</code> 应该返回数字 <code>3</code>, 只有知道测试什么以及，测试的这个做了
什么才能很多的写出测试的描述信息</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'sum(1, 2) should return 3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="what-is-the-output">what is the Output</h2><p>输入是什么，在写一个测试的时候需要知道两个输入，第一个是实际的输出，比如 <code>sum(1, 2)</code>, 在调用 <code>sum(1, 2)</code> 的时候应该返回 <code>3</code>, 这个数字 <code>3</code> 就是实际的输出。
第二个是期望的输出，这通常是一个断言，比如 <code>sum(2, 2)</code> 实际输出是 <code>4</code>, 但是期望输出 <code>5</code>, 那么是否是代码内部逻辑的错误呢？这发生错误的时候，就需要去查看是否
是内部逻辑导致的原因。</p><h2 id="how-to-write-test">How to write test</h2><p>在写测试开始之前，上面三个问题是首先要考虑的，还是以 <code>sum</code> 函数为例，想要测试 <code>sum</code> 函数，首先就是需要测试正常的情况，比如都是数字的时候，现在开始写一个基本的测试</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'这里是描述信息，写的是测试了什么，以及期望返回是什么'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里是一个回调，主要写测试的代码 比如</span>
  <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 接下来开始写断言，total 期望的值是 2, 所以可以写, 这里使用的都是 jest</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>通过这样一个基础的测试就可以完成了。这是对于<code>工具函数</code>的基本测试，那么对于 <code>react component</code> 以及自定义的 <code>react hook</code> 应该如何测试呢？</p><h2 id="test-react-component">test react component</h2><p>不妨写一个基础的 <code>Count</code> 组件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>span<span class="token operator">></span>count<span class="token punctuation">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>increase<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>decrease<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>这是一个 <code>Count</code> 基础组件, 这个组件包含了两个功能，首先是 <code>increase</code> 增加 <code>count</code>, 还有一个是 <code>decrease</code> 减少 <code>count</code>, 那么对于
这个组件需要测试什么呢？针对这个组件，需要测试的就是 <code>increase</code> 和 <code>decrease</code>, 首先要保证这两个按钮的功能是正常的，否则要用户使用的时候
很可能就会存在 <code>bug</code> 导致白屏。</p><p><code>后面使用的测试库都是 @testing/react-library</code></p><p>现在开始写这个测试，首先按照文章开头说的，需要测试的是什么，需要测试的是 <code>Count</code> 组件，那么需要测试 <code>Count</code> 组件的什么？需要测试的是 <code>Count</code>
组件的 <code>increase</code> 和 <code>decrease</code> 功能。现在知道测试的是什么了，那么接下来这个组件的行为是什么？点击 <code>increase</code> 期望 <code>count</code> 是增加了 <code>1</code>,
点击 <code>decrease</code>, 期望 <code>count</code> 是减少了 <code>1</code>。那么现在所有情况都知道了，不妨开始写这个测试。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> fireEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@testing/react-library'</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'expect count increase 1 by trigger increase'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// render 方法是 @testing/react-library 内置的方法</span>
  <span class="token comment">// getByText 是通过文本来查找对应的 dom 节点</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> getByText <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Count <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 找到 increase 的 dom 节点, getByText 支持正则表达式</span>
  <span class="token keyword">const</span> increaseNode <span class="token operator">=</span> <span class="token function">getByText</span><span class="token punctuation">(</span><span class="token regex">/increase/i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 触发点击效果</span>
  fireEvent<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>increaseNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 这个的断言是很重要的, 在 Count 组件中有个 &lt;span>count: {count}&lt;/span></span>
  <span class="token comment">// 所以点击按钮后，这里的 `count` 变为了 2, 只需要查找这个 2 是否存在</span>
  <span class="token comment">// toBeNull 都是 jest 中的方法</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token regex">/count: 2/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>increase</code> 的测试是完全通过的，那么 <code>decrease</code> 也是一样的。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> fireEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@testing/react-library'</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'expect count decrease 1 by trigger decrease'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// render 方法是 @testing/react-library 内置的方法</span>
  <span class="token comment">// getByText 是通过文本来查找对应的 dom 节点</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> getByText <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Count <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 找到 increase 的 dom 节点, getByText 支持正则表达式</span>
  <span class="token keyword">const</span> decreaseNode <span class="token operator">=</span> <span class="token function">getByText</span><span class="token punctuation">(</span><span class="token regex">/decrease/i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 触发点击效果</span>
  fireEvent<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>decreaseNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 这个的断言是很重要的, 在 Count 组件中有个 &lt;span>count: {count}&lt;/span></span>
  <span class="token comment">// 所以点击按钮后，这里的 `count` 变为了 -1, 只需要查找这个 -1 是否存在</span>
  <span class="token comment">// toBeNull 都是 jest 中的方法</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">getByText</span><span class="token punctuation">(</span><span class="token regex">/count: -1/i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>这就是一个基础的组件的测试。那么如果是自定义的 <code>Hook</code> 呢?</p><h2 id="test-custom-hook">test custom hook</h2><p>自定义的 <code>Hook</code> 通常返回的并不是 <code>ReactNode</code>, 而是一些值或者说是函数之类的。那么不妨将上面的 <code>Count</code> 组件修改成一个
自定义的 <code>Count</code> hook。</p><p>首先确认这个自定义的 <code>Hook</code>, 有 <code>increase</code> 和 <code>decrease</code> 功能，以及应该返回 <code>count</code> 变量。那么开始写这个自定义的 <code>Hook</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">increase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">decrease</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> <span class="token punctuation">{</span> increase<span class="token punctuation">,</span> decrease <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>针对这个应该如何测试呢？这个就是一个普通的函数，但是又不能当做普通函数来测试。这里也<a href="https://github.com/testing-library/react-hooks-testing-library/issues">使用一个库</a>，这个库本身很简单，就是封装了 <code>react</code> 提供的测试工具。</p><p>开始这个测试</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span> renderHook<span class="token punctuation">,</span> act <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-hooks-testing-library'</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'use count'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> result <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">renderHook</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 拿到返回的结果, result 包含一个 current, 其中 current 指向返回值</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>current<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 调用 increase</span>
  <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span>current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>current<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 调用 decrease, 因为之前已经变为 1 了</span>
  <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span>current<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>current<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="conclusion">conclusion</h2><p>在写一个测试的时候首先需要明确测试的是什么？知道测试的是什么后，需要知道测试的这个做了什么？然后输出是什么？期望输入是什么？当知道了这些之后
再去写测试，就会很简单。</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Rules of React]]></title>
            <link>/posts/2019-09-06/the-rule-of-react/</link>
            <guid>/posts/2019-09-06/the-rule-of-react/</guid>
            <pubDate>Thu, 05 Sep 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>所有的库都会有一些微妙的规则，您必须遵循这些规则才能很好的工作。通常，有些规则是隐式的，没有文档的，您必须边走边学习。</p><p>比如在使用 React Hook 的时候，必须要遵守 <code>Hook</code> 的规则，在使用 Vue 的时候必须要遵守 Vue 的使用规则。 这里主要谈一下 <code>React</code> 的一些隐式规则</p><h2 id="what-functions-are-pure">What Functions Are “Pure”?</h2><p><a href="https://en.wikipedia.org/wiki/Pure_function">Pure function</a> 在维基百科中主要有两点的解释</p><ul><li>Its return value is the same for the same arguments (no variation with local static variables, non-local variables, mutable reference arguments or input streams from I/O devices).
<code>相同的输入总是有相同的输出</code></li><li>Its evaluation has no side effects (no mutation of local static variables, non-local variables, mutable reference arguments or I/O streams).
<code>没有副作用，比如 IO 的写操作</code></li></ul><p>那么在 <code>React</code> 中有哪些方法被认识是 “pure” 的</p><p>在 <code>class</code> 中通常 <code>constructor</code>, <code>getDerivedStateFromProps</code>, <code>shouldComponentUpdate</code> and <code>render</code> 被认为是纯的.</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// pure</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// pure</span>
  <span class="token punctuation">}</span>

  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// pure</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// pure</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p><code>componentDidMount</code>, <code>componentDidUpdate</code>, <code>componentWillUnmount</code> 和自定义的事件函数并不被要求是纯的。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// not pure</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// not pure</span>
  <span class="token punctuation">}</span>
  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// not pure</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// not pure</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// pure</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p><code>setState</code> 的第一个参数要求必须是纯的</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// pure</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>但是第二个参数并不要求是纯的</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// not pure</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>函数式组件也是纯的</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// pure</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="getter-in-state">Getter in State</h3><p><code>setState</code> 还有一个特定的限制。传递给 <code>setState</code> 或者第一个参数为函数时返回的对象不能包含违反上述任何规则的 <code>getter</code> 方法，因为它们也是纯函数的一部分。</p><h2 id="what-does-pure-mean-in-react">What Does “Pure” Mean in React?</h2><p>在 <code>React</code> 中，纯函数通常意味着是<a href="https://zh.wikipedia.org/wiki/%E5%86%AA%E7%AD%89">幂等</a>的</p><h3 id="forbidden">Forbidden</h3><hr/><p>通常来说这意味着在这些函数中，你不能：</p><ul><li>修改变量的绑定，除非该绑定是<code>新创建的</code>, 因为如果是新创建的那么每次在调用这个函数的时候都会新创建这个绑定，那么即使内部修改也是没问题的</li><li>修改对象上的属性，除非该对象是<code>新创建的</code></li></ul><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// pure</span>
  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  b<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>在 <code>a</code> 中， <code>b</code> 是新创建的对象，所以可以修改对象上的属性。因为每次调用的时候都会重复这个操作</p><ul><li>修改 <code>this</code> 上的属性，除非是在构造函数中</li></ul><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>虽然每次 <code>b</code> 都被赋值为 1，但是在其他函数中用到了这个 <code>b</code> 的时候就被修改了</p><ul><li>从对象中读取属性，除非该对象是<code>新创建的</code>， 或者属性在读取一次后不会更改</li></ul><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// not pure</span>
  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
  <span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// pure</span>
  v<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>在 <code>a</code> 中读取了 this 上的 a, 但是这个 a 如果在其他地方被改变了就是不行的。</p><ul><li>读取变量绑定，除非该对象是<code>新创建的</code>, 或者绑定在读取一次之后不再更改。</li><li>调用 <code>Math.random()</code> 或者 <code>Date.now()</code>, 因为这样读取的值是可变的。</li><li>调用 <code>setState</code>, 因为它会突变</li><li>发起网络请求(POST)、文件系统或其他 I/O, 将其写入持久性存储。比如，日志、创建、更新或删除。</li><li>创建一个新的组件类型。新的组件会被使用后面的 <code>JSX</code> 中。</li></ul><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">C</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>这样每次 <code>render</code> 都会创建一个新的 <code>C</code></p><ul><li>调用另一个可能执行以上任何操作的函数。</li></ul><p><code>新创建的</code>意味着每次调用该函数，都会重复这一步骤。</p><h3 id="allowed">Allowed</h3><p>虽然有一些可能不认为是纯的，但是在 <code>React</code> 中那是 ok 的</p><ul><li>读取 <code>this.props</code> 或者 <code>this.state</code> 在类组件中的是完全可以的，虽然它们会改变</li><li>抛出错误或者任何其他对象也是可以的</li><li>只要对象是<code>新创建的</code>, 就可以修改对象</li><li>只要绑定是<code>新创建的</code>, 就可以修改绑定</li><li>你可以调用一个函数来修改传入的对象，只要该对象是<code>新创建的</code></li><li>在构造函数中修改属性是可以的，因为它们是在类构造函数中<code>新创建的</code></li><li>创建非纯函数是可以的，只要它们后面在纯函数之外调用</li><li>发出网络请求(GET), 从文件系统或其他 I/O 中读取数据是可以的</li></ul><h3 id="lazy-initialization">Lazy Initialization</h3><p>在这些规则中有一个例外就是，如果一个值用于延迟初始化，则可以读取和修改它。意思就是，如果值没有被初始化则初始化，如果初始化了则进行缓存并直接读取值。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">var</span> lazy<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">lazy</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> lazy<span class="token punctuation">;</span> <span class="token comment">// ok</span>
<span class="token punctuation">}</span>
</code></pre><p>这也可以用于多个值，只要 key 是唯一就好</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="mutating-objects-created-by-render">Mutating Objects Created by Render</h2><p>另外一个限制是，在渲染完成后，您不能修改在这些函数中创建的对象或闭包绑定。它们是隐式冻结的。例外情况是存储在状态对象中的可变对象。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">{</span> active<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token function-variable function">clickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    x<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// not ok</span>
    y<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// not ok</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span>clickHandler<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span> mutableBox<span class="token punctuation">:</span> <span class="token punctuation">{</span> active<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function-variable function">clickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>mutableBox<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// ok, but discouraged</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>mutableBox<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// ok, but discouraged</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickHandler<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A little About React]]></title>
            <link>/posts/2019-09-19/a-little-react/</link>
            <guid>/posts/2019-09-19/a-little-react/</guid>
            <pubDate>Wed, 18 Sep 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>本来是不打算写这篇文章的，但是最近正好遇到了一些问题，或者说是组内遇到了一些问题，就顺便写这篇文章</p><h2 id="目录">目录</h2><ul><li>React Virtual Dom Terminology</li><li>useLayoutEffect and useEffect</li></ul><h2 id="react-virtual-dom-terminology">React Virtual Dom Terminology</h2><p>在 React 中有几个类型需要区分清楚，在同 <code>TS</code> 写的时候也会经常遇到这几种类型</p><ul><li>ReactElement / ReactElement Factory</li><li>ReactNode</li><li>ReactComponent / ReactComponent Class</li></ul><h3 id="react-elements">React Elements</h3><p>在 React 中原始类型就是 ReactElement，ReactElement 有四个属性分别为 <code>type</code>, <code>props</code>, <code>key</code>, <code>ref</code>. 后续 key 有可能会从 props 中
进行剥离. 并且也不存在方法和其他的任何东西在 <code>prototype</code> 上.</p><p>在 React 中可以通过调用 React.createElement 来创建</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> root <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>为了渲染到 DOM 中，需要把创建的 <code>ReactElement</code> 传递给 <code>React.render</code> 并且第二个参数是正常的 DOM 元素比如 <code>HTMLElement</code>, <code>ReactElement</code> 是一个
无状态的，不可突变的，虚拟的 dom element。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="">React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>如果需要传递额外的属性，在 React.createElement 的第二个参数传递提个对象，第三个参数是一个 child</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> child <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> className<span class="token punctuation">:</span> <span class="token string">'my-root'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>如果使用 <code>JSX</code>, 那么这样写也是一样的</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'my-root'</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>text<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h4 id="factory">Factory</h4><p>一个 <code>ReactElement</code> 的工厂是一个简单的用来创建 <code>ReactElement</code> 带着特定的 <code>type</code>。React 本身内部是有这样的一个函数的。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">createFactory</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>这样可以快速创建一个带有类型的函数，然后在此调用函数，不需要在传递额外的类型。比如不在需要每次都传入类型 <code>React.createElement(&#x27;type&#x27;)</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> div <span class="token operator">=</span> <span class="token function">createFactory</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token punctuation">{</span> className<span class="token punctuation">:</span> <span class="token string">'my-root'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>如果使用的是 <code>JSX</code> 的话，那么根本不需要这么做， React 内部已经处理好了。</p><h3 id="react-nodes">React Nodes</h3><p><code>React Node</code> 可能是其中的一种：</p><ul><li>React Element</li><li>string</li><li>number</li><li>ReactFrament</li></ul><p>可以直接看 ReactNode 的定义</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="">type ReactNode <span class="token operator">=</span>
  <span class="token operator">|</span> ReactChild
  <span class="token operator">|</span> ReactFragment
  <span class="token operator">|</span> ReactPortal
  <span class="token operator">|</span> boolean
  <span class="token operator">|</span> <span class="token keyword">null</span>
  <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</code></pre><p>相关类型的定义</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="">type ReactText <span class="token operator">=</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>
type ReactChild <span class="token operator">=</span> ReactElement <span class="token operator">|</span> ReactText<span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">ReactNodeArray</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>ReactNode<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
type ReactFragment <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">|</span> ReactNodeArray<span class="token punctuation">;</span>
</code></pre><p><code>React Element</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">interface</span> <span class="token class-name">ReactElement</span><span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">=</span> any<span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">string</span> <span class="token operator">|</span> JSXElementConstructor<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">=</span> string <span class="token operator">|</span> JSXElementConstructor<span class="token operator">&lt;</span>any<span class="token operator">>></span> <span class="token punctuation">{</span>
      type<span class="token punctuation">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
      props<span class="token punctuation">:</span> <span class="token constant">P</span><span class="token punctuation">;</span>
      key<span class="token punctuation">:</span> Key <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><h3 id="react-components">React Components</h3><p>一个 <code>React Components</code> Class 就是一个简单的 js class</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">render</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>当这个构造函数被调用的时候，将返回一个对象，并且一定要有一个 <code>render</code> 函数在内部。这个对象就是 <code>ReactComponent</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyComponent</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// never do this</span>
</code></pre><p>除非是为了测试，否则千万不要这么写。React 会在内部调用的。Dan 也在<a href="https://overreacted.io/how-does-react-tell-a-class-from-a-function/">之前的文章</a>中说过原因</p><p>也可以把 <code>ReactComponent</code> class 传递给 React.createElement 得到一个 ReactElement</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>也可以使用 <code>JSX</code> 的方式</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
</code></pre><p>当这个被传递给 <code>React.render</code> 时，React 将调用构造函数并且返回一个 <code>ReactComponent</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> component <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>如果继续调用 <code>React.render</code> 带着相同的 <code>ReactElement</code> 和相同的 dom, 那么总是返回相同的实例</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> componentA <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> componentB <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
componentA <span class="token operator">===</span> componentB<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><h2 id="uselayouteffect--useeffect">useLayoutEffect &amp; useEffect</h2><p>在<a href="https://reactjs.org/docs/hooks-intro.html">官方文档</a> 中已经详细的介绍了各个 hook 的区别。</p><p>官方介绍是这样说的：</p><p>The signature is identical to useEffect, but it fires synchronously after all DOM mutations.
Use this to read layout from the DOM and synchronously re-render.
Updates scheduled inside useLayoutEffect will be flushed synchronously, <code>before the browser has a chance to paint</code>.</p><p>Tip</p><p>If you’re migrating code from a class component, note useLayoutEffect fires in the same phase as componentDidMount and componentDidUpdate.
However, we recommend starting with useEffect first and only trying useLayoutEffect if that causes a problem.</p><p>If you use server rendering, keep in mind that neither useLayoutEffect nor useEffect can run until the JavaScript is downloaded.
This is why React warns when a server-rendered component contains useLayoutEffect.
To fix this, either move that logic to useEffect (if it isn’t necessary for the first render),
or delay showing that component until after the client renders (if the HTML looks broken until useLayoutEffect runs).</p><p>To exclude a component that needs layout effects from the server-rendered HTML,
render it conditionally with <code>showChild &amp;&amp; &lt;Child /&gt;</code> and defer showing it with useEffect(() =&gt; { setShowChild(true); }, []).
This way, the UI doesn’t appear broken before hydration.</p><p>这是在 <code>useLayoutEffect</code> 中介绍的。</p><p><a href="https://reactjs.org/docs/hooks-reference.html#useeffect">useEffect</a> 的介绍参考官网。</p><p>其中在 <code>useLayoutEffect</code> 中的介绍有几点需要关注的。首先 <code>it fires synchronously after all DOM mutations</code>, 同步触发。
第二 <code>Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint</code>
在浏览器有机会绘画之前。</p><p>那这个到底适合于什么样的场景呢？不如先从一个例子来分析, 假设此时有一个搜索历史的的需求，搜索过的内容需要增加到搜索历史中。并且搜索历史不能超过
一行，超过了一行则进行截取，把超过的那部分去掉。</p><div><img src="./static/media/his.a2578714.jpg"/></div><p>此时我们应该如何去做。基本做法应该是点击搜索，在 <code>useEffect</code> 里进行计算已渲染的历史的节点的宽度，然后遍历历史的 dom 节点进行宽度相加，最后来判断
是否超过了最大宽度，如果超过了最大宽度，那么进行截取，否则不进行截取。（当然如果要是能提前知道 <code>input</code> 输入的内容区的宽度，那么就可以在事件函数中进行提前判断处理)。
目前处理是在 <code>useEffect</code> 中进行遍历来计算宽度的。这个看起来是没有问题的，对吧。不妨看一下效果</p><div><img src="./static/media/useEffect.578d1fbd.gif"/></div><p>可以很容易的看到，有一个闪动的过程，因为在 useEffect 中进行了截取，此时这个 dom 已经被渲染到页面上了。在进行截取，就会看到<code>闪动</code>的现象。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nextHistory <span class="token operator">=</span> <span class="token function">getNextHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">saveHistory</span><span class="token punctuation">(</span>nextHistory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>history<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> getNextHistory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> cloneHistory <span class="token operator">=</span> history<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> totalWidth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> historyRefs<span class="token punctuation">.</span>current<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> node <span class="token operator">=</span> historyRefs<span class="token punctuation">.</span>current<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> width <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      totalWidth <span class="token operator">+=</span> width <span class="token operator">+</span> offset<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>totalWidth <span class="token operator">></span> <span class="token constant">MAX_HISTORY_LENGTH</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cloneHistory <span class="token operator">=</span> cloneHistory<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cloneHistory<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>那如果换成 <code>useLayoutEffect</code> 呢？</p><div><img src="./static/media/useLayoutEffect.3545cf97.gif"/></div><p>可以看出在使用 <code>useLayoutEffect</code> 的时候之前的闪动不存在了。回头看一下之前标记的地方。其中有一处吃这样的</p><p><code>Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint</code></p><p>所以针对出现需要频繁修改 dom 或者需要在 dom 渲染后又要立马操作 dom 的以及进行一些布局操作的都可以使用 <code>useLayoutEffect</code>。比如 <code>Popover</code>,
<code>ToolTip</code>, <code>DronDown</code> 等相关组件。</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[the dep of useHook]]></title>
            <link>/posts/2019-10-02/the-dep-of-use-hook/</link>
            <guid>/posts/2019-10-02/the-dep-of-use-hook/</guid>
            <pubDate>Tue, 01 Oct 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>昨天是 <code>10月1日</code> 国庆节，首先祝贺伟大的祖国 70 年生日快乐！！！！</p><p>今天是国庆节的第二天，在这里先祝福大家国庆节快乐，吃好喝好！！！</p><p>今天闲来无事，不由自由的就开了电脑，这可能是做技术的人的通病？感觉有的时候不自觉就会打开电脑，看些技术
文章呀什么的。正好在看文章的时候，想起来之前在工作中亦是是在学习中遇到一些问题，今天就在这篇文章里总结
一下吧。</p><h2 id="目录">目录</h2><ul><li>常见 <code>Hook</code> 的用法</li><li><code>Hook</code> 的注意项以及规则</li><li>如何处理 <code>Hook</code> 的依赖</li></ul><h3 id="常见-hook-的用法">常见 <code>Hook</code> 的用法</h3><p>React 发布了很多 <code>Hook</code>, 今天在这篇文章里主要减少几个 Hook 分别是 <code>useEffect</code>, <code>useMemo</code>, <code>useCallback</code>
为什么只介绍这三个，因为这三个都涉及到依赖项的问题。<code>useLayoutEffect</code> 这个不算详细介绍，参考 <code>useEffect</code> 即可</p><h4 id="useeffect">useEffect</h4><p><code>useEffect</code> 的用法很简单，这个 Hook 通常是用来处理一些副作用的，比如数据请求。你可以当做 class 中的
<code>componentDidMount</code> 和 <code>componentDidUpdate</code> 的结合体来使用。以前需要请求数据的时候，我们会把请求数据的
操作放在 <code>componentDidMount</code> 中。比如</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="2,3,4"><span class="token keyword">class</span> <span class="token class-name">Text</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
<span class="highlighted-line">  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">  <span class="token punctuation">}</span></span><span class="token punctuation">}</span>
</code></pre><p>但是在 Hook 里就可以这样去写</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>此时需要注意的就是 <code>依赖项</code> 的问题，这个例子中依赖项是一个空数组，那么就代表只在 <code>mount</code> 的时候执行一次，
下一次不会执行这个 <code>Hook</code>。</p><p>同理， <code>useEffect</code> 也可以取代 <code>componentDidUpdate</code>。比如在 class 中使用 <code>update</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">Text</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">preProps<span class="token punctuation">,</span> preState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>preProps<span class="token punctuation">.</span>xx <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>xx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// doing</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>在 <code>Hook</code> 里就可以这样去写</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// doing</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>xx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>只要当 <code>xx</code> 发生变化的时候就执行这个 <code>effect</code>。用起来还是很简单的。</p><h3 id="hook-的注意项以及规则"><code>Hook</code> 的注意项以及规则</h3><p>在使用 <code>Hook</code> 的时候一定要遵循它的<a href="https://reactjs.org/docs/hooks-rules.html?no-cache=1">规则</a></p><p>Don’t call Hooks from regular JavaScript functions. Instead, you can:</p><ul><li>✅ Call Hooks from React function components.</li><li>✅ Call Hooks from custom Hooks (we’ll learn about them on the next page).</li></ul><p>必须要遵循上述的规则，才能正确的使用 <code>Hook</code></p><h3 id="如何处理-hook-的依赖">如何处理 <code>Hook</code> 的依赖</h3><p>在使用 <code>Hook</code> 的时候，通常会装官方提供的 <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks">hook eslint</a> 使用
官方提供的 eslint 有很多好处。在一定程度上可以帮助我们避免一些使用 hook 的错误，比如需要在顶层使用。如果你在条件语句中
使用就会报错。使用 lint 减少了错误的发生。但是目前的 eslint 有个问题，这个问题可能会被大家所诟病吧。就是自定添加依赖的问题
当在 eslint 中这样配置</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">// Your ESLint configuration</span>
<span class="token punctuation">{</span>
  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
    <span class="token string">"react-hooks"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token string">"react-hooks/rules-of-hooks"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token comment">// Checks rules of Hooks</span>
    <span class="token string">"react-hooks/exhaustive-deps"</span><span class="token punctuation">:</span> <span class="token string">"warn"</span> <span class="token comment">// Checks effect dependencies</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p><code>react-hooks/exhaustive-deps</code> 这个规则会检查依赖项，常见有 <code>useEffect</code>, <code>useMemo</code>, <code>useCallback</code>
会自动给这个几个 <code>Hook</code> 加上依赖，那么这样就会存在问题，有的时候可能我就是不想要这个依赖，但是因为 lint 配置了这个
的原因，自动加上了依赖，遇到这种情况应该怎么去解决或者说如何优雅的来解决这个问题呢？（<code>删掉这个规则美滋滋-最好不要删</code>）</p><p>这个在 React 的 github <a href="https://github.com/facebook/react/issues/14920">issue</a> 中有提到过这样的问题，就是希望在使用这个
规则的时候不要自动加上依赖，可以给出警告，但是不要自动添加到代码中。今天从官方的 issue 来分析一个一个这样的例子，是否可以在不去掉这个
规则的前提下，解决这样的依赖问题。</p><h4 id="example-1">Example-1</h4><p><a href="https://codesandbox.io/s/nqy69ol00">codesandbox</a></p><p>This is an uncontrolled Checkbox component which takes a defaultIndeterminate prop to set the indeterminate status on initial render (which can only be done in JS using a ref because there’s no indeterminate element attribute). This prop is intended to behave like defaultValue, where its value is used only on initial render.</p><p>The rule complains that defaultIndeterminate is missing from the dependency array, but adding it would cause the component to incorrectly overwrite the uncontrolled state if a new value is passed. The dependency array can’t be removed entirely because it would cause the indeterminate status to be fully controlled by the prop.</p><p>I don’t see any way of distinguishing between this and the type of case that the rule is meant to catch, but it would be great if the final rule documentation could include a suggested workaround. 🙂</p><p><code>原始代码片段</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="9,10,11,12,13"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Checkbox</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> defaultIndeterminate<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>

  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="highlighted-line">  React<span class="token punctuation">.</span><span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><span class="highlighted-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultIndeterminate <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> inputRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">      inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>indeterminate <span class="token operator">=</span> defaultIndeterminate<span class="token punctuation">;</span></span><span class="highlighted-line">    <span class="token punctuation">}</span></span><span class="highlighted-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>input <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span> type<span class="token operator">=</span><span class="token string">'checkbox'</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Checkbox defaultIndeterminate <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>这个例子会报一个警告就是 <code>useLayoutEffect</code> 缺少一个依赖就是 <code>defaultIndeterminate</code>, 那么此时这个依赖放在
这里是否合适呢？明显看出是不合适的，因为 <code>default</code> 的效果是什么就是初始化或者说只对于 mount 的时候起作用，下一次
修改 default 的值不应该不在应用这个值。但是如果作为依赖，那么每次这个值发生变化都会导致重新应用这个值，如果达到这个作用
不就是 value 的效果了嘛。而不是 <code>defaultValue</code> 或 <code>defaultIndeterminate</code> 的效果。如果要想达到 default 的效果又不是
disabled lint, 可以试试这样来修改</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="5"><span class="token keyword">function</span> <span class="token function">Checkbox</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> defaultIndeterminate<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>

  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="highlighted-line">  <span class="token keyword">const</span> indeterminate <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span>defaultIndeterminate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  React<span class="token punctuation">.</span><span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>indeterminate <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> inputRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>indeterminate <span class="token operator">=</span> indeterminate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>indeterminate<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>input <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span> type<span class="token operator">=</span><span class="token string">'checkbox'</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>使用 <code>useState</code> 把 <code>indeterminate</code> 作为依赖。</p><p>总结： 如果要达到 <code>default</code> 的效果其实都可以这么来处理。使用 useState 可以达到缓存的效果</p><h4 id="example-2">Example-2</h4><p>第二个场景还是很简单的在 issue 中是这样的</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>在外部创建了 <code>foo</code> 函数，但是调用需要在 useEffect 内部调用也有可能在其他的事件函数中调用。这种场景在开发中还是很常见的一种。这种场景下
会把 <code>foo</code> 加入到依赖中。但是每次当组件 <code>rerender</code> 的时候, foo 都是一个新的函数，那么这种场景下如何处理呢？</p><p>这种分两种情况来处理，第一就是如果函数在 <code>effect</code> 内部使用，并且这个函数并不会在其他地方调用，那么这个函数就需要<code>声明在 effect 内部</code>,
第二就是这个函数不仅在 <code>effect</code> 内部也需要在其他地方使用。那么此时需要使用 <code>useCallback</code> 进行包裹起来，在 <code>useCallback</code> 中
处理好依赖关系就可以。第二种方法就是使用 useState, 之前说过 useState 也能起到缓存的作用。那么如果对函数进行缓存，也是可以
达到一样的效果的</p><h4 id="example-3">Example-3</h4><p>如果在 <code>useEffect</code> 内部直接使用 <code>props.xxx</code>, 那么此时会自动把 props 加入到依赖中。比如</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">useEffect</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    props<span class="token punctuation">.</span><span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>props<span class="token punctuation">.</span>setLoading<span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>这不是我们所期望的，所以对于在 useEffect 中使用 props, 最好先解构出相应的属性。 The best practice is always destructuring.</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="1"><span class="highlighted-line"><span class="token keyword">const</span> <span class="token punctuation">{</span> setLoading <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span></span><span class="token function">useEffect</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>setLoading<span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h4 id="example-4">Example-4</h4><p>这是一个常用于数据请求的例子，在 <code>useEffect</code> 内部发送请求</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="21,22,23,24,25,26,27,28,29"><span class="token keyword">const</span> <span class="token function-variable function">useDataApi</span> <span class="token operator">=</span> <span class="token parameter">url</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isLoading<span class="token punctuation">,</span> setIsLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isError<span class="token punctuation">,</span> setIsError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> response<span class="token punctuation">;</span>
    <span class="token function">setIsError</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">setData</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setIsError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="highlighted-line"></span><span class="highlighted-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span></span><span class="highlighted-line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><span class="highlighted-line">      <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span><span class="highlighted-line">    <span class="token comment">// react-hooks/exhaustive-deps gives me warning that I should put fetchData into</span></span><span class="highlighted-line">    <span class="token comment">// dependency array &amp; remove url</span></span><span class="highlighted-line">    <span class="token comment">// if I put fetchData as a dependency and remove url the request will be fired continuously</span></span><span class="highlighted-line">    <span class="token punctuation">[</span>url<span class="token punctuation">]</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isError <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>在这个例子中，<code>useEffect</code> 是需要 <code>fetchData</code> 作为依赖，但是当需要函数作为依赖的时候正如之前所说的，有三种方法可以解决这个。第一把这个函数放在内部，
第二使用 <code>useCallback</code>, 第三使用 ref 或者 state 记录该函数。其实还有一种就是把这个函数放在这个 <code>Hook</code> 的外部也是一个不错的选择。不妨来一步一步的修改。
首先把函数放在内部应该是什么样的？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">useEffect</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> response<span class="token punctuation">;</span>
      <span class="token function">setIsError</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">setData</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setIsError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// react-hooks/exhaustive-deps gives me warning that I should put fetchData into</span>
  <span class="token comment">// dependency array &amp; remove url</span>
  <span class="token comment">// if I put fetchData as a dependency and remove url the request will be fired continuously</span>
  <span class="token punctuation">[</span>url<span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div><img src="./static/media/data.18efbfa5.jpg"/></div><p>可以看出此时依赖问题已经解决。其他的都是一样的处理，这个例子就不做过多的阐述。</p><h4 id="example-5">Example-5</h4><p>第五个例子也是业务中常见的一个例子，就是模拟 <code>componentDidUpdate</code> 正如我们所知道的， <code>useEffect</code> 有这个作用。但是遇到这种情况</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">preProps<span class="token punctuation">,</span> preState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>preProps<span class="token punctuation">.</span>xxx <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fetchData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>例子代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> getData<span class="token punctuation">,</span> someId<span class="token punctuation">,</span> refreshRequest <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">getData</span><span class="token punctuation">(</span>someId<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>refreshRequest<span class="token punctuation">]</span> <span class="token comment">//This is what I want -- just invoke useEffect on intial component mount and when refreshRequest is updated</span>
    <span class="token comment">//[refreshRequest, someId, getData] //Linter wants everything in useEffect function second array argument, or nothing.  So, if any prop changes, then it will invoke useEffect. Not what I want</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      My component has rendered<span class="token punctuation">.</span> Check out the console <span class="token keyword">for</span> when data is
      <span class="token string">'fetched'</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>这个在 <code>useEffect</code> 中很不好处理，为什么？因为 <code>fetchData</code> 和 <code>url</code> 都被认为是依赖，实际上真正的依赖应该是 <code>xxx</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token punctuation">{</span> xxx<span class="token punctuation">,</span> fetchData<span class="token punctuation">,</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">fetchData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>xxx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>这个就会报警告。那么这样的问题如何解决呢？按照之前说的方法，第一我们使用 <code>useCallback</code> 来试试看</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">fetchData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fetchData<span class="token punctuation">,</span> url<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fetch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>此时 <code>fetchData</code> 和 <code>url</code> 都会被加到依赖中。这个还是不合理的，因为只要 url 或 fetchData 变化就会触发数据的请求，而与 <code>xxx</code> 这个属性毫无关系。这个例子不妨在分析一下
使用了 <code>props</code> 但是有一些 props 是依赖于其他的 props, 这种更像是 class 中的 <code>getDerivedStateFromProps</code>. 那么不妨按照这个方向来处理这个依赖的问题。使用第二种方法
<code>useState</code> 来解决这个问题。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="4,5,6,7"><span class="token keyword">const</span> <span class="token punctuation">[</span>currentGetData<span class="token punctuation">,</span> setCurrentGetData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>getData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>prevRefreshRequest<span class="token punctuation">,</span> setPrevRefreshRequest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>refreshRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="highlighted-line"><span class="token keyword">if</span> <span class="token punctuation">(</span>prevRefreshRequest <span class="token operator">!==</span> refreshRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">  <span class="token function">setPrevRefreshRequest</span><span class="token punctuation">(</span>refreshRequest<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">  <span class="token function">setCurrentGetData</span><span class="token punctuation">(</span>getData<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line"><span class="token punctuation">}</span></span>
<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">currentGetData</span><span class="token punctuation">(</span>someId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>currentGetData<span class="token punctuation">,</span> someId<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>模拟了 <code>getDerivedStateFromProps</code> 来解决这个问题。但是这个例子并不是一个可取的例子，将异步函数传递下来。很有可能会出现 <code>竞态</code> 的情况。就是两个请求发出的时候，第一个请求比
第二个请求要慢。实际上我们需要是第二个请求返回的结果。所以最好处理好这样的问题。如果请求数据的就是这个组件的本身的话，可以在 <code>useEffect</code> 的 clean 函数中设置<code>忽略</code>标志以解决这种
<code>竞态</code>的场景。当然如果 <code>React</code> 后续的 <code>Suspense</code> 出来了，数据请求放在 <code>Suspense</code> 中是最好的选择。</p><h2 id="conclusion">Conclusion</h2><p>对于使用 <code>useEffect</code> 的依赖可以采取四种方式来解决。</p><ul><li>使用 <code>useState</code> 进行缓存。同时可以用来模拟 class 中的 <code>getDerivedStateFromProps</code></li><li>对于在 <code>useEffect</code> 外部的声明，内部又要使用这个函数。可以放入到 <code>useEffect</code> 内部</li><li>对于不能放在 <code>useEffect</code> 内部的，可以考虑是否使用 <code>useCallback</code> 来解决这样的问题</li><li>使用 <code>ref</code> 或者 放到组件外面</li></ul><p>对于这个 <a href="https://github.com/facebook/react/issues/14920">Feedback for “exhaustive-deps” lint rule</a> Dan 也在里面给出了一些解决办法。可以参考</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[react callback thinking]]></title>
            <link>/posts/2019-11-02/a-callback-thinking/</link>
            <guid>/posts/2019-11-02/a-callback-thinking/</guid>
            <pubDate>Fri, 01 Nov 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>首先为什么会想到写这篇文章，写这篇文章的由来主要是内部的一个项目导致的，这个引起了我的一些思考。那到底是什么呢？</p><h1 id="目录">目录</h1><ul><li>为什么会出现这种场景</li><li>如何解决这个场景</li><li>react 内部是如何运作的才会导致这种场景的出现</li></ul><h2 id="为什么会出现这种场景">为什么会出现这种场景</h2><p>在使用 <code>React</code> 的时候，父子间是如何通信的，我相信基本上所有人都是知道的，父传递数据给子是通过 <code>props</code> 的形式</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="2"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token constant">B</span> name<span class="token operator">=</span><span class="token string">'lanyincao'</span> age<span class="token operator">=</span><span class="token string">'18'</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span></span><span class="token punctuation">}</span>
</code></pre><p>此时 B 组件接受 <code>name</code> 和 <code>age</code> 这两个 props, 在 B 组件内部就可以拿到这两个数据进行相应的处理操作。那么子如何把数据传递给父呢？我们知道应该回调的方式</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="7,8,9"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token constant">B</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> onChange <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>onChange<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">    <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token string">'XXXX'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">  <span class="token punctuation">}</span></span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>在 B 组件内部调用 A 组件传递下来的 <code>onChange</code> 回调，通过 <code>onChange</code> 再把 B 中的数据反传回去。基本上父子通信就可以很快的完成了。至于其他的方法我在这里不做过多的描述，主要是为了引出
另一个问题。</p><p>此时有这样的一个组件的结构。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="5,6,7,8"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> getAge<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render Parent component'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="highlighted-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>getAge<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'getAge:'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">    <span class="token function">getAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">  <span class="token punctuation">}</span></span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> age <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render Node component'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age:'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render Test component'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> ageRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> forceUpdate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'update Test component'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Parent getAge<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">age</span> <span class="token operator">=></span> <span class="token punctuation">(</span>ageRef<span class="token punctuation">.</span>current <span class="token operator">=</span> age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>Node age<span class="token operator">=</span><span class="token punctuation">{</span>ageRef<span class="token punctuation">.</span>current<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Parent<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Test <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>Test</code> 组件有一个 <code>children</code> 组件叫做 <code>Parent</code>, 在 <code>Parent</code> 组件内部调用了 <code>getAge</code> 方法, <code>getAge</code> 方法就是一个回调, 通过 <code>getAge</code> 方法把
age 返回出去给父组件使用。那么不妨在仔细看下 <code>Test</code> 组件，在调用 <code>getAge</code> 方法的时候把 age 挂到 ref 上，我们知道在函数中 ref 可以当做和 class 中的 this
一样去使用，所以在 render Parent 的时候， ageRef.current 就会被赋予新的值, 那么 ageRef.current 被赋予新的值后，是否此时 <code>Node</code> 组件获取到的 age 就是新的值呢？
不妨看一下输出</p><div><img src="./static/media/hook-1.5eadc3d4.jpg"/></div><p>可以看出在 <code>Node</code> 组件中, 此时 age 是 null, 对啊为什么会是 null 呢，不应该啊，如果是 18 应该多好啊。有可能在 <code>Node</code> 组件内部，会使用数字的一些方法，那么如果是 null,
这样就会导致页面白屏了，就会造成严重的问题。</p><h2 id="如何解决这个场景">如何解决这个场景</h2><p>上面出现的 age is null, 这样的情况，应该如何去解决呢？ 首先我们知道 ageRef 是一个拥有 current 属性的一个对象，那么此时不妨把 ageRef 传递到子组件中，在子组件中使用
<code>ageRef.current</code> 来获取到新的 age 的值，好了不妨试一下！！！</p><ul><li>传递引用到子组件中</li></ul><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="13,22"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> getAge<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>getAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'getAge:'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">ResovedNode</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> age <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age:'</span><span class="token punctuation">,</span> age<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span></span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ResovedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ageRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Parent getAge<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">age</span> <span class="token operator">=></span> <span class="token punctuation">(</span>ageRef<span class="token punctuation">.</span>current <span class="token operator">=</span> age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>
<span class="highlighted-line">      <span class="token operator">&lt;</span>ResovedNode age<span class="token operator">=</span><span class="token punctuation">{</span>ageRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Parent<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>现在传递到 Node 组件中的 age 是 <code>ageRef.current</code>, 在看看输出</p><div><img src="./static/media/hook-2.a9921c74.jpg"/></div><p>此时在 <code>Node</code> 组件中获取到的 ageRef.current 就是正确的值了，为什么，因为在 Parent 中的 ageRef 和传递下去的是同一个引用，所以在 render parent 的时候，
调用了 getAge 此时 ageRef.current 被修改了。那么当渲染到 Node 的时候，获取到的 <code>ageRef</code> 就可以拿到在 Parent 组件中的 age 的值了。</p><p><a href="https://codesandbox.io/s/yici-huidiaodefenxi-y20cf">try it in codesandbox</a></p><ul><li>传递函数到子组件中</li></ul><p>函数是具有懒执行也就是延迟执行的作用，我们可以在任何时候控制函数的执行。所以如何传递一个函数到子组件中是否也可以达到一样的效果呢？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="13,22"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> getAge<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>getAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'getAge:'</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">ResovedNode2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> age <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age:'</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ResovedTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ageRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Parent getAge<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">age</span> <span class="token operator">=></span> <span class="token punctuation">(</span>ageRef<span class="token punctuation">.</span>current <span class="token operator">=</span> age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>
<span class="highlighted-line">      <span class="token operator">&lt;</span>ResovedNode2 age<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ageRef<span class="token punctuation">.</span>current<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Parent<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>此时传递给 Node 的 age 是一个函数 <code>() =&gt; ageRef.current</code>, 这个函数返回了 <code>ageRef.current</code>, 因为现在传递给 Node 的是一个函数，而这个函数的执行时机是在 Node 组件的
render 时机，所以在 Node 中总是可以拿到新的值。不妨看一下数据</p><div><img src="./static/media/hook-3.25ce9ca0.jpg"/></div><p>可以看出此时输出的 age 都是正确的。</p><p><a href="https://codesandbox.io/s/yici-huidiaodefenxi-y20cf">try it in codesandbox</a></p><h2 id="react-内部是如何运作的才会导致这种场景的出现">react 内部是如何运作的才会导致这种场景的出现</h2><p>在上面的场景中已经知道有两种解决办法，那么不妨考虑一下为什么第一种是不行的呢？那么不妨对 react 进行调试一下就能知道为什么了</p><p>首先在 react 的源码的 createElement 的内部打印一下</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> config<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> propName<span class="token punctuation">;</span> <span class="token comment">// Reserved names are extracted</span>

  <span class="token operator">...</span>some

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'createElement-'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">type:</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token string">'props:'</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token function">ReactElement</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> self<span class="token punctuation">,</span> source<span class="token punctuation">,</span> ReactCurrentOwner<span class="token punctuation">.</span>current<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>为什么要在 <code>createElement</code> 里面打印呢，我们知道 React 会调用 <code>React.createElement</code> 返回 ReactElment 对象，调用的是在 <code>babel</code> 插件中做的，具体
可以去看一下插件。可以主动调用 <code>React.createElement</code>, 也可以写成 <code>JSX</code> 的形式， React 会自行解析。那不妨看一下此时的输出</p><div><img src="./static/media/hook-4.8834fdd9.jpg"/></div><p>从输入可以看出在调用 <code>createElement</code> 的时候, 此时 Node 的 props 已经确定了， 此时的 age 是 null, 所以当 render Node 组件的时候，此时的 age 就是 null,
这就是为什么拿不到最新的值的原因了，因为 <code>createElement</code> 的时候已经确定了这个 props 的值。如果后续发生 <code>update</code>, 会继续调用 <code>createElement</code>, 此时 Test 组件中的
<code>ageRef.current</code> 已经更新成最新的值了。不妨看一下输出</p><div><img src="./static/media/hook-5.16282898.jpg"/></div><p>可以看出此时的 <code>ageRef.current</code> 已经是最新的啦</p><h1 id="conclusion">conclusion</h1><p>通过这次场景，分析了一下为什么在 <code>React</code> 中第一次 age 是 null 的原因，也知道了如何来解决这个 null 的问题。</p><p>又是一个愉快的周末呀 😄😌</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[useSubscription]]></title>
            <link>/posts/2019-11-16/use-subscription/</link>
            <guid>/posts/2019-11-16/use-subscription/</guid>
            <pubDate>Fri, 15 Nov 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p><code>useSubscription</code> 即订阅模式，这是 <code>react</code> 自身提供的 <code>Hook</code>, 本文主要通过几个方面来介绍这个 <code>Hook</code>, 大家也可以自行参考<a href="https://github.com/facebook/react/blob/master/packages/use-subscription/README.md">官网</a></p><h2 id="目录">目录</h2><ul><li>为什么会有这个 useSubscription<ul><li>When should you NOT use this?</li><li>What types of subscriptions can this support?</li></ul></li><li>useSubscription 的内部实现</li><li>手动实现一个 useSubscription</li></ul><h3 id="为什么会有这个-usesubscription">为什么会有这个 useSubscription</h3><p><a href="https://github.com/facebook/react/tree/master/packages/use-subscription">useSubscription</a> 的出现主要是为了在 React concurrent mode 下可以安全的管理状态。
主要用于读取某个值，值发生变化的时候可以同步更新相应的组件然后展示出来。</p><h4 id="when-should-you-not-use-this">When should you NOT use this?</h4><ul><li>Redux/Flux stores should use the context API instead.</li><li>I/O subscriptions (e.g. notifications) that update infrequently should use a mechanism like react-cache instead.</li><li>Complex libraries like Relay/Apollo should manage subscriptions manually with the same techniques which this library uses under the hood (as referenced here) in a way that is most optimized for their library usage.</li></ul><h4 id="what-types-of-subscriptions-can-this-support">What types of subscriptions can this support?</h4><p>This abstraction can handle a variety of subscription types, including:</p><ul><li>Event dispatchers like HTMLInputElement.</li><li>Custom pub/sub components like Relay’s FragmentSpecResolver.</li><li>Observable types like RxJS BehaviorSubject and ReplaySubject. (Types like RxJS Subject or Observable are not supported, because they provide no way to read the “current” value after it has been emitted.)</li></ul><p>Note that JavaScript promises are also not supported because they provide no way to synchronously read the “current” value.</p><p>以上信息都来自官网</p><h3 id="usesubscription-的内部实现">useSubscription 的内部实现</h3><p><code>useSubscription</code> 的<a href="https://github.com/facebook/react/blob/master/packages/use-subscription/src/useSubscription.js">内部代码</a>很简单，不超过 20 行，在内部实现对任意的值的订阅</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="24,25,26,27,28,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47"><span class="token keyword">import</span> <span class="token punctuation">{</span> useDebugValue<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token comment">// Hook used for safely managing subscriptions in concurrent mode.</span>
<span class="token comment">//</span>
<span class="token comment">// In order to avoid removing and re-adding subscriptions each time this hook is called,</span>
<span class="token comment">// the parameters passed to this hook should be memoized in some way–</span>
<span class="token comment">// either by wrapping the entire params object with useMemo()</span>
<span class="token comment">// or by wrapping the individual callbacks with useCallback().</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> useSubscription<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// (Synchronously) returns the current value of our subscription.</span>
  getCurrentValue<span class="token punctuation">,</span>

  <span class="token comment">// This function is passed an event handler to attach to the subscription.</span>
  <span class="token comment">// It should return an unsubscribe function that removes the handler.</span>
  subscribe
<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">|</span>
  <span class="token function-variable function">getCurrentValue</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Value<span class="token punctuation">,</span>
  <span class="token function-variable function">subscribe</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">:</span> Function</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>
<span class="token operator">|</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Value <span class="token punctuation">{</span>
  <span class="token comment">// Read the current value from our subscription.</span>
  <span class="token comment">// When this value changes, we'll schedule an update with React.</span>
  <span class="token comment">// It's important to also store the hook params so that we can check for staleness.</span>
  <span class="token comment">// (See the comment in checkForUpdates() below for more info.)</span>
<span class="highlighted-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span><span class="highlighted-line">    getCurrentValue<span class="token punctuation">,</span></span><span class="highlighted-line">    subscribe<span class="token punctuation">,</span></span><span class="highlighted-line">    value<span class="token punctuation">:</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="highlighted-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token keyword">let</span> valueToReturn <span class="token operator">=</span> state<span class="token punctuation">.</span>value<span class="token punctuation">;</span>

  <span class="token comment">// If parameters have changed since our last render, schedule an update with its current value.</span>
<span class="highlighted-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span></span><span class="highlighted-line">    state<span class="token punctuation">.</span>getCurrentValue <span class="token operator">!==</span> getCurrentValue <span class="token operator">||</span></span><span class="highlighted-line">    state<span class="token punctuation">.</span>subscribe <span class="token operator">!==</span> subscribe</span><span class="highlighted-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">    <span class="token comment">// If the subscription has been updated, we'll schedule another update with React.</span></span><span class="highlighted-line">    <span class="token comment">// React will process this update immediately, so the old subscription value won't be committed.</span></span><span class="highlighted-line">    <span class="token comment">// It is still nice to avoid returning a mismatched value though, so let's override the return value.</span></span><span class="highlighted-line">    valueToReturn <span class="token operator">=</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line"></span><span class="highlighted-line">    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><span class="highlighted-line">      getCurrentValue<span class="token punctuation">,</span></span><span class="highlighted-line">      subscribe<span class="token punctuation">,</span></span><span class="highlighted-line">      value<span class="token punctuation">:</span> valueToReturn</span><span class="highlighted-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">  <span class="token punctuation">}</span></span>
  <span class="token comment">// Display the current value for this hook in React DevTools.</span>
  <span class="token function">useDebugValue</span><span class="token punctuation">(</span>valueToReturn<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// It is important not to subscribe while rendering because this can lead to memory leaks.</span>
  <span class="token comment">// (Learn more at reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects)</span>
  <span class="token comment">// Instead, we wait until the commit phase to attach our handler.</span>
  <span class="token comment">//</span>
  <span class="token comment">// We intentionally use a passive effect (useEffect) rather than a synchronous one (useLayoutEffect)</span>
  <span class="token comment">// so that we don't stretch the commit phase.</span>
  <span class="token comment">// This also has an added benefit when multiple components are subscribed to the same source:</span>
  <span class="token comment">// It allows each of the event handlers to safely schedule work without potentially removing an another handler.</span>
  <span class="token comment">// (Learn more at https://codesandbox.io/s/k0yvr5970o)</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> didUnsubscribe <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">checkForUpdates</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token comment">// It's possible that this callback will be invoked even after being unsubscribed,</span>
      <span class="token comment">// if it's removed as a result of a subscription event/update.</span>
      <span class="token comment">// In this case, React will log a DEV warning about an update from an unmounted component.</span>
      <span class="token comment">// We can avoid triggering that warning with this check.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>didUnsubscribe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// We use a state updater function to avoid scheduling work for a stale source.</span>
      <span class="token comment">// However it's important to eagerly read the currently value,</span>
      <span class="token comment">// so that all scheduled work shares the same value (in the event of multiple subscriptions).</span>
      <span class="token comment">// This avoids visual "tearing" when a mutation happens during a (concurrent) render.</span>
      <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">prevState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token comment">// Ignore values from stale sources!</span>
        <span class="token comment">// Since we subscribe an unsubscribe in a passive effect,</span>
        <span class="token comment">// it's possible that this callback will be invoked for a stale (previous) subscription.</span>
        <span class="token comment">// This check avoids scheduling an update for that stale subscription.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          prevState<span class="token punctuation">.</span>getCurrentValue <span class="token operator">!==</span> getCurrentValue <span class="token operator">||</span>
          prevState<span class="token punctuation">.</span>subscribe <span class="token operator">!==</span> subscribe
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> prevState<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Some subscriptions will auto-invoke the handler, even if the value hasn't changed.</span>
        <span class="token comment">// If the value hasn't changed, no update is needed.</span>
        <span class="token comment">// Return state as-is so React can bail out and avoid an unnecessary render.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> prevState<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>prevState<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>checkForUpdates<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Because we're subscribing in a passive effect,</span>
    <span class="token comment">// it's possible that an update has occurred between render and our effect handler.</span>
    <span class="token comment">// Check for this and schedule an update if work has occurred.</span>
    <span class="token function">checkForUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      didUnsubscribe <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>getCurrentValue<span class="token punctuation">,</span> subscribe<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Return the current value for our caller to use while rendering.</span>
  <span class="token keyword">return</span> valueToReturn<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>不妨对源码进行分析，首先关注</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  getCurrentValue<span class="token punctuation">,</span>
  subscribe<span class="token punctuation">,</span>
  value<span class="token punctuation">:</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>这里把 <code>props</code> 转换成 <code>state</code> 来存储，这个相当于 class 中的 props 转成 state 是一样的。那为什么需要这么做呢？
在 class 中把 props 同步成 state 的地方有三个声明周期的钩子可以做到，</p><ol><li>一个是已经标记为 <code>unsafe</code> 的 <code>componentWillReceiveProps</code> 在接收到新的 props 的时候可以转换成 state,</li><li>另外是 <code>componentDidUpdate</code> 在每次更新的时候，可以对 <code>this.props</code> 和 <code>pre.props</code> 进行比较，然后在内部进行 <code>setState</code></li><li>是一个静态方法即 <code>getDrivedStateFromProps</code> 在这个静态方法中返回相应的 state.</li></ol><p>这三个方法执行的顺序是不一样的。但是在函数组件中，淡化了生命周期的概念，那么如何模拟 <code>getDrivedStateFromProps</code> 或 <code>componentWillReceiveProps</code> 呢。
如果需要模拟这两个生命周期的话，那么又想做优化，就需要比较上一次的值和下一次的值，上一次的值存储在哪里呢？此时就可以存储到 state 中，然后下一次 <code>render</code> 的时候，
比较这一次的 props 和 state 如果不一样则重新 <code>setState</code>, 即下面这段代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span>
  state<span class="token punctuation">.</span>getCurrentValue <span class="token operator">!==</span> getCurrentValue <span class="token operator">||</span>
  state<span class="token punctuation">.</span>subscribe <span class="token operator">!==</span> subscribe
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// If the subscription has been updated, we'll schedule another update with React.</span>
  <span class="token comment">// React will process this update immediately, so the old subscription value won't be committed.</span>
  <span class="token comment">// It is still nice to avoid returning a mismatched value though, so let's override the return value.</span>
  valueToReturn <span class="token operator">=</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    getCurrentValue<span class="token punctuation">,</span>
    subscribe<span class="token punctuation">,</span>
    value<span class="token punctuation">:</span> valueToReturn
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>通过上述代码，我们已经知道如何更新新的状态，那么在值发生变化的时候还需要执行状态的变更从而实现组件的 <code>re-render</code>，这段代码就是在 <code>useEffect</code> 中</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="24,25,26,46"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> didUnsubscribe <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">checkForUpdates</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// It's possible that this callback will be invoked even after being unsubscribed,</span>
    <span class="token comment">// if it's removed as a result of a subscription event/update.</span>
    <span class="token comment">// In this case, React will log a DEV warning about an update from an unmounted component.</span>
    <span class="token comment">// We can avoid triggering that warning with this check.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>didUnsubscribe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// We use a state updater function to avoid scheduling work for a stale source.</span>
    <span class="token comment">// However it's important to eagerly read the currently value,</span>
    <span class="token comment">// so that all scheduled work shares the same value (in the event of multiple subscriptions).</span>
    <span class="token comment">// This avoids visual "tearing" when a mutation happens during a (concurrent) render.</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">prevState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token comment">// Ignore values from stale sources!</span>
      <span class="token comment">// Since we subscribe an unsubscribe in a passive effect,</span>
      <span class="token comment">// it's possible that this callback will be invoked for a stale (previous) subscription.</span>
      <span class="token comment">// This check avoids scheduling an update for that stale subscription.</span>
<span class="highlighted-line">      <span class="token keyword">if</span> <span class="token punctuation">(</span></span><span class="highlighted-line">        prevState<span class="token punctuation">.</span>getCurrentValue <span class="token operator">!==</span> getCurrentValue <span class="token operator">||</span></span><span class="highlighted-line">        prevState<span class="token punctuation">.</span>subscribe <span class="token operator">!==</span> subscribe</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> prevState<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// Some subscriptions will auto-invoke the handler, even if the value hasn't changed.</span>
      <span class="token comment">// If the value hasn't changed, no update is needed.</span>
      <span class="token comment">// Return state as-is so React can bail out and avoid an unnecessary render.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> prevState<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>prevState<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>checkForUpdates<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Because we're subscribing in a passive effect,</span>
  <span class="token comment">// it's possible that an update has occurred between render and our effect handler.</span>
  <span class="token comment">// Check for this and schedule an update if work has occurred.</span>
<span class="highlighted-line">  <span class="token function">checkForUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    didUnsubscribe <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>getCurrentValue<span class="token punctuation">,</span> subscribe<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>在 <code>useEffect</code> 中会进行值的比较来优化 <code>render</code>， 如果值不发生变化则不进行</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">if</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> prevState<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>并且在 <code>getCurrentValue</code> 和 <code>subscribe</code> 发生变化的时候则重新执行 <code>useEffect</code>, 总的来说源码非常简单，那么 <code>useSubscription</code> 的应用场景有哪些呢？
这些在官网上都已经标记了出来。<a href="https://github.com/facebook/react/blob/master/packages/use-subscription/src/__tests__/useSubscription-test.internal.js">点击查看</a></p><h3 id="手动实现一个-usesubscription">手动实现一个 useSubscription</h3><p>我们已经知道了 React 本身的 <code>useSubscription</code> 的事情，那么我们能否自己实现一个这样形式的订阅呢？首先 <code>useSubscription</code> 现在通常用于状态管理库中，类似的有 Redux 的 <code>useSelector</code>,
目前其他的一些库也都实现了类似的效果。那么不妨就实现一个类似的也叫做 <code>useSelector</code></p><p>首先定义这个函数</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something</span>
<span class="token punctuation">}</span>
</code></pre><p>先考虑一下 useSelector 需要做什么， <code>useSelector</code> 需要是在监听的值发生变化的时候渲染这个组件。通过渲染一个组件有多种方式，不妨写一个 hook 叫做 <code>useForceUpdate</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">useForceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>update<span class="token punctuation">,</span> setUpdate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">forceUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setUpdate</span><span class="token punctuation">(</span><span class="token operator">!</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> forceUpdate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>有了 <code>forceUpdate</code> 后需要实现一个和 <code>useSubscription</code> 一个的优化效果，就是需要一个比较函数， 我们不像 <code>useSubscription</code> 那样直接暴露一个叫做 getCurrentValue 的方法，因为
<code>useSelector</code> 是为了拿到 <code>store</code> 中的数据，只有在 store 中的数据发生变化的时候才会 <code>render</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">oldValue<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// value 是一个数组</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue<span class="token punctuation">.</span>length <span class="token operator">!==</span> newValue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldValue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> newValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>有了比较函数后就可以实现 <code>useSelector</code>, <code>useSelector</code> 需要监听器的值是用户传入的，通常用户需要监听器的值是存储在 store 中的值，所以我们可以给 <code>useSelector</code> 传递一个函数，
函数的第一个参数就是我们的 <code>store</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">depFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 通过某个 context 获取到 sunscribers</span>
  <span class="token keyword">const</span> subscribers <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> forceUpdate <span class="token operator">=</span> <span class="token function">useForceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> depFnRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>depFn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  depFnRef<span class="token punctuation">.</span>current <span class="token operator">=</span> depFn<span class="token punctuation">;</span>
  <span class="token keyword">const</span> depValueRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token function">depFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 这里是 useEffect 中的 订阅函数</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// 订阅函数存储的是 store, 可以在 useSelector 内部使用 useContext() 来获取这个 store</span>
    <span class="token keyword">function</span> <span class="token function">subscriber</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> oldValue <span class="token operator">=</span> depValueRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
      <span class="token keyword">const</span> newValue <span class="token operator">=</span> depFnRef<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compare</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果不相等则强制更新</span>
        <span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        depValueRef<span class="token punctuation">.</span>current <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    subscribers<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      subscribers<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>那么 <code>subscribers</code> 是什么样子的呢？<code>subscribers</code> 需要有 <code>register</code> 和 <code>unregister</code> 方法</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">useSubscriber</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> subscribersRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">register</span> <span class="token operator">=</span> <span class="token parameter">subscriber</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    subscribersRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">unregister</span> <span class="token operator">=</span> <span class="token parameter">subscriber</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribersRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      subscribersRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">notify</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> subscriber <span class="token keyword">of</span> subscribersRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">subscriber</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> register<span class="token punctuation">,</span> unregister <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>这就是一个 <code>useSubscriber</code>, 内部实现了注册和取消注册的功能。那么这个 <code>useSubscriber</code> 为什么还有一个 <code>notify</code> 功能呢？ <code>notify</code> 的作用就是执行每一个
监听器就是 <code>Redux</code> 中的 <code>listener()</code> 是一样的。所以这里可以看做的 <code>listener()</code>。</p><p>这基本上就是一个很基础的 <code>useSelector</code> 因为为了简便所以依赖于状态管理的一些参数，如果要实现任意值的监听。那么使用 React 本身的 <code>useSubscription</code> 即可。目前可以用于
事件的监听等等。这个对于非受控的表单作用会有很大很大。</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[a thought about hook]]></title>
            <link>/posts/2019-11-23/a-thought-of-hook/</link>
            <guid>/posts/2019-11-23/a-thought-of-hook/</guid>
            <pubDate>Fri, 22 Nov 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>这几天一直忙于各种事情，仔细思考一件事的时间真的不是很多，但是由于今天值班所以时间还是偏多的，在看完了想看的文章或者博客后，开始了继续写手势这一块的 <code>Hook</code>,
恰好遇到了一个问题，这个问题经过了我们内部讨论出有两种解决办法，两种办法都是没有问题的，各有优缺点。那么今天遇到的问题到底是什么呢？</p><h1 id="目录">目录</h1><ul><li>遇到的问题？</li><li>如何解决</li><li>是否这样的解决是好的, 如何选择</li></ul><h2 id="遇到的问题">遇到的问题</h2><p>之前我们的所有库都是开启了 <a href="https://reactjs.org/docs/hooks-rules.html#eslint-plugin">react-hook-eslint-plugin</a>, 重点是这个规则</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token string">"react-hooks/exhaustive-deps"</span><span class="token punctuation">:</span> <span class="token string">"warn"</span>
</code></pre><p>正好我这次的库我忘记去开启了就遇到了这个问题，简化一下例子</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">useZoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nodeRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 使用 nodeRef.current 作为依赖是为了当有节点的是可以重新执行 effect</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>nodeRef<span class="token punctuation">.</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">getNode</span> <span class="token operator">=</span> <span class="token parameter">node</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    nodeRef<span class="token punctuation">.</span>current <span class="token operator">=</span> node<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> getNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>这是一个基础的自定义 hook, 这个 Hook 暴露出了一个函数叫做 <code>getNode</code>, 使用这个 <code>getNode</code> 挂载到任何一个 <code>dom</code> 节点上，当 <code>node</code> 存在的时候执行一些逻辑操作, 那么此时使用这个 hook</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> getNode <span class="token operator">=</span> <span class="token function">useZoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>visible<span class="token punctuation">,</span> setVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>setVisible<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token punctuation">{</span>visible <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>getNode<span class="token punctuation">}</span><span class="token operator">></span>node<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>仔细看这个 <code>Test</code>，因为在顶层调用了 <code>useZoom</code>, 此时内部拿到的 <code>nodeRef.current = null</code>, 所以 <code>console</code> 不会走这是合理的，那么此时在点击 <code>setVisible</code>, 此时改变了
<code>visible</code>, node 节点将会显示出来，此时 getNode 将会拿到正确的信息，但是你会发现一个奇怪的现象就是为什么内部的 <code>console</code> 仍然没有打印出来？？？这该不会是 react 的 bug 吧
那么不妨在 <code>useEffect</code> 中答应一下信息看看，修改下代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">useZoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nodeRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render effect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 使用 nodeRef.current 作为依赖是为了当有节点的是可以重新执行 effect</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>nodeRef<span class="token punctuation">.</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">getNode</span> <span class="token operator">=</span> <span class="token parameter">node</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"node:"</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    nodeRef<span class="token punctuation">.</span>current <span class="token operator">=</span> node<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> getNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>第一次加载的时候，应该只会显示 <code>render effect</code>， 此时我们点击 <code>setVisible</code>, 看一下输出</p><div><img src="./static/media/1.42122356.png"/></div><p><a href="https://codesandbox.io/s/stoic-firefly-drrui">try it</a></p><p>可以看出 <code>render effect</code> 只输出了一次对不对，是不是很奇怪，明明 <code>nodeRef.current</code> 已经修改了，可是为啥这里的 <code>effect</code> 没有重新执行呢？于是我就喊了我们组的
<code>煜寒</code> 过来(此时时间比较早只有煜寒来公司了)开启<code>小黄鸭</code>调试法，结果还是没看出什么原因，但是煜寒提出了之前在组件库里开启了 Hook 规则使用 <code>ref</code> 作为依赖的时候是无效的，
我心里想应该不会吧，去年 <code>hook</code> 刚出来的时候我尝试过是可以的呀。现在不行了嘛。于是我去 condsandbox 上试验了一下，结果会有这样的提示</p><div><img src="./static/media/2.a678357b.png"/></div><h2 id="如何解决">如何解决</h2><p>这个规则明确提示了 <code>ref</code> 作为依赖是无效的，肯定是 <code>React</code> 内部做了处理，至于做了什么处理，以及为什么要做这个处理，这个在这里先不讨论。现在我们知道问题出自哪里了，就是不能把 <code>ref</code>
作为依赖，那么应该如何修改呢？其实我们的目的很简单就是当 <code>node</code> 变化时候重新 <code>re-render</code> 获取到新的节点然后做一些逻辑。那么可以这样修改</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="2,13,14,15"><span class="token keyword">function</span> <span class="token function">useZoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>node<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render zoom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render effect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 使用 nodeRef.current 作为依赖是为了当有节点的是可以重新执行 effect</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="highlighted-line">  <span class="token keyword">const</span> <span class="token function-variable function">getNode</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><span class="highlighted-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">      <span class="token function">setState</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"node:"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> getNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><a href="https://codesandbox.io/s/stoic-firefly-drrui">try it</a></p><p>首先这里有几个重要的点第一修改 <code>useRef</code> 变成 <code>useState</code>, 第二要注意的就是在 <code>getNode</code> 处，在 <code>getNode</code> 里需要信息判断，因为不判断就会造成死循环(在 class 里的话)，因为每次 setState, 都会
造成 <code>re-render</code>, 下次又 <code>setState</code>, 但是因为此时是在 <code>function component</code> 中，所以会做 <code>Object.is</code> 比较，死循环的问题不会存在，但是最好进行判断, 再次看一下输出</p><div><img src="./static/media/3.f928f31b.png"/></div><p>从输出中可以导出， <code>useEffect</code> 执行了 2 次，至于为什么会有一次输出的 <code>node: null null</code>, 这个我也不是很清楚。后面会探讨一下究竟是什么原因导致的。</p><h2 id="是否这样的解决是好的-如何选择">是否这样的解决是好的, 如何选择</h2><p>看上面的代码以及输出是已经解决了问题，对不对？那么是否这样解决就是最合理的呢？我提出了这个问题在我们组里面进行了激烈的讨论。对于这个问题有两种不同的方案，首先按照 <code>react</code> 的模式来说，导致
这个 <code>node</code> 改变的原因是 <code>visible</code> 的改变对不对？并不是其他的东西导致的(当然了也可以是其他的一些属性导致的)，那么既然是 <code>visible</code> 导致的为什么不把 <code>visible</code> 作为依赖呢？这是 <code>桃夭</code> 小姐姐
说的，对这个没有问题，由于什么原因引起的就应该把这个原因作为依赖，但是在 <code>useZoom</code> 的内部好像并不知道这个 <code>visible</code> 是什么？只知道这个 <code>node</code> 是什么，这个 node 就是 <code>visible</code> 改变导致的结果</p><p>既然不知道 visible 是什么也不能把 <code>visible</code> 传入到 <code>useZoom</code> 中，那么是否可以把这个 node 的改变交给用户呢？这就是把之前处理状态的改变交给了用户而不是框架内部，类似于 <code>&#x27;控制反转&#x27;</code> 了。此时
<code>useZoom</code> 不在存储 <code>node</code> 节点，现在 node 节点有用户传入进来。不妨修改一下代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">useZoom</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render zoom"</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"render effect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 使用 nodeRef.current 作为依赖是为了当有节点的是可以重新执行 effect</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>使用 <code>useZoom</code> 的代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useZoom</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>visible<span class="token punctuation">,</span> setVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>setVisible<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token punctuation">{</span>visible <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span><span class="token operator">></span>node<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><a href="https://codesandbox.io/s/stoic-firefly-drrui">try it</a></p><p>此时点击 <code>setVisible</code>, 发现没有 render, 这是正常的因为 <code>Test</code> 组件 <code>re-render</code> 的时候，此时 <code>ref.current</code> 仍然是 null, 所以仍然是不可行的。</p><div><img src="./static/media/4.7d7dab29.png"/></div><p>那么在修改下例子吧</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="10,11,12,13,14,15,16"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>node<span class="token punctuation">,</span> setNode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">useZoom</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>visible<span class="token punctuation">,</span> setVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>setVisible<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token punctuation">{</span>visible <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
<span class="highlighted-line">        <span class="token operator">&lt;</span>div</span><span class="highlighted-line">          ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">n</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><span class="highlighted-line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">              <span class="token function">setNode</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">            <span class="token punctuation">}</span></span><span class="highlighted-line">          <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="highlighted-line">        <span class="token operator">></span></span>          node
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p><a href="https://codesandbox.io/s/stoic-firefly-drrui">try it</a></p><div><img src="./static/media/5.4c916022.png"/></div><p>此时发现业务代码处理将变得很复杂。如果不在 ref 里面 setNode, 那么就需要记住节点在 effect 里面 setNode, 所以这样将会增加使用的难度，这样的<code>反转</code>是无意义的。</p><h2 id="conclusion">conclusion</h2><p>当需要用到 ref 这样的 api 的时候，可以看出交给用户处理是非常麻烦的，所以对于这种场景最好内置的对应的 <code>Hook</code> 里面。<em>同时要注意 <code>ref</code> 不能作为依赖！！！</em></p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[how to study]]></title>
            <link>/posts/2019-11-24/how-to-study/</link>
            <guid>/posts/2019-11-24/how-to-study/</guid>
            <pubDate>Sat, 23 Nov 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>这几天在看 twitter 的时候看到了 React 的作者是如何突破自己的以及如何在新的领域里做到随机应变的。所以有所想法，正好就在这篇博客里记下来吧</p><p>以我自己的来举个例子吧。比如在前几个公司需要开发一个 <code>sketch</code> 插件，而我对这个是完全不知道的，去网上查看了很多的资料都是 <code>OC</code> 写的，此时我的心里不由的产生了
退却，我想这个方向我一点都不熟悉，所以就给产品同学提出了另一个方案就是用 app 来代替，因为现在可以使用 js 来开发 app, 本来这个功能就不是很复杂，那做起来应该很快吧。</p><p>是的，产品因为对这块也不是很清楚，所以产品也同意了我的想法，由于页面的视觉优先出来，所以我就先去开发页面了。后来在与组内的同学进行交流的时候，他们说： 现在开发 app, 如果后面还要开发
这样的插件为什么不直接开发呢？我当时是这样说的： 因为我对 sketch 完全不熟悉，并且有时 <code>OC</code>, 对于这个语言也是没看过，那相当于从 0 开始，这样会很慢很慢。所以由于这些原因我产生了退却感。
我不想在浪费太多时间去学习一门新的语言，这样不仅浪费时间，也会延迟进度。后来组内同学说服了我，无论怎么样既然后面一定要开发的，晚痛不如早痛。是的，我觉得他们说的是对的，所以在那一段时间内
我开始大量的是看 sketch 的文档以及相关的插件具体是怎么写的，以及发布、构建的流程。</p><p>因为 sketch 是一个新的，后来发现 sketch 也可以使用 js 开发，哇，很开心。但是 sketch 的 api 实在是太多了，根本记不住。所以我就不断的去重复看文档，不断的去看，反反复复看了至少 5，6 遍才记住相关
api 的位置以及一些用法。具体属性还是每次开发的时候打开去看。</p><p>在这里有个点我想说的是与其空手撸代码，不如去看文档。我在一个技术群里面，有个同学就一直问文档上都说过的问题，我告诉他如何解决，然后问他你为什么不先去看文档呢？他说：他不想看，他就是想直接撸代码，撸代码又不是
撸猫上手就能撸。可是你文档都不看就去直接撸，这样的时间可能是你看过文档再去撸代码的几倍都不止。</p><p>所以在这里我想说的第一个问题就是：在学习一个新的知识点的时候，<code>先去看一遍官网文档</code>，可能看官网文档会花费你几个小时甚至一天的时间我认为都是值得的，这样你再次开发的时候就具有了一点的知识储备来应对，不然什么都不懂直接去
看别人的例子就去写代码，是的，你把代码写出来了，可是你写的代码真的是好的代码吗？真的不会引起 bug 吗？我看过那位同学的代码，在 <code>React</code> 中还采用 <code>Jquery</code> 的写法来写代码。如果看一遍文档我觉得完全不会出现这样的问题吧。
还有一个典型的例子，我相信写过 React 的都知道在用 useState 返回的 set 函数中会进行 <code>Object.is</code> 比较，当时那位同学组件不会 <code>render</code>, 就一直不知道为什么，他是这样写的</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token punctuation">[</span>list<span class="token punctuation">,</span> setList<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">updateXxx</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>是的这个在 class 中是会 <code>re-render</code> 的，如果是 <code>PureComponent</code>, 照样会有问题。这些在官网中都说的非常清楚了。结果因为这样的一个问题，死活找不到原因， debug 几个小时还是不知道只能寻求大家帮助。如果看了官网的介绍有了一点的知识
储备这个问题不会出现的。</p><p>所以这就是我想说的第一个，<code>在学习新的领域的时候最好先去看一遍官网，了解一下知识点在去写会更好</code></p><p>看了官网的介绍写基本的代码肯定是没有问题的，通常在做一个新的领域的时候，需求也都是相对简单的后来会慢慢的变得复杂，那么可能只有官网的是不够的，此时就可以去参考别人的代码，github 上有太多这样的代码，都可以去 clone 学习如何去组织以及如何去写。
但是即使这样我相信(包括我)很多人也都是写不出来，很多时候在看代码的是心里会想，哇这个代码写的很简单嘛。我上我也行。是的，别人的代码看起来很简单。但是当自己开始写的时候真的能写出来吗？</p><p>我经常会在 github 上写一些小项目，其实并不是说我想着这个项目瞬间能出名，有很多人会去用。我想的是通过自己去写来锻炼这个能力。看懂并一定是真的懂，写出来完全理解了才是真的懂。当你开始去写的时候，就会发现很多问题，为什么这个代码一定要在这里，在这里
有什么好处都会被挖掘出来。这样你就能很容易熟悉这一块。</p><p>所以我第二个想说的就是： <code>看懂不一定是真的懂，要写出来</code></p><p>那么是否写出来就真的足够了吗？ 要乐于交流和分享，当你懂了一个知识点的时候，你觉得你懂了。但是如果你能讲出来，把完全不懂的人讲懂了这才是真的懂，说明真的已经深入了，完全理解内部的原理了。所以在大家学习完一个知识点的时候要检验自己是否真的懂的话就学会交流
和分享。交流可以和自己的朋友或者同事来交流，把你学习到的和他们说，如果你把他们都讲懂了，那就完全没有问题了。你可能会说不一定有那么多时间去交流，别人也不一定会有空来听你来交流。那么不如来一次分享。每个公司的团队一般都会有分享这种会议，
可以分享自己学到的，也可以分享自己的经验。分享的东西不在于有多少而在于能否把一件事情说清楚。即使你分享讲了两个小时，但是就把这一件事说的很清楚也是没有问题的。但是如果每件事都是一笔带过，那么即使分享 100 次又有什么意义呢？拿我来说吧，我现在还是
属于第二种的情况，正在向第一种来过度。</p><p>那么此时有的人会问，到底是先精后广，还是先广在精。我的想法就是想深入一门无论你是写代码的，还是其他的技术领域。最好都是先深入一门，把这一项技术做的非常好了，再去进行广度。这样无论如何你都应对其中一项技术的变更。</p><p>所以我第三个想说的就是：<code>要乐于分享和交流</code></p><p>大家周末愉快</p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[dev sketch]]></title>
            <link>/posts/2019-11-26/dev-sketch/</link>
            <guid>/posts/2019-11-26/dev-sketch/</guid>
            <pubDate>Mon, 25 Nov 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>今天这篇文章主要分享一下 sketch 插件开发的一些经验和心得。</p><p>在收到任务要开发 sketch 插件的时候就大量的去寻找资料。但是发现 github 上很多都是用 <code>OC</code> 和 <code>JS</code> 混合写的。但是因为我没多少时间去学习 <code>OC</code> 的写法，
并且在 <code>sketch</code> <a href="https://developer.sketch.com/">官网</a>上也说了。<code>sketch</code> 升级的时候有可能内部的 <code>api</code> 会发生变化。但是暴露出去的 <code>js api</code> 基本是不会改变的。
所以最终决定全部采用 <code>js</code> 的写法。</p><h2 id="目录">目录</h2><ul><li>sketch 开发中遇到的问题<ul><li>如何定义菜单</li><li>如何触发 action</li><li>如何构建 webview</li><li>webview 与 sketch 是如何通信的</li><li>环境配置</li><li>构建</li><li>发布</li></ul></li><li>如何解决这些问题</li></ul><h3 id="如何定义菜单">如何定义菜单</h3><p>我们在使用 sketch 插件的时候经常会看到这些菜单。比如 antd 的 <code>kitchen</code> 插件。所有的插件都可以<a href="https://github.com/sketchplugins/plugin-directory">在这里找到</a></p><div><img src="./static/media/1.f12b94d3.jpg"/></div><p>这是一个插件的工具栏。那么这个工具栏是在哪里定义的呢？在 sketch 中有一个叫做 <code>manifest.json</code> 的文件。在这个插件中可以定义这样的一系列菜单。看下 antd 的 <code>manifest.json</code> 的
定义。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token string">"commands"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string">"script"</span><span class="token punctuation">:</span> <span class="token string">"action.js"</span><span class="token punctuation">,</span>
      <span class="token string">"handlers"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"actions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
          <span class="token string">"Startup"</span><span class="token punctuation">:</span> <span class="token string">"onStartup"</span><span class="token punctuation">,</span>
          <span class="token string">"Shutdown"</span><span class="token punctuation">:</span> <span class="token string">"onShutdown"</span><span class="token punctuation">,</span>
          <span class="token string">"ToggleInspectorVisibility.begin"</span><span class="token punctuation">:</span> <span class="token string">"onToggleInterface"</span><span class="token punctuation">,</span>
          <span class="token string">"OpenDocument"</span><span class="token punctuation">:</span> <span class="token string">"onOpenDocument"</span><span class="token punctuation">,</span>
          <span class="token string">"CloseDocument"</span><span class="token punctuation">:</span> <span class="token string">"onCloseDocument"</span><span class="token punctuation">,</span>
          <span class="token string">"SelectionChanged.finish"</span><span class="token punctuation">:</span> <span class="token string">"onSelectionChanged"</span><span class="token punctuation">,</span>
          <span class="token string">"TextChanged"</span><span class="token punctuation">:</span> <span class="token string">"onTextChanged"</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string">"script"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>
      <span class="token string">"identifier"</span><span class="token punctuation">:</span> <span class="token string">"showToolbar"</span><span class="token punctuation">,</span>
      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"切换工具栏"</span><span class="token punctuation">,</span>
      <span class="token string">"shortcut"</span><span class="token punctuation">:</span> <span class="token string">"ctrl alt k"</span><span class="token punctuation">,</span>
      <span class="token string">"handler"</span><span class="token punctuation">:</span> <span class="token string">"onShow"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string">"script"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>
      <span class="token string">"identifier"</span><span class="token punctuation">:</span> <span class="token string">"uploadArtboards"</span><span class="token punctuation">,</span>
      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Artboard 上传"</span><span class="token punctuation">,</span>
      <span class="token string">"shortcut"</span><span class="token punctuation">:</span> <span class="token string">"ctrl alt a"</span><span class="token punctuation">,</span>
      <span class="token string">"handler"</span><span class="token punctuation">:</span> <span class="token string">"onUploadArtboards"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string">"script"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>
      <span class="token string">"identifier"</span><span class="token punctuation">:</span> <span class="token string">"syncSymbols"</span><span class="token punctuation">,</span>
      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Symbol 同步"</span><span class="token punctuation">,</span>
      <span class="token string">"shortcut"</span><span class="token punctuation">:</span> <span class="token string">"ctrl alt w"</span><span class="token punctuation">,</span>
      <span class="token string">"handler"</span><span class="token punctuation">:</span> <span class="token string">"onSyncSymbols"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string">"script"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>
      <span class="token string">"identifier"</span><span class="token punctuation">:</span> <span class="token string">"resource"</span><span class="token punctuation">,</span>
      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Iconfont"</span><span class="token punctuation">,</span>
      <span class="token string">"shortcut"</span><span class="token punctuation">:</span> <span class="token string">"ctrl alt i"</span><span class="token punctuation">,</span>
      <span class="token string">"handler"</span><span class="token punctuation">:</span> <span class="token string">"onResource"</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>other commands
<span class="token punctuation">]</span>
</code></pre><p>这个代码中 <code>name</code> 属性代表的是菜单的名字。可以看出完全符合上述截图的部分。需要注意的是这个定义的每个 <code>action</code> 都是定义在 <code>commands</code> 这个对象下面。
<code>identifier</code> 是每个定义的菜单的标志。 <code>shortcut</code> 是短命令。可以用过快捷点来快速点击菜单。<code>handler</code> 为函数，就是点击这个菜单需要执行的函数。这个函数来自于
<code>script</code> 这个字段定义的文件中。比如此时 <code>script</code> 里是 <code>index.js</code>, 那么这个函数应该在这个文件中是可以查到的。<a href="https://developer.sketch.com/plugins/">具体其他的查看官网</a></p><h3 id="如何触发-action">如何触发 action</h3><p>如果仔细看一下上述代码，你可能会注意到有这样一个代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token punctuation">{</span>
  <span class="token string">"script"</span><span class="token punctuation">:</span> <span class="token string">"action.js"</span><span class="token punctuation">,</span>
  <span class="token string">"handlers"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"actions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"Startup"</span><span class="token punctuation">:</span> <span class="token string">"onStartup"</span><span class="token punctuation">,</span>
      <span class="token string">"Shutdown"</span><span class="token punctuation">:</span> <span class="token string">"onShutdown"</span><span class="token punctuation">,</span>
      <span class="token string">"ToggleInspectorVisibility.begin"</span><span class="token punctuation">:</span> <span class="token string">"onToggleInterface"</span><span class="token punctuation">,</span>
      <span class="token string">"OpenDocument"</span><span class="token punctuation">:</span> <span class="token string">"onOpenDocument"</span><span class="token punctuation">,</span>
      <span class="token string">"CloseDocument"</span><span class="token punctuation">:</span> <span class="token string">"onCloseDocument"</span><span class="token punctuation">,</span>
      <span class="token string">"SelectionChanged.finish"</span><span class="token punctuation">:</span> <span class="token string">"onSelectionChanged"</span><span class="token punctuation">,</span>
      <span class="token string">"TextChanged"</span><span class="token punctuation">:</span> <span class="token string">"onTextChanged"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>仔细看下这个定义了一个叫做 <code>handlers</code> 的对象。里面有一个叫做 <code>actions</code>, 这个 <code>actions</code> 的定义明显和上述菜单的定义不一样对吗？上面的菜单的定义是这样的</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token punctuation">{</span>
  <span class="token string">"script"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>
  <span class="token string">"identifier"</span><span class="token punctuation">:</span> <span class="token string">"resource"</span><span class="token punctuation">,</span>
  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Iconfont"</span><span class="token punctuation">,</span>
  <span class="token string">"shortcut"</span><span class="token punctuation">:</span> <span class="token string">"ctrl alt i"</span><span class="token punctuation">,</span>
  <span class="token string">"handler"</span><span class="token punctuation">:</span> <span class="token string">"onResource"</span>
<span class="token punctuation">}</span>
</code></pre><p>那么这里的 <a href="https://developer.sketch.com/plugins/actions">actions</a> 是怎么来的呢？这些 <code>actions</code> 都是 <code>sketch</code> 内部暴露出来的。我们可以通过监听这个
<code>action</code> 来实现一些功能。比如 <code>OpenDocument</code> 在打开一个 sketch 文件的时候做一些初始化的操作。sketch 也内置了可以直接执行代码。</p><div><img src="./static/media/2.7eae8f95.png"/></div><p>点击运行代码就可以直接运行一些脚本。所以如果需要用到 <code>sketch</code> 内部命令的时候, 就可以定义这些 <code>action</code>, 然后在对应的 <code>js</code> 文件中声明并且 export 出来。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">// onOpenDocument</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">onOpenDocument</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"open document success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="如何构建-webwiew">如何构建 webwiew</h3><p>因为在 github 上很多项目都是用 <code>OC</code> 来写的。所以这里我不会介绍如何使用 <code>OC</code> 来创建一个 <code>webview</code> 。这里的代码都是 <code>js</code> 写的。接下来介绍一个主要的用于创建 <code>webview</code> 的
包 <a href="https://github.com/skpm/sketch-module-web-view">skpm-module-web-view</a> 。安装好这个包可以使用这个包初始化模板。比如创建一个 <code>webview</code> 的模板。这个使用了
with-webview 的模板</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="">skpm create my<span class="token operator">-</span>plugin<span class="token operator">-</span>name <span class="token operator">--</span>template<span class="token operator">=</span>skpm<span class="token operator">/</span><span class="token keyword">with</span><span class="token operator">-</span>webview
</code></pre><p>关于这个 webview 的文档主要需要关注的是两部分。</p><p>第一部分是 <a href="https://github.com/skpm/sketch-module-web-view/blob/master/docs/browser-window.md">brower-window</a> 如何创建一个 webview,
并且如何加载一个页面。这个页面可以是来自于 server 也可以是来自于本地。</p><h3 id="webview-与-sketch-是如何通信的">webview 与 sketch 是如何通信的</h3><p>第二部分是 webview 与 sketch <a href="https://github.com/skpm/sketch-module-web-view/blob/master/docs/communication-plugin-webview.md">如何通信</a> 比如 webview 给 sketch
发送信息</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="">window<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"nativeLog"</span><span class="token punctuation">,</span> <span class="token string">"Called from the webview"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// you can pass any argument that can be stringified</span>
window<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"nativeLog"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">:</span> b
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// you can also pass multiple arguments</span>
window<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"nativeLog"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// `window.postMessage` returns a Promis with the array of results from plugin listeners</span>
window<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"nativeLog"</span><span class="token punctuation">,</span> <span class="token string">"blabla"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// res === ['result']</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>使用 <code>postMessage</code> 来发送消息到 <code>sketch</code> 中。在 sketch 中通过</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">var</span> sketch <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sketch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

browserWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"nativeLog"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  sketch<span class="token punctuation">.</span><span class="token constant">UI</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token string">"result"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>来接收 <code>web-view</code> 发送过来的消息。</p><p>sketch 给 webView 发送消息。首先在 webview 中定义方法。注意需要挂载到 <code>window</code> 上</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="">window<span class="token punctuation">.</span><span class="token function-variable function">someGlobalFunctionDefinedInTheWebview</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>在 <code>sketch</code> 中调用 <code>executeJavaScript</code> 方法。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="">browserWindow<span class="token punctuation">.</span>webContents
  <span class="token punctuation">.</span><span class="token function">executeJavaScript</span><span class="token punctuation">(</span><span class="token string">'someGlobalFunctionDefinedInTheWebview("hello")'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// do something with the result</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>这里需要注意的是传递给 function 中的值一定要是一个 string, 可以使用 <code>JSON.stringify()</code> 来转成 <code>string</code></p><h3 id="环境配置">环境配置</h3><p>有的时候是需要进行环境配置的。因为可能在测试环境需要加载测试环境的 <code>url</code>, 正式环境需要加载正式环境的 <code>url</code>。所以是需要区分的。那么应该如何去做呢？
在 Node 中通过大家会使用 <code>process.env</code> 这个。在 <code>sketch</code> 中如果使用了 <code>sketch-module-web-view</code>, 那么是可以自定义 webpack 环境的。所以想设置
不同的环境可以这样来做。首先需要建立一个名字叫 <code>webpack.skpm.config.js</code> 文件。里面的代码</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>EnvironmentPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token constant">NODE_ENV</span><span class="token punctuation">:</span> <span class="token string">"development"</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>通过这样配置可以设置 <code>NODE_ENV</code> 默认为 <code>development</code>。这个大家也可以设置其他的。这个就是为了内部进行环境的区分的。然后可以配置相应的命令。在 <code>package.json</code> 中</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"NODE_ENV=development skpm-build --watch --run"</span><span class="token punctuation">,</span>
<span class="token string">"start:test"</span><span class="token punctuation">:</span> <span class="token string">"NODE_ENV=test skpm-build --watch --run"</span><span class="token punctuation">,</span>
<span class="token string">"start:pro"</span><span class="token punctuation">:</span> <span class="token string">"NODE_ENV=production  yarn start"</span><span class="token punctuation">,</span>
</code></pre><p>可以通过不同的命令来运行不同的环境。到这里基本的操作应该都是可以完成的。</p><h3 id="构建和发布">构建和发布</h3><p>如果是在 github 上的话可以直接使用 <code>skpm</code> 内置的构建命令以及发布，其他的不同担心。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token string">"postinstall"</span><span class="token punctuation">:</span> <span class="token string">"npm run build &amp;&amp; skpm-link"</span>
</code></pre><p>但是我这里主要讲的是在公司内部如何发布这个。首先可以查看<a href="https://developer.sketch.com/plugins/publish-a-plugin">官网发布流程</a>。怕有些人会和一样一开始都是不怎么理解
这个发布。所以我详细讲解一下这个发布。首先看官网介绍需要一个 <code>appcast.xml</code> 的文件。这个文件可以选择放在服务器中。只要可以访问到就可以。其实可以看下 <code>kitchen</code> 的 <code>appcast.xml</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token string">"appcast"</span><span class="token punctuation">:</span> <span class="token string">"https://kitchen.alipay.com/appcast.xml"</span><span class="token punctuation">,</span>
</code></pre><p>点击这个是完全可以访问的。那么在内部比如我们也生成这样一个 <code>xml</code> 文件。这个可以让服务端帮你生成。比如生成的地址是 <code>http://xxx.yyy.com/appcast.xml</code> 。然后在
<code>manifest.json</code> 文件中定义这样一个字段叫做 <code>appcast</code> 这个字段的 value 就是这个 url。那么这个里面应该放哪些内部呢？不妨以 <code>kitchen</code> 为例子。</p><div><img src="./static/media/3.234ad5a4.png"/></div><p>可以看出每个 <code>item</code> 下面都有每个版本的具体包的地址，所以这是必要的。在 <code>appcast.xml</code> 中应该包含每个版本的信息，包括<code>版本号</code>以及相应的包的地址。当然也可以加上每个
版本的描述信息。当发布了一个新的版本后。在 sketch 中就会显示有新的版本需要更新。</p><div><img src="./static/media/4.91119792.png"/></div><h3 id="结束语">结束语</h3><p>上面就是在开发 <code>sketch</code> 插件中一个流程需要注意的一些基本操作。后面还是遇到很多问题的，那么详细的文档都可以参考<a href="https://developer.sketch.com/plugins/reference">api 文档</a>
在这个文档中介绍了很多功能。如何去获取图层、选中的画板、创建画板等等。以及导出导入这些。当然目前 js 开放的 api 不是特别的多，但是很多小功能都是可以实现的。如果发现有不能实现的
可以提需求给 <code>sketch</code> 的。</p><p>最后就是介绍一个 sketch 讨论的网站。很多人会在<a href="https://sketchplugins.com/">上面</a>讨论开发 <code>sketch</code> 遇到的问题 </p></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[随文]]></title>
            <link>/posts/2019-11-27/suiwen/</link>
            <guid>/posts/2019-11-27/suiwen/</guid>
            <pubDate>Tue, 26 Nov 2019 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<div><p>今天早上打开手机，看到一条惊人的新闻就是 <code>高以翔</code> 录节目的过程中出现了意外。这个新闻真的令人很意外。虽然我没有关注这个节目，
但是还是感到吃惊。在坐地铁的时候翻了下其他的新闻，很多都是传 <code>高以翔</code> 抢救无效走了。但是我还是不太敢相信，一个人怎么说走就走了呀。生命真的是如此的
脆弱。很多新闻都在说那个节目很可怕，很多明星睡觉都很少很少，并且有的还需要主动去吸氧。看起来真的太可怕了，既然这个节目运动量如此巨大，为什么不具备良好的
医疗设备或者条件呢？这种难道都不是应该提前都准备好的吗？等出了意外才知道这个地方准备的不周到吗？我只是茫茫人海中的一粒沙子，我没有能力去这些人去做什么。只能在这里
祈祷。🙏🙏🙏</p><p>今天想写这篇博文的原因就是出自这个，这篇文章并不是技术文章。如果需要看技术的童鞋可以跳过这里。这篇文章主要是为了给大家传播一些正能量的观点。希望大家珍惜现在，珍惜生命。
俗话说：没经历过死亡的人是不知道活着是多么的幸福。这话听起来是对的，但是真的不是每个人都会去经历一次，有可能这一次可能就不在了。所以即使无法理解这句话，也要请每个人珍惜
自己的<code>生命</code>。</p><p>最近都在喜马拉雅听读者，之前我特别喜欢听<code>鬼故事</code>，也会去吓人。很多时候吓人是很容易把人吓死的，即使不吓死有可能也会吓出毛病来。自己也会有所感受。所以这周我就删掉了所有这些没有
营养的故事。听起了<code>读者</code>， <code>读者</code>这本杂志，很多人都应该看过，尤其是 90 后，应该都是那个时代过来的。以前下课的时候总是会去买这些杂志来看，从这些杂志中可以看到很多好的文章，学习到
新的知识。当时相应的杂志是不是还有<code>意林</code>啊。虽然我不知道这些杂志怎么就不见了(有可能还在，可能我没有找到吧, 或者我已经不去看了)。至于后面的读者的故事我可以陆陆续续分享给大家，在这个技术
博客在开一个软文类。希望可以和大家一起从书中学习，共同进步。</p><p>回到今天的事情，从现在的很多新闻中相信大家都看到最多的就是某某某公司程序员猝死了。如果你看到这个博客，那说明 <code>90%</code> 的可能性你是一个程序员。所以这篇文章也是针对正在看这篇文章的你。请大家
一定要珍惜生命。那么珍惜生命从哪些做起呢？我在这里讲讲我的做法吧。</p><p>我特别<code>怕高</code>。我相信怕高的人都知道站在高处的感受是什么样子的吧。我来描述一下给不怕高的人听一下吧。如果只是站在 2–3 楼那可能还好，因为这是的楼层并不是很高。但是如果超过了这个高度就会觉得很
高了，不同的人可能对这个高度是不一样的。我的高度可能就是楼层 3 层左右。我家是在 6 楼(我家猫也怕高),每次我向下看的时候都觉得自己会掉下去，这应该是怕高的人都有的感觉吧。并且看的越久，这样的
感觉越强烈。并且腿是软的，完全走不动路的。所以之前不是有一些报道嘛，说有的人被吓的走不动路了？看到一些东西为啥不跑呢? 当你真正的遇到你所恐惧的东西的时候，身体的本能并不是跑，而是软掉了。
腿一下子就反应出来了，根本不会有力气跑。你不要不信，除非你没有恐惧的东西。对于怕高的我来说这是肯定的。</p><p>因为我比较怕高，所以我不会去玩一些特别刺激的东西。比如<code>跳跳机</code>这种我是不敢玩的，我玩过一次然后就再也没玩过，玩的那一次还是全程闭眼的。首先我比较怕高，所以我不敢再玩了。再者，我第一次玩那个跳跳机的
时候，在过程中听到了坐的那个椅子扣子的声音，我当时吓得半死，我以为是没扣紧，我是不是要凉了。所以后来我再也没玩过，包括欢乐谷的<code>大摆锤</code>，我不会去尝试。有的人会说可以尝试一下，真的很好玩。但是
我不想去冒险。尤其是自己的生命去冒险。</p><p>在上面说过我之前喜欢听鬼故事，现在已经不听了。别以为我不怕，我很怕的。尤其是这些方面的，牛鬼蛇神啊之类的。先声明：<code>我坚决拥护中国共产党的领导，坚信马克思列宁主义，毛泽东思想、邓小平理论、三个代表重要思想</code><code>科学发展观，习近平新时代中国特色社会主义思想</code>。但是我有的时候也会相信这些<code>牛鬼蛇神</code>.主要这个是古代就流传下来的。古人很多说的都是有道理的。所以真的让我完全不信，还是很难的。既然我这么怕为什么还要去听呢？
我感觉就是自己在作死。听起来真的很刺激，但是经常会自己吓到自己。晚上下班回家的路上，到了小区的时候，小区基本上就我一个人在走路。此时很容易会联想到鬼故事中的场景，越想越害怕，越害怕越想。
于是我就加快了脚步，以迅雷不及掩耳之势冲到家里。到了家里，心里就放了一大截了，因为我有一只<code>胖胖的猫</code>，据说猫能看到人看不见的东西。每次看到我家猫睡的和猪一样，我就知道家里平安无事，简直美滋滋。</p><p>再说一个就是作为程序员或者不是程序员吧。大家天天都会有的问题 - <code>熬夜</code>。不知道其他人是如何看待熬夜这件事情的。反正对我来说，我以前是很喜欢熬夜的。每天晚上 2 点以后睡觉的。但是这样一段时间后，首先
皮肤会很差，然后白天精神是真的不好。会很困很困的。很多人会说，那是你睡的太少了，多睡会不就行了嘛。如果这样的真的能解决问题，我就不会在这里重点说这个了。举个例子吧。</p><p>我在大学的时候我记得是大三的时候，每个月会有一晚去网吧和高三的同学开黑。每次玩都是一整夜的玩，一直到早上 7 点。其实到了半夜就会发现，真的很困，即使在打游戏。如果你去过网吧，同时也包过夜(不要瞎想)那么
你在网吧会看到包夜的人中玩游戏的人真的没有那么多。很多人玩着玩着就睡着了，可能就会睡到天亮。我包夜的经常亲眼所见很多人都是这样的。好了，继续说睡得时间的问题吧。同样是睡了 8 小时，白天睡觉
和晚上睡觉是一样的吗？我相信很多人都会发现这明显是不一样的。我每次包夜回来，白天别睡睡 8 小时，睡 10 小时感觉都累的很。一整天不要说去学习了，就连吃饭都懒得吃就想在床上养着继续睡觉。有可能你
晚上多睡 1 小时会是白天 2 小时的效果。所以我现在就不会熬夜了，我基本上每天 12 点的时候就会睡觉，然后夏天是准时的 7:30 起床。冬天是 8 点起床，不分是周末还是工作日。日复一日。现在可能早就习惯了
这样。</p><p>我在多说一点有多少人熬夜是为了学习或者说是工作的呢？我不相信公司会给你安排没有工作到夜里 2 点的事情。基本上都是到家躺在床上的时候，拿起手机，刷刷手机、看看抖音、看看新闻。再者就是来一盘王者荣耀
嘛。打一盘输了，你心里在想今天要是不赢一局我就不睡觉，然后又输了。在打一局，哎呀，终于赢啦。赢了之后发现，赢了这局，我心里还是不爽，我还要再赢一局。于是又开心的玩起来了。等这局结束后
看了一眼时间发现都已经快 4 点了啊。我的天，现在才睡觉。一直睡到 12 点才起来。因为真的很少人会在 12 点的时候会去学习的，反正我是不会的。但是如果此时你去睡觉，早上 8 点起来回怎么样呢？
你会发现起来的就你一个，哈哈哈哈哈，你想找别人玩都找不到。那么这么美好的早晨总不能起床看电视吧。想看的电视剧没更新，晚上才会有？然后选择去看直播，这么早谁会直播啊，直播都会选择在下午或者是晚上
吧。谁会在早上给你开直播呢？对不对，这样你发现什么都做不了了，于是开开心心的吃个早饭。好了到这里你就比别人健康了，早饭真的很重要。大家一定要记得吃早饭啊，吃完早饭后，因为没有娱乐的啊，所以
就会去看看书啊，看看博客啊，写写代码啊。一天中最好的时间你用在学习上，别人用在了睡觉了。长此以往你会发现，你变的越来越健康，越来越优秀。这个收益是巨大的。</p><p>所以无论是从哪个方面来说，都不要熬夜。</p><p>最后在强调一下 - <code>珍惜生命，从现在开始</code></p></div>]]></content:encoded>
        </item>
    </channel>
</rss>