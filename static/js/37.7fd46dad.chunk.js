(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{99:function(n,a,s){"use strict";s.r(a),s.d(a,"readingTime",function(){return k}),s.d(a,"default",function(){return m}),s.d(a,"tableOfContents",function(){return d}),s.d(a,"frontMatter",function(){return h});var e=s(13),t=s(18),p=s(19),o=s(21),c=s(20),u=s(22),l=s(0),i=s.n(l),r=s(17),k={text:"9 min read",minutes:8.065,time:483900,words:1613},m=function(n){function a(n){var s;return Object(t.a)(this,a),(s=Object(o.a)(this,Object(c.a)(a).call(this,n))).layout=null,s}return Object(u.a)(a,n),Object(p.a)(a,[{key:"render",value:function(){var n=this.props,a=n.components;Object(e.a)(n,["components"]);return i.a.createElement(r.MDXTag,{name:"wrapper",components:a},i.a.createElement(r.MDXTag,{name:"p",components:a},i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSubscription")," \u5373\u8ba2\u9605\u6a21\u5f0f\uff0c\u8fd9\u662f ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"react")," \u81ea\u8eab\u63d0\u4f9b\u7684 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Hook"),", \u672c\u6587\u4e3b\u8981\u901a\u8fc7\u51e0\u4e2a\u65b9\u9762\u6765\u4ecb\u7ecd\u8fd9\u4e2a ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Hook"),", \u5927\u5bb6\u4e5f\u53ef\u4ee5\u81ea\u884c\u53c2\u8003",i.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://github.com/facebook/react/blob/master/packages/use-subscription/README.md"}},"\u5b98\u7f51")),i.a.createElement(r.MDXTag,{name:"h2",components:a,props:{id:"\u76ee\u5f55"}},"\u76ee\u5f55"),i.a.createElement(r.MDXTag,{name:"ul",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a useSubscription",i.a.createElement(r.MDXTag,{name:"ul",components:a,parentName:"li"},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"When should you NOT use this?"),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"What types of subscriptions can this support?"))),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"useSubscription \u7684\u5185\u90e8\u5b9e\u73b0"),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"\u624b\u52a8\u5b9e\u73b0\u4e00\u4e2a useSubscription")),i.a.createElement(r.MDXTag,{name:"h3",components:a,props:{id:"\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a-usesubscription"}},"\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a useSubscription"),i.a.createElement(r.MDXTag,{name:"p",components:a},i.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://github.com/facebook/react/tree/master/packages/use-subscription"}},"useSubscription")," \u7684\u51fa\u73b0\u4e3b\u8981\u662f\u4e3a\u4e86\u5728 React \bconcurrent mode \u4e0b\u53ef\u4ee5\u5b89\u5168\u7684\u7ba1\u7406\u72b6\u6001\u3002\n\u4e3b\u8981\u7528\u4e8e\u8bfb\u53d6\u67d0\u4e2a\u503c\uff0c\u503c\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u53ef\u4ee5\u540c\u6b65\u66f4\u65b0\u76f8\u5e94\u7684\u7ec4\u4ef6\u7136\u540e\u5c55\u793a\u51fa\u6765\u3002"),i.a.createElement(r.MDXTag,{name:"h4",components:a,props:{id:"when-should-you-not-use-this"}},"When should you NOT use this?"),i.a.createElement(r.MDXTag,{name:"ul",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Redux/Flux stores should use the context API instead."),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"I/O subscriptions (e.g. notifications) that update infrequently should use a mechanism like react-cache instead."),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Complex libraries like Relay/Apollo should manage subscriptions manually with the same techniques which this library uses under the hood (as referenced here) in a way that is most optimized for their library usage.")),i.a.createElement(r.MDXTag,{name:"h4",components:a,props:{id:"what-types-of-subscriptions-can-this-support"}},"What types of subscriptions can this support?"),i.a.createElement(r.MDXTag,{name:"p",components:a},"This abstraction can handle a variety of subscription types, including:"),i.a.createElement(r.MDXTag,{name:"ul",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Event dispatchers like HTMLInputElement."),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Custom pub/sub components like Relay\u2019s FragmentSpecResolver."),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ul"},"Observable types like RxJS BehaviorSubject and ReplaySubject. (Types like RxJS Subject or Observable are not supported, because they provide no way to read the \u201ccurrent\u201d value after it has been emitted.)")),i.a.createElement(r.MDXTag,{name:"p",components:a},"Note that JavaScript promises are also not supported because they provide no way to synchronously read the \u201ccurrent\u201d value."),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u4ee5\u4e0a\u4fe1\u606f\u90fd\u6765\u81ea\u5b98\u7f51"),i.a.createElement(r.MDXTag,{name:"h3",components:a,props:{id:"usesubscription-\u7684\u5185\u90e8\u5b9e\u73b0"}},"useSubscription \u7684\u5185\u90e8\u5b9e\u73b0"),i.a.createElement(r.MDXTag,{name:"p",components:a},i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSubscription")," \u7684",i.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://github.com/facebook/react/blob/master/packages/use-subscription/src/useSubscription.js"}},"\u5185\u90e8\u4ee3\u7801"),"\u5f88\u7b80\u5355\uff0c\u4e0d\u8d85\u8fc7 20 \u884c\uff0c\u5728\u5185\u90e8\u5b9e\u73b0\u5bf9\u4efb\u610f\u7684\u503c\u7684\u8ba2\u9605"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"24,25,26,27,28,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47",dangerouslySetInnerHTML:{__html:'<span class="token keyword">import</span> <span class="token punctuation">{</span> useDebugValue<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Hook used for safely managing subscriptions in concurrent mode.</span>\n<span class="token comment">//</span>\n<span class="token comment">// In order to avoid removing and re-adding subscriptions each time this hook is called,</span>\n<span class="token comment">// the parameters passed to this hook should be memoized in some way\u2013</span>\n<span class="token comment">// either by wrapping the entire params object with useMemo()</span>\n<span class="token comment">// or by wrapping the individual callbacks with useCallback().</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> useSubscription<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// (Synchronously) returns the current value of our subscription.</span>\n  getCurrentValue<span class="token punctuation">,</span>\n\n  <span class="token comment">// This function is passed an event handler to attach to the subscription.</span>\n  <span class="token comment">// It should return an unsubscribe function that removes the handler.</span>\n  subscribe\n<span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">|</span>\n  <span class="token function-variable function">getCurrentValue</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Value<span class="token punctuation">,</span>\n  <span class="token function-variable function">subscribe</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">:</span> Function</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token operator">|</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Value <span class="token punctuation">{</span>\n  <span class="token comment">// Read the current value from our subscription.</span>\n  <span class="token comment">// When this value changes, we\'ll schedule an update with React.</span>\n  <span class="token comment">// It\'s important to also store the hook params so that we can check for staleness.</span>\n  <span class="token comment">// (See the comment in checkForUpdates() below for more info.)</span>\n<span class="highlighted-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span><span class="highlighted-line">    getCurrentValue<span class="token punctuation">,</span></span><span class="highlighted-line">    subscribe<span class="token punctuation">,</span></span><span class="highlighted-line">    value<span class="token punctuation">:</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="highlighted-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n  <span class="token keyword">let</span> valueToReturn <span class="token operator">=</span> state<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n\n  <span class="token comment">// If parameters have changed since our last render, schedule an update with its current value.</span>\n<span class="highlighted-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span></span><span class="highlighted-line">    state<span class="token punctuation">.</span>getCurrentValue <span class="token operator">!==</span> getCurrentValue <span class="token operator">||</span></span><span class="highlighted-line">    state<span class="token punctuation">.</span>subscribe <span class="token operator">!==</span> subscribe</span><span class="highlighted-line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">    <span class="token comment">// If the subscription has been updated, we\'ll schedule another update with React.</span></span><span class="highlighted-line">    <span class="token comment">// React will process this update immediately, so the old subscription value won\'t be committed.</span></span><span class="highlighted-line">    <span class="token comment">// It is still nice to avoid returning a mismatched value though, so let\'s override the return value.</span></span><span class="highlighted-line">    valueToReturn <span class="token operator">=</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line"></span><span class="highlighted-line">    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span><span class="highlighted-line">      getCurrentValue<span class="token punctuation">,</span></span><span class="highlighted-line">      subscribe<span class="token punctuation">,</span></span><span class="highlighted-line">      value<span class="token punctuation">:</span> valueToReturn</span><span class="highlighted-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">  <span class="token punctuation">}</span></span>\n  <span class="token comment">// Display the current value for this hook in React DevTools.</span>\n  <span class="token function">useDebugValue</span><span class="token punctuation">(</span>valueToReturn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// It is important not to subscribe while rendering because this can lead to memory leaks.</span>\n  <span class="token comment">// (Learn more at reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects)</span>\n  <span class="token comment">// Instead, we wait until the commit phase to attach our handler.</span>\n  <span class="token comment">//</span>\n  <span class="token comment">// We intentionally use a passive effect (useEffect) rather than a synchronous one (useLayoutEffect)</span>\n  <span class="token comment">// so that we don\'t stretch the commit phase.</span>\n  <span class="token comment">// This also has an added benefit when multiple components are subscribed to the same source:</span>\n  <span class="token comment">// It allows each of the event handlers to safely schedule work without potentially removing an another handler.</span>\n  <span class="token comment">// (Learn more at https://codesandbox.io/s/k0yvr5970o)</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> didUnsubscribe <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">checkForUpdates</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// It\'s possible that this callback will be invoked even after being unsubscribed,</span>\n      <span class="token comment">// if it\'s removed as a result of a subscription event/update.</span>\n      <span class="token comment">// In this case, React will log a DEV warning about an update from an unmounted component.</span>\n      <span class="token comment">// We can avoid triggering that warning with this check.</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>didUnsubscribe<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// We use a state updater function to avoid scheduling work for a stale source.</span>\n      <span class="token comment">// However it\'s important to eagerly read the currently value,</span>\n      <span class="token comment">// so that all scheduled work shares the same value (in the event of multiple subscriptions).</span>\n      <span class="token comment">// This avoids visual "tearing" when a mutation happens during a (concurrent) render.</span>\n      <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">prevState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token comment">// Ignore values from stale sources!</span>\n        <span class="token comment">// Since we subscribe an unsubscribe in a passive effect,</span>\n        <span class="token comment">// it\'s possible that this callback will be invoked for a stale (previous) subscription.</span>\n        <span class="token comment">// This check avoids scheduling an update for that stale subscription.</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>\n          prevState<span class="token punctuation">.</span>getCurrentValue <span class="token operator">!==</span> getCurrentValue <span class="token operator">||</span>\n          prevState<span class="token punctuation">.</span>subscribe <span class="token operator">!==</span> subscribe\n        <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> prevState<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// Some subscriptions will auto-invoke the handler, even if the value hasn\'t changed.</span>\n        <span class="token comment">// If the value hasn\'t changed, no update is needed.</span>\n        <span class="token comment">// Return state as-is so React can bail out and avoid an unnecessary render.</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> prevState<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>prevState<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>checkForUpdates<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Because we\'re subscribing in a passive effect,</span>\n    <span class="token comment">// it\'s possible that an update has occurred between render and our effect handler.</span>\n    <span class="token comment">// Check for this and schedule an update if work has occurred.</span>\n    <span class="token function">checkForUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      didUnsubscribe <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>getCurrentValue<span class="token punctuation">,</span> subscribe<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Return the current value for our caller to use while rendering.</span>\n  <span class="token keyword">return</span> valueToReturn<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u4e0d\u59a8\u5bf9\u6e90\u7801\u8fdb\u884c\u5206\u6790\uff0c\u9996\u5148\u5173\u6ce8"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  getCurrentValue<span class="token punctuation">,</span>\n  subscribe<span class="token punctuation">,</span>\n  value<span class="token punctuation">:</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u8fd9\u91cc\u628a ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"props")," \u8f6c\u6362\u6210 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"state")," \u6765\u5b58\u50a8\uff0c\u8fd9\u4e2a\u76f8\u5f53\u4e8e class \u4e2d\u7684 props \u8f6c\u6210 state \u662f\u4e00\u6837\u7684\u3002\u90a3\u4e3a\u4ec0\u4e48\u9700\u8981\u8fd9\u4e48\u505a\u5462\uff1f\n\u5728 class \u4e2d\u628a props \u540c\u6b65\u6210 state \u7684\u5730\u65b9\u6709\u4e09\u4e2a\u58f0\u660e\u5468\u671f\u7684\u94a9\u5b50\u53ef\u4ee5\u505a\u5230\uff0c"),i.a.createElement(r.MDXTag,{name:"ol",components:a},i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"\u4e00\u4e2a\u662f\u5df2\u7ecf\u6807\u8bb0\u4e3a ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"unsafe")," \u7684 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"componentWillReceiveProps")," \u5728\u63a5\u6536\u5230\u65b0\u7684 props \u7684\u65f6\u5019\u53ef\u4ee5\u8f6c\u6362\u6210 state,"),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"\u53e6\u5916\u662f ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"componentDidUpdate")," \u5728\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5bf9 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"this.props")," \u548c ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"pre.props")," \u8fdb\u884c\u6bd4\u8f83\uff0c\u7136\u540e\u5728\u5185\u90e8\u8fdb\u884c ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"setState")),i.a.createElement(r.MDXTag,{name:"li",components:a,parentName:"ol"},"\u662f\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\u5373 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"getDrivedStateFromProps")," \u5728\u8fd9\u4e2a\u9759\u6001\u65b9\u6cd5\u4e2d\u8fd4\u56de\u76f8\u5e94\u7684 state.")),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u8fd9\u4e09\u4e2a\u65b9\u6cd5\u6267\u884c\u7684\u987a\u5e8f\u662f\u4e0d\u4e00\u6837\u7684\u3002\u4f46\u662f\u5728\u51fd\u6570\u7ec4\u4ef6\u4e2d\uff0c\u6de1\u5316\u4e86\u751f\u547d\u5468\u671f\u7684\u6982\u5ff5\uff0c\u90a3\u4e48\u5982\u4f55\u6a21\u62df ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"getDrivedStateFromProps")," \u6216 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"componentWillReceiveProps")," \u5462\u3002\n\u5982\u679c\u9700\u8981\u6a21\u62df\u8fd9\u4e24\u4e2a\u751f\u547d\u5468\u671f\u7684\u8bdd\uff0c\u90a3\u4e48\u53c8\u60f3\u505a\u4f18\u5316\uff0c\u5c31\u9700\u8981\u6bd4\u8f83\u4e0a\u4e00\u6b21\u7684\u503c\u548c\u4e0b\u4e00\u6b21\u7684\u503c\uff0c\u4e0a\u4e00\u6b21\u7684\u503c\u5b58\u50a8\u5728\u54ea\u91cc\u5462\uff1f\u6b64\u65f6\u5c31\u53ef\u4ee5\u5b58\u50a8\u5230 state \u4e2d\uff0c\u7136\u540e\u4e0b\u4e00\u6b21 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"render")," \u7684\u65f6\u5019\uff0c\n\u6bd4\u8f83\u8fd9\u4e00\u6b21\u7684 props \u548c state \u5982\u679c\u4e0d\u4e00\u6837\u5219\u91cd\u65b0 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"setState"),", \u5373\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">if</span> <span class="token punctuation">(</span>\n  state<span class="token punctuation">.</span>getCurrentValue <span class="token operator">!==</span> getCurrentValue <span class="token operator">||</span>\n  state<span class="token punctuation">.</span>subscribe <span class="token operator">!==</span> subscribe\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// If the subscription has been updated, we\'ll schedule another update with React.</span>\n  <span class="token comment">// React will process this update immediately, so the old subscription value won\'t be committed.</span>\n  <span class="token comment">// It is still nice to avoid returning a mismatched value though, so let\'s override the return value.</span>\n  valueToReturn <span class="token operator">=</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    getCurrentValue<span class="token punctuation">,</span>\n    subscribe<span class="token punctuation">,</span>\n    value<span class="token punctuation">:</span> valueToReturn\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u901a\u8fc7\u4e0a\u8ff0\u4ee3\u7801\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u66f4\u65b0\u65b0\u7684\u72b6\u6001\uff0c\u90a3\u4e48\u5728\u503c\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u8fd8\u9700\u8981\u6267\u884c\u72b6\u6001\u7684\u53d8\u66f4\u4ece\u800c\u5b9e\u73b0\u7ec4\u4ef6\u7684 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"re-render"),"\uff0c\u8fd9\u6bb5\u4ee3\u7801\u5c31\u662f\u5728 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useEffect")," \u4e2d"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"24,25,26,46",dangerouslySetInnerHTML:{__html:'<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> didUnsubscribe <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">checkForUpdates</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// It\'s possible that this callback will be invoked even after being unsubscribed,</span>\n    <span class="token comment">// if it\'s removed as a result of a subscription event/update.</span>\n    <span class="token comment">// In this case, React will log a DEV warning about an update from an unmounted component.</span>\n    <span class="token comment">// We can avoid triggering that warning with this check.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>didUnsubscribe<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// We use a state updater function to avoid scheduling work for a stale source.</span>\n    <span class="token comment">// However it\'s important to eagerly read the currently value,</span>\n    <span class="token comment">// so that all scheduled work shares the same value (in the event of multiple subscriptions).</span>\n    <span class="token comment">// This avoids visual "tearing" when a mutation happens during a (concurrent) render.</span>\n    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">prevState</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// Ignore values from stale sources!</span>\n      <span class="token comment">// Since we subscribe an unsubscribe in a passive effect,</span>\n      <span class="token comment">// it\'s possible that this callback will be invoked for a stale (previous) subscription.</span>\n      <span class="token comment">// This check avoids scheduling an update for that stale subscription.</span>\n<span class="highlighted-line">      <span class="token keyword">if</span> <span class="token punctuation">(</span></span><span class="highlighted-line">        prevState<span class="token punctuation">.</span>getCurrentValue <span class="token operator">!==</span> getCurrentValue <span class="token operator">||</span></span><span class="highlighted-line">        prevState<span class="token punctuation">.</span>subscribe <span class="token operator">!==</span> subscribe</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> prevState<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// Some subscriptions will auto-invoke the handler, even if the value hasn\'t changed.</span>\n      <span class="token comment">// If the value hasn\'t changed, no update is needed.</span>\n      <span class="token comment">// Return state as-is so React can bail out and avoid an unnecessary render.</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> prevState<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>prevState<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>checkForUpdates<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Because we\'re subscribing in a passive effect,</span>\n  <span class="token comment">// it\'s possible that an update has occurred between render and our effect handler.</span>\n  <span class="token comment">// Check for this and schedule an update if work has occurred.</span>\n<span class="highlighted-line">  <span class="token function">checkForUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    didUnsubscribe <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>getCurrentValue<span class="token punctuation">,</span> subscribe<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u5728 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useEffect")," \u4e2d\u4f1a\u8fdb\u884c\u503c\u7684\u6bd4\u8f83\u6765\u4f18\u5316 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"render"),"\uff0c \u5982\u679c\u503c\u4e0d\u53d1\u751f\u53d8\u5316\u5219\u4e0d\u8fdb\u884c"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">if</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> prevState<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u5e76\u4e14\u5728 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"getCurrentValue")," \u548c ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"subscribe")," \u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u5219\u91cd\u65b0\u6267\u884c ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useEffect"),", \u603b\u7684\u6765\u8bf4\u6e90\u7801\u975e\u5e38\u7b80\u5355\uff0c\u90a3\u4e48 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSubscription")," \u7684\u5e94\u7528\u573a\u666f\u6709\u54ea\u4e9b\u5462\uff1f\n\u8fd9\u4e9b\u5728\u5b98\u7f51\u4e0a\u90fd\u5df2\u7ecf\u6807\u8bb0\u4e86\u51fa\u6765\u3002",i.a.createElement(r.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://github.com/facebook/react/blob/master/packages/use-subscription/src/__tests__/useSubscription-test.internal.js"}},"\u70b9\u51fb\u67e5\u770b")),i.a.createElement(r.MDXTag,{name:"h3",components:a,props:{id:"\u624b\u52a8\u5b9e\u73b0\u4e00\u4e2a-usesubscription"}},"\u624b\u52a8\u5b9e\u73b0\u4e00\u4e2a useSubscription"),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 React \u672c\u8eab\u7684 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSubscription")," \u7684\u4e8b\u60c5\uff0c\u90a3\u4e48\u6211\u4eec\u80fd\u5426\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u8fd9\u6837\u5f62\u5f0f\u7684\u8ba2\u9605\u5462\uff1f\u9996\u5148 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSubscription")," \u73b0\u5728\u901a\u5e38\u7528\u4e8e\u72b6\u6001\u7ba1\u7406\u5e93\u4e2d\uff0c\u7c7b\u4f3c\u7684\u6709 Redux \u7684 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSelector"),",\n\u76ee\u524d\u5176\u4ed6\u7684\u4e00\u4e9b\u5e93\u4e5f\u90fd\u5b9e\u73b0\u4e86\u7c7b\u4f3c\u7684\u6548\u679c\u3002\u90a3\u4e48\u4e0d\u59a8\u5c31\u5b9e\u73b0\u4e00\u4e2a\u7c7b\u4f3c\u7684\u4e5f\u53eb\u505a ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSelector")),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u9996\u5148\u5b9a\u4e49\u8fd9\u4e2a\u51fd\u6570"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">function</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something</span>\n<span class="token punctuation">}</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u5148\u8003\u8651\u4e00\u4e0b useSelector \u9700\u8981\u505a\u4ec0\u4e48\uff0c ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSelector")," \u9700\u8981\u662f\u5728\u76d1\u542c\u7684\u503c\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u6e32\u67d3\u8fd9\u4e2a\u7ec4\u4ef6\u3002\u901a\u8fc7\u6e32\u67d3\u4e00\u4e2a\u7ec4\u4ef6\u6709\u591a\u79cd\u65b9\u5f0f\uff0c\u4e0d\u59a8\u5199\u4e00\u4e2a hook \u53eb\u505a ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useForceUpdate")),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">function</span> <span class="token function">useForceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>update<span class="token punctuation">,</span> setUpdate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">forceUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setUpdate</span><span class="token punctuation">(</span><span class="token operator">!</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> forceUpdate<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u6709\u4e86 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"forceUpdate")," \u540e\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u548c ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSubscription")," \u4e00\u4e2a\u7684\u4f18\u5316\u6548\u679c\uff0c\u5c31\u662f\u9700\u8981\u4e00\u4e2a\u6bd4\u8f83\u51fd\u6570\uff0c \u6211\u4eec\u4e0d\u50cf ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSubscription")," \u90a3\u6837\u76f4\u63a5\u66b4\u9732\u4e00\u4e2a\u53eb\u505a getCurrentValue \u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\n",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSelector")," \u662f\u4e3a\u4e86\u62ff\u5230 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"store")," \u4e2d\u7684\u6570\u636e\uff0c\u53ea\u6709\u5728 store \u4e2d\u7684\u6570\u636e\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\u624d\u4f1a ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"render")),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">oldValue<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// value \u662f\u4e00\u4e2a\u6570\u7ec4</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue<span class="token punctuation">.</span>length <span class="token operator">!==</span> newValue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldValue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> newValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u6709\u4e86\u6bd4\u8f83\u51fd\u6570\u540e\u5c31\u53ef\u4ee5\u5b9e\u73b0 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSelector"),", ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSelector")," \u9700\u8981\u76d1\u542c\u5668\u7684\u503c\u662f\u7528\u6237\u4f20\u5165\u7684\uff0c\u901a\u5e38\u7528\u6237\u9700\u8981\u76d1\u542c\u5668\u7684\u503c\u662f\u5b58\u50a8\u5728 store \u4e2d\u7684\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7ed9 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSelector")," \u4f20\u9012\u4e00\u4e2a\u51fd\u6570\uff0c\n\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u6211\u4eec\u7684 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"store")),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">function</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">depFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// \u901a\u8fc7\u67d0\u4e2a context \u83b7\u53d6\u5230 sunscribers</span>\n  <span class="token keyword">const</span> subscribers <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> forceUpdate <span class="token operator">=</span> <span class="token function">useForceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> depFnRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>depFn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  depFnRef<span class="token punctuation">.</span>current <span class="token operator">=</span> depFn<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> depValueRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token function">depFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// \u8fd9\u91cc\u662f useEffect \u4e2d\u7684 \u8ba2\u9605\u51fd\u6570</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// \u8ba2\u9605\u51fd\u6570\u5b58\u50a8\u7684\u662f store, \u53ef\u4ee5\u5728 useSelector \u5185\u90e8\u4f7f\u7528 useContext() \u6765\u83b7\u53d6\u8fd9\u4e2a store</span>\n    <span class="token keyword">function</span> <span class="token function">subscriber</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> oldValue <span class="token operator">=</span> depValueRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>\n      <span class="token keyword">const</span> newValue <span class="token operator">=</span> depFnRef<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compare</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// \u5982\u679c\u4e0d\u76f8\u7b49\u5219\u5f3a\u5236\u66f4\u65b0</span>\n        <span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        depValueRef<span class="token punctuation">.</span>current <span class="token operator">=</span> newValue<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    subscribers<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      subscribers<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u90a3\u4e48 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"subscribers")," \u662f\u4ec0\u4e48\u6837\u5b50\u7684\u5462\uff1f",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"subscribers")," \u9700\u8981\u6709 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"register")," \u548c ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"unregister")," \u65b9\u6cd5"),i.a.createElement(r.MDXTag,{name:"pre",components:a},i.a.createElement(r.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">function</span> <span class="token function">useSubscriber</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> subscribersRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">register</span> <span class="token operator">=</span> <span class="token parameter">subscriber</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    subscribersRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">unregister</span> <span class="token operator">=</span> <span class="token parameter">subscriber</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribersRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      subscribersRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">notify</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> subscriber <span class="token keyword">of</span> subscribersRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">subscriber</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> register<span class="token punctuation">,</span> unregister <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n'}}})),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u8fd9\u5c31\u662f\u4e00\u4e2a ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSubscriber"),", \u5185\u90e8\u5b9e\u73b0\u4e86\u6ce8\u518c\u548c\u53d6\u6d88\u6ce8\u518c\u7684\u529f\u80fd\u3002\u90a3\u4e48\u8fd9\u4e2a ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSubscriber")," \u4e3a\u4ec0\u4e48\u8fd8\u6709\u4e00\u4e2a ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"notify")," \u529f\u80fd\u5462\uff1f ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"notify")," \u7684\u4f5c\u7528\u5c31\u662f\u6267\u884c\u6bcf\u4e00\u4e2a\n\u76d1\u542c\u5668\u5c31\u662f ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Redux")," \u4e2d\u7684 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"listener()")," \u662f\u4e00\u6837\u7684\u3002\u6240\u4ee5\u8fd9\u91cc\u53ef\u4ee5\u770b\u505a\u7684 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"listener()"),"\u3002"),i.a.createElement(r.MDXTag,{name:"p",components:a},"\u8fd9\u57fa\u672c\u4e0a\u5c31\u662f\u4e00\u4e2a\u5f88\u57fa\u7840\u7684 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSelector")," \u56e0\u4e3a\u4e3a\u4e86\u7b80\u4fbf\u6240\u4ee5\u4f9d\u8d56\u4e8e\u72b6\u6001\u7ba1\u7406\u7684\u4e00\u4e9b\u53c2\u6570\uff0c\u5982\u679c\u8981\u5b9e\u73b0\u4efb\u610f\u503c\u7684\u76d1\u542c\u3002\u90a3\u4e48\u4f7f\u7528 React \u672c\u8eab\u7684 ",i.a.createElement(r.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"useSubscription")," \u5373\u53ef\u3002\u76ee\u524d\u53ef\u4ee5\u7528\u4e8e\n\u4e8b\u4ef6\u7684\u76d1\u542c\u7b49\u7b49\u3002\u8fd9\u4e2a\u5bf9\u4e8e\u975e\u53d7\u63a7\u7684\u8868\u5355\u4f5c\u7528\u4f1a\u6709\u5f88\u5927\u5f88\u5927\u3002"))}}]),a}(i.a.Component),d=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return[{id:"\u76ee\u5f55",level:2,title:"\u76ee\u5f55",children:[{id:"\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a-usesubscription",level:3,title:"\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a useSubscription",children:[]},{id:"usesubscription-\u7684\u5185\u90e8\u5b9e\u73b0",level:3,title:"useSubscription \u7684\u5185\u90e8\u5b9e\u73b0",children:[]},{id:"\u624b\u52a8\u5b9e\u73b0\u4e00\u4e2a-usesubscription",level:3,title:"\u624b\u52a8\u5b9e\u73b0\u4e00\u4e2a useSubscription",children:[]}]}]},h={}}}]);
//# sourceMappingURL=37.7fd46dad.chunk.js.map