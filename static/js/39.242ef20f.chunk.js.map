{"version":3,"sources":["pages/posts/2019-11-24-how-to-study/document.mdx"],"names":["readingTime","text","minutes","time","words","MDXContent","props","_this","Object","_Users_Vae_Desktop_project_my_lanyincaos_cn_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_Vae_Desktop_project_my_lanyincaos_cn_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_Vae_Desktop_project_my_lanyincaos_cn_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","layout","_this$props","components","_Users_Vae_Desktop_project_my_lanyincaos_cn_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","parentName","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","React","Component","tableOfContents","arguments","length","undefined","frontMatter"],"mappings":"sVAGaA,EAAc,CAACC,KAAO,aAAaC,QAAU,KAAMC,KAAO,kBAAkBC,MAAQ,KAM5EC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,OAAS,KAFGP,wEAIV,IAAAQ,EAC0BL,KAAKJ,MAA9BU,EADDD,EACCC,WADDR,OAAAS,EAAA,EAAAT,CAAAO,EAAA,gBAGP,OAAOG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEC,KAAK,UAELN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,4XACrCE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,gKAAwEE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,UAAxE,mLAA+LL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,MAA/L,4iBAEAL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,owBACkDE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,MADlD,yiCAIAL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,qqBAEAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,04BAEAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,6LAA4EE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,0DAA5E,qwBACoEL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,SADpE,6BACiKL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,UADjK,2YAEuDL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,aAFvD,mFAEiKL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,UAFjK,sGAGAL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,MAAMN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,OAAON,WAAYA,EAAYO,WAAW,MAAMjB,MAAO,CAACkB,UAAY,eAAeC,gBAAgB,MAAMC,gCAAgC,GAAGC,wBAA0B,CAACC,OAAS,uvCACxOV,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,2DAA6DE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,aAA7D,mCAA+JL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,iBAA/J,+hBAEAL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,iFAA0DE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,2MAC1DL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,wtCAEAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,o3BAEAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,4EAA0DE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,yFAC1DL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,wvEAIAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,0nBACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,2EAAyDE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYO,WAAW,KAA7D,qDACzDL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,gDAxCwCa,IAAMC,WA4CjCC,EAAkB,WAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,SAAmB,IAIrCG,EAAc","file":"static/js/39.242ef20f.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\nexport const readingTime = {\"text\":\"1 min read\",\"minutes\":0.585,\"time\":35099.99999999999,\"words\":117}\n\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}>{`这几天在看 twitter 的时候看到了 React 的作者是如何突破自己的以及如何在新的领域里做到随机应变的。所以有所想法，正好就在这篇博客里记下来吧`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`以我自己的来举个例子吧。比如在前几个公司需要开发一个 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sketch`}</MDXTag>{` 插件，而我对这个是完全不知道的，去网上查看了很多的资料都是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`OC`}</MDXTag>{` 写的，此时我的心里不由的产生了\n退却，我想这个方向我一点都不熟悉，所以就给产品同学提出了另一个方案就是用 app 来代替，因为现在可以使用 js 来开发 app, 本来这个功能就不是很复杂，那做起来应该很快吧。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`是的，产品因为对这块也不是很清楚，所以产品也同意了我的想法，由于页面的视觉优先出来，所以我就先去开发页面了。后来在与组内的同学进行交流的时候，他们说： 现在开发 app, 如果后面还要开发\n这样的插件为什么不直接开发呢？我当时是这样说的： 因为我对 sketch 完全不熟悉，并且有时 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`OC`}</MDXTag>{`, 对于这个语言也是没看过，那相当于从 0 开始，这样会很慢很慢。所以由于这些原因我产生了退却感。\n我不想在浪费太多时间去学习一门新的语言，这样不仅浪费时间，也会延迟进度。后来组内同学说服了我，无论怎么样既然后面一定要开发的，晚痛不如早痛。是的，我觉得他们说的是对的，所以在那一段时间内\n我开始大量的是看 sketch 的文档以及相关的插件具体是怎么写的，以及发布、构建的流程。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`因为 sketch 是一个新的，后来发现 sketch 也可以使用 js 开发，哇，很开心。但是 sketch 的 api 实在是太多了，根本记不住。所以我就不断的去重复看文档，不断的去看，反反复复看了至少 5，6 遍才记住相关\napi 的位置以及一些用法。具体属性还是每次开发的时候打开去看。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在这里有个点我想说的是与其空手撸代码，不如去看文档。我在一个技术群里面，有个同学就一直问文档上都说过的问题，我告诉他如何解决，然后问他你为什么不先去看文档呢？他说：他不想看，他就是想直接撸代码，撸代码又不是\n撸猫上手就能撸。可是你文档都不看就去直接撸，这样的时间可能是你看过文档再去撸代码的几倍都不止。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`所以在这里我想说的第一个问题就是：在学习一个新的知识点的时候，`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`先去看一遍官网文档`}</MDXTag>{`，可能看官网文档会花费你几个小时甚至一天的时间我认为都是值得的，这样你再次开发的时候就具有了一点的知识储备来应对，不然什么都不懂直接去\n看别人的例子就去写代码，是的，你把代码写出来了，可是你写的代码真的是好的代码吗？真的不会引起 bug 吗？我看过那位同学的代码，在 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`React`}</MDXTag>{` 中还采用 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Jquery`}</MDXTag>{` 的写法来写代码。如果看一遍文档我觉得完全不会出现这样的问题吧。\n还有一个典型的例子，我相信写过 React 的都知道在用 useState 返回的 set 函数中会进行 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Object.is`}</MDXTag>{` 比较，当时那位同学组件不会 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{`, 就一直不知道为什么，他是这样写的`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>list<span class=\\\"token punctuation\\\">,</span> setList<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">updateXxx</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"xxx\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">setList</span><span class=\\\"token punctuation\\\">(</span>list<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`是的这个在 class 中是会 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`re-render`}</MDXTag>{` 的，如果是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`PureComponent`}</MDXTag>{`, 照样会有问题。这些在官网中都说的非常清楚了。结果因为这样的一个问题，死活找不到原因， debug 几个小时还是不知道只能寻求大家帮助。如果看了官网的介绍有了一点的知识\n储备这个问题不会出现的。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`所以这就是我想说的第一个，`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`在学习新的领域的时候最好先去看一遍官网，了解一下知识点在去写会更好`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`看了官网的介绍写基本的代码肯定是没有问题的，通常在做一个新的领域的时候，需求也都是相对简单的后来会慢慢的变得复杂，那么可能只有官网的是不够的，此时就可以去参考别人的代码，github 上有太多这样的代码，都可以去 clone 学习如何去组织以及如何去写。\n但是即使这样我相信(包括我)很多人也都是写不出来，很多时候在看代码的是心里会想，哇这个代码写的很简单嘛。我上我也行。是的，别人的代码看起来很简单。但是当自己开始写的时候真的能写出来吗？`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`我经常会在 github 上写一些小项目，其实并不是说我想着这个项目瞬间能出名，有很多人会去用。我想的是通过自己去写来锻炼这个能力。看懂并一定是真的懂，写出来完全理解了才是真的懂。当你开始去写的时候，就会发现很多问题，为什么这个代码一定要在这里，在这里\n有什么好处都会被挖掘出来。这样你就能很容易熟悉这一块。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`所以我第二个想说的就是： `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`看懂不一定是真的懂，要写出来`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`那么是否写出来就真的足够了吗？ 要乐于交流和分享，当你懂了一个知识点的时候，你觉得你懂了。但是如果你能讲出来，把完全不懂的人讲懂了这才是真的懂，说明真的已经深入了，完全理解内部的原理了。所以在大家学习完一个知识点的时候要检验自己是否真的懂的话就学会交流\n和分享。交流可以和自己的朋友或者同事来交流，把你学习到的和他们说，如果你把他们都讲懂了，那就完全没有问题了。你可能会说不一定有那么多时间去交流，别人也不一定会有空来听你来交流。那么不如来一次分享。每个公司的团队一般都会有分享这种会议，\n可以分享自己学到的，也可以分享自己的经验。分享的东西不在于有多少而在于能否把一件事情说清楚。即使你分享讲了两个小时，但是就把这一件事说的很清楚也是没有问题的。但是如果每件事都是一笔带过，那么即使分享 100 次又有什么意义呢？拿我来说吧，我现在还是\n属于第二种的情况，正在向第一种来过度。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`那么此时有的人会问，到底是先精后广，还是先广在精。我的想法就是想深入一门无论你是写代码的，还是其他的技术领域。最好都是先深入一门，把这一项技术做的非常好了，再去进行广度。这样无论如何你都应对其中一项技术的变更。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`所以我第三个想说的就是：`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`要乐于分享和交流`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`大家周末愉快`}</MDXTag>\n           </MDXTag>\n  }\n}\nexport const tableOfContents = (components={}) => [\n  \n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}