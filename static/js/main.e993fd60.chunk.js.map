{"version":3,"sources":["components/BlogPostLayout.module.css","components/Pagination.module.css","utils/formats.ts","components/ArticleMeta.tsx","components/ArticleMeta.module.css","components/BlogIndexPage.module.css","components/LoadingIndicator.module.css","components/BlogLayout.module.css","components/ArticleSummary.tsx","components/ArticleSummary.module.css","components/Bio.module.css","components/bio-pic.jpeg","siteMetadata.ts","components/Bio.tsx","components/Pagination.tsx","components/BlogIndexPage.tsx","components/NotFoundPage.tsx","components/LoadingIndicator.tsx","components/BlogLayout.tsx","components/BlogPostLayout.tsx","pages/posts/index.ts","pages/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","title","header","footer","bio","links","next","content","Pagination","previous","months","ArticleMeta","_ref","readingTimeElement","blogPathname","meta","readingTime","minutes","Math","max","round","cups","react_default","a","createElement","Fragment","className","styles","Array","fill","join","dateTime","date","toUTCString","dateString","Date","monthName","getMonth","dayOfMonth","getDate","fourDigitYear","getFullYear","concat","formatDate","tags","length","map","tag","key","es","href","articlesList","LoadingIndicator","active","LoadingIndicator-animation","container","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_navi__WEBPACK_IMPORTED_MODULE_1__","_ArticleMeta__WEBPACK_IMPORTED_MODULE_2__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3___default","ArticleSummary","route","url","spoiler","Bio","p","siteMetadata","author","description","indexPageSize","props","src","bioPic","alt","pageCount","pageNumber","dist_es","String","pages","current","count","BlogIndexPage","postRoutes","components_Bio","components_Pagination","target","style","float","NotFoundPage","NotFound","BlogLayout","isViewingIndex","loadingRoute","components_LoadingIndicator","render","components_NotFoundPage","BlogPostLayout","_ref2","_ref3","MDXComponent","pathname","dist","components","NavLink","wrapper","_ref4","children","previousDetails","nextDetails","postModules","./2019-01-10-cache/post.ts","e","then","bind","./2019-02-15-hook/post.ts","./2019-02-19-try-catch/post.ts","./2019-04-13-forwardRef/post.ts","./2019-05-28-hooks-vs-class/post.ts","./2019-06-03-state/post.ts","./2019-08-10-context/post.ts","./2019-08-19-form/post.ts","importPost","postPathnames","Object","keys","datePattern","postDetails","slug","slugify","replace","dateMatch","match","parseInt","posts","sortBy","reverse","i","getPage","_getPage","asyncToGenerator","regenerator_default","mark","_callee2","post","_getContent","previousSlug","previousPost","nextSlug","nextPost","previousPostDetails","nextPostDetails","wrap","_context2","prev","sent","default","getContent","objectWithoutProperties","abrupt","Navi","getMeta","env","objectSpread","_getContent2","_callee","other","_context","stop","apply","this","arguments","chunks","chunk","chunkPagePairs","pageTitle","Promise","all","router","resolve","withContent","_x2","components_BlogIndexPage","_x","pagesSwitch","remainingPathname","mountname","test","components_BlogLayout","paths","/","shift","/page","/1","fromPairs","/posts","components_BlogPostLayout","/tags","/about","/rss","resolveSiteMap","App","navigation","Component","Boolean","window","location","hostname","main","_main","steady","process","renderer","ReactDOM","hydrate","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e993fd60.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogPostLayout_title__1egAZ\",\"header\":\"BlogPostLayout_header__6lPZ1\",\"footer\":\"BlogPostLayout_footer__1p0Ii\",\"bio\":\"BlogPostLayout_bio__2AHhA\",\"links\":\"BlogPostLayout_links__1fVhZ\",\"next\":\"BlogPostLayout_next__3tOcG\",\"content\":\"BlogPostLayout_content__1CRXP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pagination\":\"Pagination_Pagination__3WU49\",\"previous\":\"Pagination_previous__B6XOs\",\"next\":\"Pagination_next__2UdE7\"};","export let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\nexport function formatDate(dateString) {\n  let date = new Date(dateString)\n  let monthName = months[date.getMonth()]\n  let dayOfMonth = date.getDate()\n  let fourDigitYear = date.getFullYear()\n\n  return `${monthName} ${dayOfMonth}, ${fourDigitYear}`\n}","import { join } from 'path';\nimport React from 'react';\nimport { NavLink } from 'react-navi';\nimport { formatDate } from '../utils/formats';\nimport styles from './ArticleMeta.module.css';\n\ninterface ArticleMetaProps {\n  blogPathname: string;\n  meta: any;\n  readingTime?: any;\n}\n\nfunction ArticleMeta({ blogPathname, meta, readingTime }: ArticleMetaProps) {\n  let readingTimeElement;\n  if (readingTime) {\n    let minutes = Math.max(Math.round(readingTime.minutes), 1);\n    let cups = Math.round(minutes / 5);\n    readingTimeElement = (\n      <React.Fragment>\n        {' '}\n        &bull;{' '}\n        <span className={styles.readingTime}>\n          {new Array(cups || 1).fill('☕️').join('')} {minutes} min read\n        </span>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <small className={styles.ArticleMeta}>\n      <time dateTime={meta.date.toUTCString()}>{formatDate(meta.date)}</time>\n      {meta.tags && meta.tags.length && (\n        <>\n          {' '}\n          &bull;{' '}\n          <ul className={styles.tags}>\n            {meta.tags.map(tag => (\n              <li key={tag}>\n                <NavLink href={join(blogPathname, 'tags', tag)}>{tag}</NavLink>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n      {readingTimeElement || null}\n    </small>\n  );\n}\n\nexport default ArticleMeta;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"ArticleMeta_tags__30Wbg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogIndexPage_title__7sQL0\",\"articlesList\":\"BlogIndexPage_articlesList__3AVkt\",\"footer\":\"BlogIndexPage_footer__2Lkd5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoadingIndicator\":\"LoadingIndicator_LoadingIndicator__LXZCC\",\"active\":\"LoadingIndicator_active__1D6Al\",\"LoadingIndicator-animation\":\"LoadingIndicator_LoadingIndicator-animation__3Z27c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BlogLayout_container__1wjbv\",\"title\":\"BlogLayout_title__U0zfd\"};","import { Route } from 'navi';\nimport React from 'react';\nimport { NavLink } from 'react-navi';\nimport ArticleMeta from './ArticleMeta';\nimport styles from './ArticleSummary.module.css';\n\ninterface ArticleSummaryProps {\n  blogPathname: string;\n  route: Route;\n}\n\nfunction ArticleSummary({ blogPathname, route }: ArticleSummaryProps) {\n  return (\n    <article className={styles.ArticleSummary}>\n      <h2>\n        <NavLink href={route.url.href}>{route.title}</NavLink>\n      </h2>\n      <ArticleMeta blogPathname={blogPathname} meta={route.meta} />\n      <p>{route.meta.spoiler}</p>\n    </article>\n  );\n}\n\nexport default ArticleSummary;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ArticleSummary\":\"ArticleSummary_ArticleSummary__1R05r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bio\":\"Bio_Bio__1eiKY\"};","module.exports = __webpack_public_path__ + \"static/media/bio-pic.fdbb64ab.jpeg\";","export default {\n  // The blog's title as it appears in the layout header, and in the document\n  // <title> tag.\n  title: 'lanyincao',\n\n  author: 'lanyincao',\n  description: 'personal blog by lanyincao',\n\n  // The number of posts to a page on the site index.\n  indexPageSize: 10\n};\n","import React from \"react\";\nimport styles from \"./Bio.module.css\";\nimport bioPic from \"./bio-pic.jpeg\";\n\ninterface BioProps {\n  className?: string;\n}\n\nfunction Bio(props: BioProps) {\n  return (\n    <div\n      className={`\n      ${styles.Bio}\n      ${props.className || \"\"}\n    `}\n    >\n      <img src={bioPic} alt=\"lanyincao\" />\n      <p>\n        Personal blog by <a href=\"https://twitter.com/lanyincao\">lanyincao</a>.\n        <br />I can't sing, dance, rap but can code, 🏀\n      </p>\n    </div>\n  );\n}\n\nexport default Bio;\n","import { join } from 'path'\nimport React from 'react'\nimport { NavLink } from 'react-navi'\nimport styles from './Pagination.module.css'\n\ninterface PaginationProps {\n  blogPathname: string\n  pageCount: number\n  pageNumber: number\n}\n\nfunction Pagination({ blogPathname, pageCount, pageNumber }: PaginationProps) {\n  return (\n    <small className={styles.Pagination}>\n      {pageNumber !== 1 && (\n        <NavLink\n          className={styles.previous}\n          href={join(blogPathname, 'page', String(pageNumber - 1))}>\n          ← Previous\n        </NavLink>\n      )}\n      <span className={styles.pages}>\n        {' '}\n        Page <span className={styles.current}>{pageNumber}</span>/\n        <span className={styles.count}>{pageCount}</span>{' '}\n      </span>\n      {pageNumber < pageCount && (\n        <NavLink\n          className={styles.next}\n          href={join(blogPathname, 'page', String(pageNumber + 1))}>\n          Next →\n        </NavLink>\n      )}\n    </small>\n  )\n}\n\nexport default Pagination\n","import { Route } from 'navi';\nimport React from 'react';\nimport { NavLink } from 'react-navi';\nimport siteMetadata from '../siteMetadata';\nimport ArticleSummary from './ArticleSummary';\nimport Bio from './Bio';\n// import Toggle from './toggle';\nimport Pagination from './Pagination';\nimport styles from './BlogIndexPage.module.css';\n\ninterface BlogIndexPageProps {\n  blogPathname: string;\n  pageCount: number;\n  pageNumber: number;\n  postRoutes: Route[];\n}\n\nfunction BlogIndexPage({\n  blogPathname,\n  pageCount,\n  pageNumber,\n  postRoutes\n}: BlogIndexPageProps) {\n  return (\n    <div>\n      <header>\n        <h1 className={styles.title}>\n          <NavLink href={blogPathname}>{siteMetadata.title}</NavLink>\n          {/* <Toggle /> */}\n        </h1>\n        <Bio />\n      </header>\n      <ul className={styles.articlesList}>\n        {postRoutes.map(route => (\n          <li key={route.url.href}>\n            <ArticleSummary blogPathname={blogPathname} route={route} />\n          </li>\n        ))}\n      </ul>\n      {pageCount > 1 && (\n        <Pagination\n          blogPathname={blogPathname}\n          pageCount={pageCount}\n          pageNumber={pageNumber}\n        />\n      )}\n      <footer className={styles.footer}>\n        <div>\n          <a href=\"./rss.xml\" target=\"_blank\" style={{ float: 'right' }}>\n            RSS\n          </a>\n          <NavLink href=\"./about\">About</NavLink> &bull;{' '}\n          <NavLink href=\"./tags\">Tags</NavLink> &bull;{' '}\n          <a href=\"https://github.com/snakeUni/uni-blog\">Source</a>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default BlogIndexPage;\n","import React from 'react'\nimport styles from './NotFoundPage.module.css'\n\n// Note that create-react-navi-app will always show an error screen when this\n// is rendered. This is because the underlying react-scripts package shows\n// the error screen when a NotFoundError is thrown, even though it's caught\n// by <NavNotFoundBoundary>. To see the error rendered by this function,\n// you'll just need to close the error overlay with the \"x\" at the top right.\nfunction NotFoundPage() {\n  return (\n    <div className={styles.NotFound}>\n      <h1>404 - Not Found</h1>\n    </div>\n  )\n}\n\nexport default NotFoundPage\n","import React from 'react'\nimport styles from './LoadingIndicator.module.css'\n\ninterface LoadingIndicatorProps {\n  active?: boolean\n  className?: string\n  style?: React.CSSProperties\n}\n\nfunction LoadingIndicator({ active, className, style }: LoadingIndicatorProps) {\n  return (\n    <div\n      className={`\n        ${styles.LoadingIndicator}\n        ${active ? styles.active : ''}\n        ${className}\n      `}\n      style={style}\n    />\n  )\n}\n\nexport default LoadingIndicator\n","import React from 'react'\nimport {\n  NavContent,\n  NavLink,\n  NavLoading,\n  NavNotFoundBoundary,\n} from 'react-navi'\nimport siteMetadata from '../siteMetadata'\nimport NotFoundPage from './NotFoundPage'\nimport LoadingIndicator from './LoadingIndicator'\nimport styles from './BlogLayout.module.css'\n\ninterface BlogLayoutProps {\n  blogPathname: string\n  isViewingIndex: boolean\n}\n\nfunction BlogLayout({ blogPathname, isViewingIndex }: BlogLayoutProps) {\n  return (\n    // Once hooks are released, `<NavLoading>` will be able to be replaced\n    // with the new `useLoadingRoute` hooks.\n    <NavLoading>\n      {loadingRoute => (\n        <div className={styles.container}>\n          <LoadingIndicator active={!!loadingRoute} />\n\n          {// Don't show the header on index pages, as it has a special\n          // header.\n          !isViewingIndex && (\n            <header>\n              <h3 className={styles.title}>\n                <NavLink href={blogPathname}>{siteMetadata.title}</NavLink>\n              </h3>\n            </header>\n          )}\n\n          <main>\n            <NavNotFoundBoundary render={() => <NotFoundPage />}>\n              <NavContent />\n            </NavNotFoundBoundary>\n          </main>\n        </div>\n      )}\n    </NavLoading>\n  )\n}\n\nexport default BlogLayout\n","import React from 'react';\nimport { NavContent, NavLink } from 'react-navi';\nimport { MDXProvider } from '@mdx-js/tag';\nimport siteMetadata from '../siteMetadata';\nimport ArticleMeta from './ArticleMeta';\nimport Bio from './Bio';\nimport styles from './BlogPostLayout.module.css';\n\ninterface BlogPostLayoutProps {\n  blogPathname: string;\n}\n\nfunction BlogPostLayout({ blogPathname }: BlogPostLayoutProps) {\n  return (\n    <NavContent>\n      {({ MDXComponent, readingTime }, { title, meta, url }) => (\n        // The content for posts is an MDX component, so we'll need\n        // to use <MDXProvider> to ensure that links are rendered\n        // with <NavLink>, and thus use pushState.\n        <article className={styles.container}>\n          <header className={styles.header}>\n            <h1 className={styles.title}>\n              <NavLink href={url.pathname}>{title}</NavLink>\n            </h1>\n            <ArticleMeta\n              blogPathname={blogPathname}\n              meta={meta}\n              readingTime={readingTime}\n            />\n          </header>\n          <MDXProvider\n            components={{\n              a: NavLink,\n              wrapper: ({ children }) => (\n                <div className={styles.content}>{children}</div>\n              )\n            }}\n          >\n            <MDXComponent />\n          </MDXProvider>\n          <footer className={styles.footer}>\n            <h3 className={styles.title}>\n              <NavLink href={blogPathname}>{siteMetadata.title}</NavLink>\n            </h3>\n            <Bio className={styles.bio} />\n            <section className={styles.links}>\n              {meta.previousDetails && (\n                <NavLink\n                  className={styles.previous}\n                  href={meta.previousDetails.href}\n                >\n                  ← {meta.previousDetails.title}\n                </NavLink>\n              )}\n              {meta.nextDetails && (\n                <NavLink className={styles.next} href={meta.nextDetails.href}>\n                  {meta.nextDetails.title} →\n                </NavLink>\n              )}\n            </section>\n          </footer>\n        </article>\n      )}\n    </NavContent>\n  );\n}\n\nexport default BlogPostLayout;\n","import importAll from 'import-all.macro'\nimport * as Navi from 'navi'\nimport { join } from 'path'\nimport { sortBy } from 'lodash'\nimport slugify from 'slugify'\n\n// Get a list of all posts, that will not be loaded until the user\n// requests them.\nconst postModules = importAll.deferred('./**/post.ts?(x)')\nconst importPost = pathname => postModules[pathname]()\nconst postPathnames = Object.keys(postModules)\nconst datePattern = /^((\\d{1,4})-(\\d{1,4})-(\\d{1,4}))[/-]/\n\nlet postDetails = postPathnames.map(pathname => {\n  let slug = slugify(\n    pathname.replace(/post.tsx?$/, '').replace(/(\\d)\\/(\\d)/, '$1-$2'),\n  )\n    .replace(/^[-.]+|[.-]+$/g, '')\n    .replace(datePattern, '$1/')\n\n  let date\n  let dateMatch = slug.match(datePattern)\n  if (dateMatch) {\n    date = new Date(\n      parseInt(dateMatch[2], 10),\n      parseInt(dateMatch[3], 10) - 1,\n      parseInt(dateMatch[4], 10),\n    )\n  }\n\n  return {\n    slug,\n    pathname,\n    date,\n  }\n})\n\n// Sort the pages by slug (which contain the dates)\npostDetails = sortBy(postDetails, ['slug']).reverse()\n\n// Create url-friendly slugs from post pathnames, and a `getPage()` function\n// that can be used to load and return the post's Page object.\nlet posts = postDetails.map(({ slug, pathname, date }, i) => ({\n  getPage: async () => {\n    let { default: post } = await importPost(pathname)\n    let { title, getContent, ...meta } = post\n    let previousSlug, previousPost, nextSlug, nextPost\n\n    if (i !== 0) {\n      let previousPostDetails = postDetails[i - 1]\n      previousPost = (await importPost(previousPostDetails.pathname)).default\n      previousSlug = previousPostDetails.slug\n    }\n\n    if (i + 1 < postDetails.length) {\n      let nextPostDetails = postDetails[i + 1]\n      nextPost = (await importPost(nextPostDetails.pathname)).default\n      nextSlug = nextPostDetails.slug\n    }\n\n    return Navi.createPage({\n      title,\n      getMeta: env => ({\n        date,\n        pathname,\n        slug,\n        previousDetails: previousPost && {\n          title: previousPost.title,\n          href: join(env.pathname, '../..', previousSlug),\n        },\n        nextDetails: nextPost && {\n          title: nextPost.title,\n          href: join(env.pathname, '../..', nextSlug),\n        },\n        ...meta,\n      }),\n      getContent: async () => {\n        let { default: MDXComponent, ...other } = await getContent()\n        return { MDXComponent, ...other }\n      },\n    })\n  },\n  slug,\n}))\n\nexport default posts\n","import * as Navi from 'navi';\nimport React from 'react';\nimport { join } from 'path';\nimport { chunk, fromPairs } from 'lodash';\nimport BlogIndexPage from '../components/BlogIndexPage';\nimport BlogLayout from '../components/BlogLayout';\nimport BlogPostLayout from '../components/BlogPostLayout';\nimport siteMetadata from '../siteMetadata';\nimport posts from './posts';\n\n// Split the posts into a list of chunks of the given size, and\n// then build index pages for each chunk.\nlet chunks = chunk(posts, siteMetadata.indexPageSize);\nlet chunkPagePairs = chunks.map((chunk, i) => [\n  '/' + (i + 1),\n  async (env: Navi.Env) => {\n    // Get the blog's root pathname, as all index pages other than the first\n    // one are mounted at `/pages/n`\n    let blogPathname = i === 0 ? env.pathname : join(env.pathname, '../..');\n\n    // Get metadata for all pages on this page\n    let postRoutes = await Promise.all<Navi.Route>(\n      chunk.map(async post => {\n        let href = join(blogPathname, 'posts', post.slug);\n        return await env.router.resolve(href, {\n          // If you want to show the page content on the index page, set\n          // this to true to be able to access it.\n          withContent: false\n        });\n      })\n    );\n\n    // Only add a page number to the page title after the first index page.\n    let pageTitle = siteMetadata.title;\n    if (i > 0) {\n      pageTitle += ` – page ${i + 1}`;\n    }\n\n    return Navi.createPage({\n      title: pageTitle,\n      getContent: () => (\n        <BlogIndexPage\n          blogPathname={blogPathname}\n          pageNumber={i + 1}\n          pageCount={chunks.length}\n          postRoutes={postRoutes}\n        />\n      )\n    });\n  }\n]);\n\nconst pagesSwitch = Navi.createSwitch({\n  getContent: env => {\n    // Check if the current page is an index page by comparing the remaining\n    // portion of the URL's pathname with the index page paths.\n    let remainingPathname = env.url.pathname.replace(env.mountname, '');\n    let isViewingIndex =\n      remainingPathname === '/' || /^\\/page\\/\\d+\\/$/.test(remainingPathname);\n\n    // Wrap the current page's content with a React Context to pass global\n    // configuration to the blog's components.\n    return (\n      <BlogLayout\n        blogPathname={env.pathname || '/'}\n        isViewingIndex={isViewingIndex}\n      />\n    );\n  },\n\n  paths: {\n    // The blog's index pages go here. The first index page is mapped to the\n    // root URL, with a redirect from \"/page/1\". Subsequent index pages are\n    // mapped to \"/page/n\".\n    '/': chunkPagePairs.shift()[1],\n    '/page': Navi.createSwitch({\n      paths: {\n        '/1': env => Navi.createRedirect(join(env.pathname, '../..')),\n        ...fromPairs(chunkPagePairs)\n      }\n    }),\n\n    // Put posts under \"/posts\", so that they can be wrapped with a\n    // \"<BlogPostLayout />\" that configures MDX and adds a post-specific layout.\n    '/posts': Navi.createSwitch({\n      getContent: env => (\n        <BlogPostLayout blogPathname={join(env.pathname, '..')} />\n      ),\n\n      paths: fromPairs(posts.map(post => ['/' + post.slug, post.getPage]))\n    }),\n\n    // Miscellaneous pages can be added directly to the root switch.\n    '/tags': () => import('./tags'),\n    '/about': () => import('./about'),\n\n    // Only the statically built copy of the RSS feed is intended to be opened,\n    // but the content is fetched here.\n    '/rss': Navi.createPage({\n      getContent: env =>\n        env.router.resolveSiteMap('/posts', {\n          withContent: true\n        })\n    })\n  }\n});\n\nexport default pagesSwitch;\n","import { Navigation } from 'navi'\nimport React, { Component } from 'react'\nimport { NavProvider, NavContent } from 'react-navi'\n\ninterface AppProps {\n  navigation: Navigation\n}\n\nclass App extends Component<AppProps> {\n  render() {\n    return (\n      <NavProvider navigation={this.props.navigation}>\n        <NavContent />\n      </NavProvider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import * as Navi from 'navi';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.module.css';\nimport pages from './pages';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// `Navi.app()` is responsible for exporting your app's pages and App\n// component to the static renderer, and for starting the app with the\n// `main()` function when running within a browser.\nNavi.app({\n  // Specify the pages that navi-app should statically build, by passing in a\n  // Switch object.\n  pages,\n\n  // The default create-react-app renderer needs access to the App component.\n  // Learn about custom static renderers at:\n  // https://frontarm.com/navi/guides/static-rendering/\n  exports: {\n    App\n  },\n\n  // This will only be called when loading your app in the browser. It won't\n  // be called when performing static generation.\n  async main() {\n    let navigation = Navi.createBrowserNavigation({\n      pages\n    });\n\n    // Wait until the navigation has loaded the page's content, or failed to do\n    // so. If you want to load other data in parallel while the initial page is\n    // loading, make sure to start loading before this line.\n    await navigation.steady();\n\n    // React requires that you call `ReactDOM.hydrate` if there is statically\n    // rendered content in the root element, but prefers us to call\n    // `ReactDOM.render` when it is empty.\n    let hasStaticContent = process.env.NODE_ENV === 'production';\n    let renderer = hasStaticContent ? ReactDOM.hydrate : ReactDOM.render;\n\n    // Start react, passing in the current navigation state via the\n    // NavProvider.\n    renderer(<App navigation={navigation} />, document.getElementById('root'));\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n  }\n});\n"],"sourceRoot":""}