{"version":3,"sources":["pages/posts/2019-11-16-use-subscription/document.mdx"],"names":["readingTime","text","minutes","time","words","MDXContent","props","_this","Object","_Users_Vae_Desktop_project_my_lanyincaos_cn_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_Vae_Desktop_project_my_lanyincaos_cn_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_Vae_Desktop_project_my_lanyincaos_cn_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","layout","_this$props","components","_Users_Vae_Desktop_project_my_lanyincaos_cn_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","parentName","href","id","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","React","Component","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"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","file":"static/js/37.7fd46dad.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\nexport const readingTime = {\"text\":\"9 min read\",\"minutes\":8.065,\"time\":483900,\"words\":1613}\n\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSubscription`}</MDXTag>{` 即订阅模式，这是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react`}</MDXTag>{` 自身提供的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Hook`}</MDXTag>{`, 本文主要通过几个方面来介绍这个 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Hook`}</MDXTag>{`, 大家也可以自行参考`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/facebook/react/blob/master/packages/use-subscription/README.md\"}}>{`官网`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"目录\"}}>{`目录`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`为什么会有这个 useSubscription`}<MDXTag name=\"ul\" components={components} parentName=\"li\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`When should you NOT use this?`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`What types of subscriptions can this support?`}</MDXTag>\n</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`useSubscription 的内部实现`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`手动实现一个 useSubscription`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"为什么会有这个-usesubscription\"}}>{`为什么会有这个 useSubscription`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/facebook/react/tree/master/packages/use-subscription\"}}>{`useSubscription`}</MDXTag>{` 的出现主要是为了在 React \bconcurrent mode 下可以安全的管理状态。\n主要用于读取某个值，值发生变化的时候可以同步更新相应的组件然后展示出来。`}</MDXTag>\n<MDXTag name=\"h4\" components={components} props={{\"id\":\"when-should-you-not-use-this\"}}>{`When should you NOT use this?`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Redux/Flux stores should use the context API instead.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`I/O subscriptions (e.g. notifications) that update infrequently should use a mechanism like react-cache instead.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Complex libraries like Relay/Apollo should manage subscriptions manually with the same techniques which this library uses under the hood (as referenced here) in a way that is most optimized for their library usage.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h4\" components={components} props={{\"id\":\"what-types-of-subscriptions-can-this-support\"}}>{`What types of subscriptions can this support?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This abstraction can handle a variety of subscription types, including:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Event dispatchers like HTMLInputElement.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Custom pub/sub components like Relay’s FragmentSpecResolver.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Observable types like RxJS BehaviorSubject and ReplaySubject. (Types like RxJS Subject or Observable are not supported, because they provide no way to read the “current” value after it has been emitted.)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note that JavaScript promises are also not supported because they provide no way to synchronously read the “current” value.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`以上信息都来自官网`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"usesubscription-的内部实现\"}}>{`useSubscription 的内部实现`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSubscription`}</MDXTag>{` 的`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/facebook/react/blob/master/packages/use-subscription/src/useSubscription.js\"}}>{`内部代码`}</MDXTag>{`很简单，不超过 20 行，在内部实现对任意的值的订阅`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"24,25,26,27,28,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> useDebugValue<span class=\\\"token punctuation\\\">,</span> useEffect<span class=\\\"token punctuation\\\">,</span> useState <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// Hook used for safely managing subscriptions in concurrent mode.</span>\\n<span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token comment\\\">// In order to avoid removing and re-adding subscriptions each time this hook is called,</span>\\n<span class=\\\"token comment\\\">// the parameters passed to this hook should be memoized in some way–</span>\\n<span class=\\\"token comment\\\">// either by wrapping the entire params object with useMemo()</span>\\n<span class=\\\"token comment\\\">// or by wrapping the individual callbacks with useCallback().</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span> useSubscription<span class=\\\"token operator\\\">&lt;</span>Value<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// (Synchronously) returns the current value of our subscription.</span>\\n  getCurrentValue<span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// This function is passed an event handler to attach to the subscription.</span>\\n  <span class=\\\"token comment\\\">// It should return an unsubscribe function that removes the handler.</span>\\n  subscribe\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">|</span>\\n  <span class=\\\"token function-variable function\\\">getCurrentValue</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> Value<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function-variable function\\\">subscribe</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">callback<span class=\\\"token punctuation\\\">:</span> Function</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">void</span>\\n<span class=\\\"token operator\\\">|</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> Value <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Read the current value from our subscription.</span>\\n  <span class=\\\"token comment\\\">// When this value changes, we'll schedule an update with React.</span>\\n  <span class=\\\"token comment\\\">// It's important to also store the hook params so that we can check for staleness.</span>\\n  <span class=\\\"token comment\\\">// (See the comment in checkForUpdates() below for more info.)</span>\\n<span class=\\\"highlighted-line\\\">  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>state<span class=\\\"token punctuation\\\">,</span> setState<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span></span><span class=\\\"highlighted-line\\\">    getCurrentValue<span class=\\\"token punctuation\\\">,</span></span><span class=\\\"highlighted-line\\\">    subscribe<span class=\\\"token punctuation\\\">,</span></span><span class=\\\"highlighted-line\\\">    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">getCurrentValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span></span><span class=\\\"highlighted-line\\\">  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></span>\\n  <span class=\\\"token keyword\\\">let</span> valueToReturn <span class=\\\"token operator\\\">=</span> state<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// If parameters have changed since our last render, schedule an update with its current value.</span>\\n<span class=\\\"highlighted-line\\\">  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span></span><span class=\\\"highlighted-line\\\">    state<span class=\\\"token punctuation\\\">.</span>getCurrentValue <span class=\\\"token operator\\\">!==</span> getCurrentValue <span class=\\\"token operator\\\">||</span></span><span class=\\\"highlighted-line\\\">    state<span class=\\\"token punctuation\\\">.</span>subscribe <span class=\\\"token operator\\\">!==</span> subscribe</span><span class=\\\"highlighted-line\\\">  <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span></span><span class=\\\"highlighted-line\\\">    <span class=\\\"token comment\\\">// If the subscription has been updated, we'll schedule another update with React.</span></span><span class=\\\"highlighted-line\\\">    <span class=\\\"token comment\\\">// React will process this update immediately, so the old subscription value won't be committed.</span></span><span class=\\\"highlighted-line\\\">    <span class=\\\"token comment\\\">// It is still nice to avoid returning a mismatched value though, so let's override the return value.</span></span><span class=\\\"highlighted-line\\\">    valueToReturn <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getCurrentValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></span><span class=\\\"highlighted-line\\\"></span><span class=\\\"highlighted-line\\\">    <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span></span><span class=\\\"highlighted-line\\\">      getCurrentValue<span class=\\\"token punctuation\\\">,</span></span><span class=\\\"highlighted-line\\\">      subscribe<span class=\\\"token punctuation\\\">,</span></span><span class=\\\"highlighted-line\\\">      value<span class=\\\"token punctuation\\\">:</span> valueToReturn</span><span class=\\\"highlighted-line\\\">    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></span><span class=\\\"highlighted-line\\\">  <span class=\\\"token punctuation\\\">}</span></span>\\n  <span class=\\\"token comment\\\">// Display the current value for this hook in React DevTools.</span>\\n  <span class=\\\"token function\\\">useDebugValue</span><span class=\\\"token punctuation\\\">(</span>valueToReturn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// It is important not to subscribe while rendering because this can lead to memory leaks.</span>\\n  <span class=\\\"token comment\\\">// (Learn more at reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects)</span>\\n  <span class=\\\"token comment\\\">// Instead, we wait until the commit phase to attach our handler.</span>\\n  <span class=\\\"token comment\\\">//</span>\\n  <span class=\\\"token comment\\\">// We intentionally use a passive effect (useEffect) rather than a synchronous one (useLayoutEffect)</span>\\n  <span class=\\\"token comment\\\">// so that we don't stretch the commit phase.</span>\\n  <span class=\\\"token comment\\\">// This also has an added benefit when multiple components are subscribed to the same source:</span>\\n  <span class=\\\"token comment\\\">// It allows each of the event handlers to safely schedule work without potentially removing an another handler.</span>\\n  <span class=\\\"token comment\\\">// (Learn more at https://codesandbox.io/s/k0yvr5970o)</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> didUnsubscribe <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">checkForUpdates</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// It's possible that this callback will be invoked even after being unsubscribed,</span>\\n      <span class=\\\"token comment\\\">// if it's removed as a result of a subscription event/update.</span>\\n      <span class=\\\"token comment\\\">// In this case, React will log a DEV warning about an update from an unmounted component.</span>\\n      <span class=\\\"token comment\\\">// We can avoid triggering that warning with this check.</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>didUnsubscribe<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token comment\\\">// We use a state updater function to avoid scheduling work for a stale source.</span>\\n      <span class=\\\"token comment\\\">// However it's important to eagerly read the currently value,</span>\\n      <span class=\\\"token comment\\\">// so that all scheduled work shares the same value (in the event of multiple subscriptions).</span>\\n      <span class=\\\"token comment\\\">// This avoids visual \\\"tearing\\\" when a mutation happens during a (concurrent) render.</span>\\n      <span class=\\\"token keyword\\\">const</span> value <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getCurrentValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n      <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">prevState</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// Ignore values from stale sources!</span>\\n        <span class=\\\"token comment\\\">// Since we subscribe an unsubscribe in a passive effect,</span>\\n        <span class=\\\"token comment\\\">// it's possible that this callback will be invoked for a stale (previous) subscription.</span>\\n        <span class=\\\"token comment\\\">// This check avoids scheduling an update for that stale subscription.</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>\\n          prevState<span class=\\\"token punctuation\\\">.</span>getCurrentValue <span class=\\\"token operator\\\">!==</span> getCurrentValue <span class=\\\"token operator\\\">||</span>\\n          prevState<span class=\\\"token punctuation\\\">.</span>subscribe <span class=\\\"token operator\\\">!==</span> subscribe\\n        <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> prevState<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token comment\\\">// Some subscriptions will auto-invoke the handler, even if the value hasn't changed.</span>\\n        <span class=\\\"token comment\\\">// If the value hasn't changed, no update is needed.</span>\\n        <span class=\\\"token comment\\\">// Return state as-is so React can bail out and avoid an unnecessary render.</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">===</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> prevState<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>prevState<span class=\\\"token punctuation\\\">,</span> value <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> unsubscribe <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">subscribe</span><span class=\\\"token punctuation\\\">(</span>checkForUpdates<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// Because we're subscribing in a passive effect,</span>\\n    <span class=\\\"token comment\\\">// it's possible that an update has occurred between render and our effect handler.</span>\\n    <span class=\\\"token comment\\\">// Check for this and schedule an update if work has occurred.</span>\\n    <span class=\\\"token function\\\">checkForUpdates</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      didUnsubscribe <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">unsubscribe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>getCurrentValue<span class=\\\"token punctuation\\\">,</span> subscribe<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// Return the current value for our caller to use while rendering.</span>\\n  <span class=\\\"token keyword\\\">return</span> valueToReturn<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`不妨对源码进行分析，首先关注`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>state<span class=\\\"token punctuation\\\">,</span> setState<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  getCurrentValue<span class=\\\"token punctuation\\\">,</span>\\n  subscribe<span class=\\\"token punctuation\\\">,</span>\\n  value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">getCurrentValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`这里把 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`props`}</MDXTag>{` 转换成 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` 来存储，这个相当于 class 中的 props 转成 state 是一样的。那为什么需要这么做呢？\n在 class 中把 props 同步成 state 的地方有三个声明周期的钩子可以做到，`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`一个是已经标记为 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`unsafe`}</MDXTag>{` 的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`componentWillReceiveProps`}</MDXTag>{` 在接收到新的 props 的时候可以转换成 state,`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`另外是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`componentDidUpdate`}</MDXTag>{` 在每次更新的时候，可以对 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`this.props`}</MDXTag>{` 和 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`pre.props`}</MDXTag>{` 进行比较，然后在内部进行 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`setState`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`是一个静态方法即 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`getDrivedStateFromProps`}</MDXTag>{` 在这个静态方法中返回相应的 state.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`这三个方法执行的顺序是不一样的。但是在函数组件中，淡化了生命周期的概念，那么如何模拟 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getDrivedStateFromProps`}</MDXTag>{` 或 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`componentWillReceiveProps`}</MDXTag>{` 呢。\n如果需要模拟这两个生命周期的话，那么又想做优化，就需要比较上一次的值和下一次的值，上一次的值存储在哪里呢？此时就可以存储到 state 中，然后下一次 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{` 的时候，\n比较这一次的 props 和 state 如果不一样则重新 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`setState`}</MDXTag>{`, 即下面这段代码`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>\\n  state<span class=\\\"token punctuation\\\">.</span>getCurrentValue <span class=\\\"token operator\\\">!==</span> getCurrentValue <span class=\\\"token operator\\\">||</span>\\n  state<span class=\\\"token punctuation\\\">.</span>subscribe <span class=\\\"token operator\\\">!==</span> subscribe\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// If the subscription has been updated, we'll schedule another update with React.</span>\\n  <span class=\\\"token comment\\\">// React will process this update immediately, so the old subscription value won't be committed.</span>\\n  <span class=\\\"token comment\\\">// It is still nice to avoid returning a mismatched value though, so let's override the return value.</span>\\n  valueToReturn <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getCurrentValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    getCurrentValue<span class=\\\"token punctuation\\\">,</span>\\n    subscribe<span class=\\\"token punctuation\\\">,</span>\\n    value<span class=\\\"token punctuation\\\">:</span> valueToReturn\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`通过上述代码，我们已经知道如何更新新的状态，那么在值发生变化的时候还需要执行状态的变更从而实现组件的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`re-render`}</MDXTag>{`，这段代码就是在 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useEffect`}</MDXTag>{` 中`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"24,25,26,46\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> didUnsubscribe <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">checkForUpdates</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// It's possible that this callback will be invoked even after being unsubscribed,</span>\\n    <span class=\\\"token comment\\\">// if it's removed as a result of a subscription event/update.</span>\\n    <span class=\\\"token comment\\\">// In this case, React will log a DEV warning about an update from an unmounted component.</span>\\n    <span class=\\\"token comment\\\">// We can avoid triggering that warning with this check.</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>didUnsubscribe<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">// We use a state updater function to avoid scheduling work for a stale source.</span>\\n    <span class=\\\"token comment\\\">// However it's important to eagerly read the currently value,</span>\\n    <span class=\\\"token comment\\\">// so that all scheduled work shares the same value (in the event of multiple subscriptions).</span>\\n    <span class=\\\"token comment\\\">// This avoids visual \\\"tearing\\\" when a mutation happens during a (concurrent) render.</span>\\n    <span class=\\\"token keyword\\\">const</span> value <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getCurrentValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">prevState</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// Ignore values from stale sources!</span>\\n      <span class=\\\"token comment\\\">// Since we subscribe an unsubscribe in a passive effect,</span>\\n      <span class=\\\"token comment\\\">// it's possible that this callback will be invoked for a stale (previous) subscription.</span>\\n      <span class=\\\"token comment\\\">// This check avoids scheduling an update for that stale subscription.</span>\\n<span class=\\\"highlighted-line\\\">      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span></span><span class=\\\"highlighted-line\\\">        prevState<span class=\\\"token punctuation\\\">.</span>getCurrentValue <span class=\\\"token operator\\\">!==</span> getCurrentValue <span class=\\\"token operator\\\">||</span></span><span class=\\\"highlighted-line\\\">        prevState<span class=\\\"token punctuation\\\">.</span>subscribe <span class=\\\"token operator\\\">!==</span> subscribe</span>      <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> prevState<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token comment\\\">// Some subscriptions will auto-invoke the handler, even if the value hasn't changed.</span>\\n      <span class=\\\"token comment\\\">// If the value hasn't changed, no update is needed.</span>\\n      <span class=\\\"token comment\\\">// Return state as-is so React can bail out and avoid an unnecessary render.</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">===</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> prevState<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span>prevState<span class=\\\"token punctuation\\\">,</span> value <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> unsubscribe <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">subscribe</span><span class=\\\"token punctuation\\\">(</span>checkForUpdates<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// Because we're subscribing in a passive effect,</span>\\n  <span class=\\\"token comment\\\">// it's possible that an update has occurred between render and our effect handler.</span>\\n  <span class=\\\"token comment\\\">// Check for this and schedule an update if work has occurred.</span>\\n<span class=\\\"highlighted-line\\\">  <span class=\\\"token function\\\">checkForUpdates</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    didUnsubscribe <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">unsubscribe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>getCurrentValue<span class=\\\"token punctuation\\\">,</span> subscribe<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`在 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useEffect`}</MDXTag>{` 中会进行值的比较来优化 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag>{`， 如果值不发生变化则不进行`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token operator\\\">===</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> prevState<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`并且在 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getCurrentValue`}</MDXTag>{` 和 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe`}</MDXTag>{` 发生变化的时候则重新执行 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useEffect`}</MDXTag>{`, 总的来说源码非常简单，那么 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSubscription`}</MDXTag>{` 的应用场景有哪些呢？\n这些在官网上都已经标记了出来。`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/facebook/react/blob/master/packages/use-subscription/src/__tests__/useSubscription-test.internal.js\"}}>{`点击查看`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"手动实现一个-usesubscription\"}}>{`手动实现一个 useSubscription`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`我们已经知道了 React 本身的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSubscription`}</MDXTag>{` 的事情，那么我们能否自己实现一个这样形式的订阅呢？首先 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSubscription`}</MDXTag>{` 现在通常用于状态管理库中，类似的有 Redux 的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSelector`}</MDXTag>{`,\n目前其他的一些库也都实现了类似的效果。那么不妨就实现一个类似的也叫做 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSelector`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`首先定义这个函数`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useSelector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// do something</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`先考虑一下 useSelector 需要做什么， `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSelector`}</MDXTag>{` 需要是在监听的值发生变化的时候渲染这个组件。通过渲染一个组件有多种方式，不妨写一个 hook 叫做 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useForceUpdate`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useForceUpdate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>update<span class=\\\"token punctuation\\\">,</span> setUpdate<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">forceUpdate</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setUpdate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>update<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> forceUpdate<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`有了 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`forceUpdate`}</MDXTag>{` 后需要实现一个和 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSubscription`}</MDXTag>{` 一个的优化效果，就是需要一个比较函数， 我们不像 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSubscription`}</MDXTag>{` 那样直接暴露一个叫做 getCurrentValue 的方法，因为\n`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSelector`}</MDXTag>{` 是为了拿到 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` 中的数据，只有在 store 中的数据发生变化的时候才会 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`render`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">compare</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">oldValue<span class=\\\"token punctuation\\\">,</span> newValue</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// value 是一个数组</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>oldValue<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> newValue<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> oldValue<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>oldValue<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> newValue<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`有了比较函数后就可以实现 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSelector`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSelector`}</MDXTag>{` 需要监听器的值是用户传入的，通常用户需要监听器的值是存储在 store 中的值，所以我们可以给 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSelector`}</MDXTag>{` 传递一个函数，\n函数的第一个参数就是我们的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useSelector</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">depFn</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 通过某个 context 获取到 sunscribers</span>\\n  <span class=\\\"token keyword\\\">const</span> subscribers <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useContext</span><span class=\\\"token punctuation\\\">(</span>xxx<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> forceUpdate <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useForceUpdate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> depFnRef <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span>depFn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  depFnRef<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> depFn<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> depValueRef <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">depFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 这里是 useEffect 中的 订阅函数</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 订阅函数存储的是 store, 可以在 useSelector 内部使用 useContext() 来获取这个 store</span>\\n    <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">subscriber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">store</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> oldValue <span class=\\\"token operator\\\">=</span> depValueRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">const</span> newValue <span class=\\\"token operator\\\">=</span> depFnRef<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">current</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">compare</span><span class=\\\"token punctuation\\\">(</span>oldValue<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 如果不相等则强制更新</span>\\n        <span class=\\\"token function\\\">forceUpdate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        depValueRef<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    subscribers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">register</span><span class=\\\"token punctuation\\\">(</span>subscriber<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      subscribers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unregister</span><span class=\\\"token punctuation\\\">(</span>subscriber<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`那么 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribers`}</MDXTag>{` 是什么样子的呢？`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribers`}</MDXTag>{` 需要有 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`register`}</MDXTag>{` 和 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`unregister`}</MDXTag>{` 方法`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useSubscriber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">store</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> subscribersRef <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">register</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token parameter\\\">subscriber</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    subscribersRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span>subscriber<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">unregister</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token parameter\\\">subscriber</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>subscribersRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>subscriber<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      subscribersRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">delete</span><span class=\\\"token punctuation\\\">(</span>subscriber<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">notify</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> subscriber <span class=\\\"token keyword\\\">of</span> subscribersRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">subscriber</span><span class=\\\"token punctuation\\\">(</span>store<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> register<span class=\\\"token punctuation\\\">,</span> unregister <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`这就是一个 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSubscriber`}</MDXTag>{`, 内部实现了注册和取消注册的功能。那么这个 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSubscriber`}</MDXTag>{` 为什么还有一个 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`notify`}</MDXTag>{` 功能呢？ `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`notify`}</MDXTag>{` 的作用就是执行每一个\n监听器就是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Redux`}</MDXTag>{` 中的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`listener()`}</MDXTag>{` 是一样的。所以这里可以看做的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`listener()`}</MDXTag>{`。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`这基本上就是一个很基础的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSelector`}</MDXTag>{` 因为为了简便所以依赖于状态管理的一些参数，如果要实现任意值的监听。那么使用 React 本身的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useSubscription`}</MDXTag>{` 即可。目前可以用于\n事件的监听等等。这个对于非受控的表单作用会有很大很大。`}</MDXTag>\n           </MDXTag>\n  }\n}\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"目录\",\n    level: 2,\n    title: \"目录\",\n    children: [\n        {\n              id: \"为什么会有这个-usesubscription\",\n              level: 3,\n              title: \"为什么会有这个 useSubscription\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"usesubscription-的内部实现\",\n              level: 3,\n              title: \"useSubscription 的内部实现\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"手动实现一个-usesubscription\",\n              level: 3,\n              title: \"手动实现一个 useSubscription\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}