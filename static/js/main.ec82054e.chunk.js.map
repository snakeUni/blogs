{"version":3,"sources":["utils/formats.ts","components/ArticleMeta.tsx","components/ArticleMeta.module.css","components/BlogIndexPage.module.css","components/LoadingIndicator.module.css","components/BlogLayout.module.css","components/ArticleSummary.tsx","components/ArticleSummary.module.css","components/Bio.module.css","components/bio-pic.jpeg","components/BlogPostLayout.module.css","siteMetadata.ts","components/Bio.tsx","components/Pagination.tsx","components/BlogIndexPage.tsx","components/NotFoundPage.tsx","components/LoadingIndicator.tsx","components/BlogLayout.tsx","components/BlogPostLayout.tsx","pages/posts/index.ts","pages/index.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Pagination.module.css"],"names":["months","ArticleMeta","_ref","readingTimeElement","blogPathname","meta","readingTime","minutes","Math","max","round","cups","react_default","a","createElement","Fragment","className","styles","Array","fill","join","dateTime","date","toUTCString","dateString","Date","monthName","getMonth","dayOfMonth","getDate","fourDigitYear","getFullYear","concat","formatDate","tags","length","map","tag","key","es","href","module","exports","title","articlesList","footer","LoadingIndicator","active","LoadingIndicator-animation","container","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_navi__WEBPACK_IMPORTED_MODULE_1__","_ArticleMeta__WEBPACK_IMPORTED_MODULE_2__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3___default","ArticleSummary","route","url","spoiler","Bio","p","header","bio","links","next","content","siteMetadata","author","description","indexPageSize","props","src","bioPic","alt","Pagination","pageCount","pageNumber","dist_es","previous","String","pages","current","count","BlogIndexPage","postRoutes","components_Bio","components_Pagination","target","style","float","NotFoundPage","NotFound","BlogLayout","isViewingIndex","loadingRoute","components_LoadingIndicator","render","components_NotFoundPage","BlogPostLayout","_ref2","_ref3","MDXComponent","pathname","dist","components","NavLink","wrapper","_ref4","children","previousDetails","nextDetails","postModules","./2019-01-10-cache/post.ts","e","then","bind","./2019-02-15-hook/post.ts","./2019-02-19-try-catch/post.ts","./2019-04-13-forwardRef/post.ts","./2019-05-28-hooks-vs-class/post.ts","./2019-06-03-state/post.ts","./2019-08-10-context/post.ts","./2019-08-19-form/post.ts","./2019-08-24-how-to-use-context-efficient/post.ts","./2019-08-30-how-to-write-test/post.ts","./2019-09-06-the-rule-of-react/post.ts","./2019-09-19-a-little-react/post.ts","./2019-10-02-the-dep-of-use-hook/post.ts","./2019-11-02-a-callback-thinking/post.ts","./2019-11-16-use-subscription/post.ts","./2019-11-23-a-thought-of-hook/post.ts","./2019-11-24-how-to-study/post.ts","./2019-11-26-dev-sketch/post.ts","./2019-11-27-suiwen/post.ts","importPost","postPathnames","Object","keys","datePattern","postDetails","slug","slugify","replace","dateMatch","match","parseInt","posts","sortBy","reverse","i","getPage","_getPage","asyncToGenerator","regenerator_default","mark","_callee2","post","_getContent","previousSlug","previousPost","nextSlug","nextPost","previousPostDetails","nextPostDetails","wrap","_context2","prev","sent","default","getContent","objectWithoutProperties","abrupt","Navi","getMeta","env","objectSpread","_getContent2","_callee","other","_context","stop","apply","this","arguments","chunks","chunk","chunkPagePairs","pageTitle","Promise","all","router","resolve","withContent","_x2","components_BlogIndexPage","_x","pagesSwitch","remainingPathname","mountname","test","components_BlogLayout","paths","/","shift","/page","/1","fromPairs","/posts","components_BlogPostLayout","/tags","/about","/rss","resolveSiteMap","App","navigation","Component","Boolean","window","location","hostname","main","_main","steady","process","renderer","ReactDOM","hydrate","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec82054e.chunk.js","sourcesContent":["export let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\nexport function formatDate(dateString) {\n  let date = new Date(dateString)\n  let monthName = months[date.getMonth()]\n  let dayOfMonth = date.getDate()\n  let fourDigitYear = date.getFullYear()\n\n  return `${monthName} ${dayOfMonth}, ${fourDigitYear}`\n}","import { join } from 'path';\nimport React from 'react';\nimport { NavLink } from 'react-navi';\nimport { formatDate } from '../utils/formats';\nimport styles from './ArticleMeta.module.css';\n\ninterface ArticleMetaProps {\n  blogPathname: string;\n  meta: any;\n  readingTime?: any;\n}\n\nfunction ArticleMeta({ blogPathname, meta, readingTime }: ArticleMetaProps) {\n  let readingTimeElement;\n  if (readingTime) {\n    let minutes = Math.max(Math.round(readingTime.minutes), 1);\n    let cups = Math.round(minutes / 5);\n    readingTimeElement = (\n      <React.Fragment>\n        {' '}\n        &bull;{' '}\n        <span className={styles.readingTime}>\n          {new Array(cups || 1).fill('☕️').join('')} {minutes} min read\n        </span>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <small className={styles.ArticleMeta}>\n      <time dateTime={meta.date.toUTCString()}>{formatDate(meta.date)}</time>\n      {meta.tags && meta.tags.length && (\n        <>\n          {' '}\n          &bull;{' '}\n          <ul className={styles.tags}>\n            {meta.tags.map(tag => (\n              <li key={tag}>\n                <NavLink href={join(blogPathname, 'tags', tag)}>{tag}</NavLink>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n      {readingTimeElement || null}\n    </small>\n  );\n}\n\nexport default ArticleMeta;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"ArticleMeta_tags__30Wbg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogIndexPage_title__7sQL0\",\"articlesList\":\"BlogIndexPage_articlesList__3AVkt\",\"footer\":\"BlogIndexPage_footer__2Lkd5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoadingIndicator\":\"LoadingIndicator_LoadingIndicator__LXZCC\",\"active\":\"LoadingIndicator_active__1D6Al\",\"LoadingIndicator-animation\":\"LoadingIndicator_LoadingIndicator-animation__3Z27c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BlogLayout_container__1wjbv\",\"title\":\"BlogLayout_title__U0zfd\"};","import { Route } from 'navi';\nimport React from 'react';\nimport { NavLink } from 'react-navi';\nimport ArticleMeta from './ArticleMeta';\nimport styles from './ArticleSummary.module.css';\n\ninterface ArticleSummaryProps {\n  blogPathname: string;\n  route: Route;\n}\n\nfunction ArticleSummary({ blogPathname, route }: ArticleSummaryProps) {\n  return (\n    <article className={styles.ArticleSummary}>\n      <h2>\n        <NavLink href={route.url.href}>{route.title}</NavLink>\n      </h2>\n      <ArticleMeta blogPathname={blogPathname} meta={route.meta} />\n      <p>{route.meta.spoiler}</p>\n    </article>\n  );\n}\n\nexport default ArticleSummary;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ArticleSummary\":\"ArticleSummary_ArticleSummary__1R05r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bio\":\"Bio_Bio__1eiKY\"};","module.exports = __webpack_public_path__ + \"static/media/bio-pic.fdbb64ab.jpeg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogPostLayout_title__1egAZ\",\"header\":\"BlogPostLayout_header__6lPZ1\",\"footer\":\"BlogPostLayout_footer__1p0Ii\",\"bio\":\"BlogPostLayout_bio__2AHhA\",\"links\":\"BlogPostLayout_links__1fVhZ\",\"next\":\"BlogPostLayout_next__3tOcG\",\"content\":\"BlogPostLayout_content__1CRXP\"};","export default {\n  // The blog's title as it appears in the layout header, and in the document\n  // <title> tag.\n  title: 'lanyincao',\n\n  author: 'lanyincao',\n  description: 'personal blog by lanyincao',\n\n  // The number of posts to a page on the site index.\n  indexPageSize: 10\n};\n","import React from \"react\";\nimport styles from \"./Bio.module.css\";\nimport bioPic from \"./bio-pic.jpeg\";\n\ninterface BioProps {\n  className?: string;\n}\n\nfunction Bio(props: BioProps) {\n  return (\n    <div\n      className={`\n      ${styles.Bio}\n      ${props.className || \"\"}\n    `}\n    >\n      <img src={bioPic} alt=\"lanyincao\" />\n      <p>\n        Personal blog by <a href=\"https://twitter.com/lanyincao\">lanyincao</a>.\n        <br />I can't sing, dance, rap but can code, 🏀\n      </p>\n    </div>\n  );\n}\n\nexport default Bio;\n","import { join } from 'path'\nimport React from 'react'\nimport { NavLink } from 'react-navi'\nimport styles from './Pagination.module.css'\n\ninterface PaginationProps {\n  blogPathname: string\n  pageCount: number\n  pageNumber: number\n}\n\nfunction Pagination({ blogPathname, pageCount, pageNumber }: PaginationProps) {\n  return (\n    <small className={styles.Pagination}>\n      {pageNumber !== 1 && (\n        <NavLink\n          className={styles.previous}\n          href={join(blogPathname, 'page', String(pageNumber - 1))}>\n          ← Previous\n        </NavLink>\n      )}\n      <span className={styles.pages}>\n        {' '}\n        Page <span className={styles.current}>{pageNumber}</span>/\n        <span className={styles.count}>{pageCount}</span>{' '}\n      </span>\n      {pageNumber < pageCount && (\n        <NavLink\n          className={styles.next}\n          href={join(blogPathname, 'page', String(pageNumber + 1))}>\n          Next →\n        </NavLink>\n      )}\n    </small>\n  )\n}\n\nexport default Pagination\n","import { Route } from 'navi';\nimport React from 'react';\nimport { NavLink } from 'react-navi';\nimport siteMetadata from '../siteMetadata';\nimport ArticleSummary from './ArticleSummary';\nimport Bio from './Bio';\n// import Toggle from './toggle';\nimport Pagination from './Pagination';\nimport styles from './BlogIndexPage.module.css';\n\ninterface BlogIndexPageProps {\n  blogPathname: string;\n  pageCount: number;\n  pageNumber: number;\n  postRoutes: Route[];\n}\n\nfunction BlogIndexPage({\n  blogPathname,\n  pageCount,\n  pageNumber,\n  postRoutes\n}: BlogIndexPageProps) {\n  return (\n    <div>\n      <header>\n        <h1 className={styles.title}>\n          <NavLink href={blogPathname}>{siteMetadata.title}</NavLink>\n          {/* <Toggle /> */}\n        </h1>\n        <Bio />\n      </header>\n      <ul className={styles.articlesList}>\n        {postRoutes.map(route => (\n          <li key={route.url.href}>\n            <ArticleSummary blogPathname={blogPathname} route={route} />\n          </li>\n        ))}\n      </ul>\n      {pageCount > 1 && (\n        <Pagination\n          blogPathname={blogPathname}\n          pageCount={pageCount}\n          pageNumber={pageNumber}\n        />\n      )}\n      <footer className={styles.footer}>\n        <div>\n          <a href=\"./rss.xml\" target=\"_blank\" style={{ float: 'right' }}>\n            RSS\n          </a>\n          <a href=\"https://twitter.com/lanyincao\">twitter</a> &bull;{' '}\n          <a href=\"https://github.com/snakeUni/uni-blog\">github</a> &bull;{' '}\n          <NavLink href=\"./about\">About Me</NavLink> &bull;{' '}\n          <NavLink href=\"./tags\">Tags</NavLink>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default BlogIndexPage;\n","import React from 'react'\nimport styles from './NotFoundPage.module.css'\n\n// Note that create-react-navi-app will always show an error screen when this\n// is rendered. This is because the underlying react-scripts package shows\n// the error screen when a NotFoundError is thrown, even though it's caught\n// by <NavNotFoundBoundary>. To see the error rendered by this function,\n// you'll just need to close the error overlay with the \"x\" at the top right.\nfunction NotFoundPage() {\n  return (\n    <div className={styles.NotFound}>\n      <h1>404 - Not Found</h1>\n    </div>\n  )\n}\n\nexport default NotFoundPage\n","import React from 'react'\nimport styles from './LoadingIndicator.module.css'\n\ninterface LoadingIndicatorProps {\n  active?: boolean\n  className?: string\n  style?: React.CSSProperties\n}\n\nfunction LoadingIndicator({ active, className, style }: LoadingIndicatorProps) {\n  return (\n    <div\n      className={`\n        ${styles.LoadingIndicator}\n        ${active ? styles.active : ''}\n        ${className}\n      `}\n      style={style}\n    />\n  )\n}\n\nexport default LoadingIndicator\n","import React from 'react'\nimport {\n  NavContent,\n  NavLink,\n  NavLoading,\n  NavNotFoundBoundary,\n} from 'react-navi'\nimport siteMetadata from '../siteMetadata'\nimport NotFoundPage from './NotFoundPage'\nimport LoadingIndicator from './LoadingIndicator'\nimport styles from './BlogLayout.module.css'\n\ninterface BlogLayoutProps {\n  blogPathname: string\n  isViewingIndex: boolean\n}\n\nfunction BlogLayout({ blogPathname, isViewingIndex }: BlogLayoutProps) {\n  return (\n    // Once hooks are released, `<NavLoading>` will be able to be replaced\n    // with the new `useLoadingRoute` hooks.\n    <NavLoading>\n      {loadingRoute => (\n        <div className={styles.container}>\n          <LoadingIndicator active={!!loadingRoute} />\n\n          {// Don't show the header on index pages, as it has a special\n          // header.\n          !isViewingIndex && (\n            <header>\n              <h3 className={styles.title}>\n                <NavLink href={blogPathname}>{siteMetadata.title}</NavLink>\n              </h3>\n            </header>\n          )}\n\n          <main>\n            <NavNotFoundBoundary render={() => <NotFoundPage />}>\n              <NavContent />\n            </NavNotFoundBoundary>\n          </main>\n        </div>\n      )}\n    </NavLoading>\n  )\n}\n\nexport default BlogLayout\n","import React from 'react';\nimport { NavContent, NavLink } from 'react-navi';\nimport { MDXProvider } from '@mdx-js/tag';\nimport siteMetadata from '../siteMetadata';\nimport ArticleMeta from './ArticleMeta';\nimport Bio from './Bio';\nimport styles from './BlogPostLayout.module.css';\nimport Pay from './zf.jpeg';\n\ninterface BlogPostLayoutProps {\n  blogPathname: string;\n}\n\nfunction BlogPostLayout({ blogPathname }: BlogPostLayoutProps) {\n  return (\n    <NavContent>\n      {({ MDXComponent, readingTime }, { title, meta, url }) => (\n        // The content for posts is an MDX component, so we'll need\n        // to use <MDXProvider> to ensure that links are rendered\n        // with <NavLink>, and thus use pushState.\n        <article className={styles.container}>\n          <header className={styles.header}>\n            <h1 className={styles.title}>\n              <NavLink href={url.pathname}>{title}</NavLink>\n            </h1>\n            <ArticleMeta\n              blogPathname={blogPathname}\n              meta={meta}\n              readingTime={readingTime}\n            />\n          </header>\n          <MDXProvider\n            components={{\n              a: NavLink,\n              wrapper: ({ children }) => (\n                <div className={styles.content}>{children}</div>\n              )\n            }}\n          >\n            <MDXComponent />\n          </MDXProvider>\n          {/* <div\n            className=\"pay\"\n            style={{ textAlign: 'center', marginTop: '5rem' }}\n          >\n            <h4>打赏</h4>\n            <img src={Pay} style={{ width: '30%' }} />\n          </div> */}\n          <footer className={styles.footer}>\n            <h3 className={styles.title}>\n              <NavLink href={blogPathname}>{siteMetadata.title}</NavLink>\n            </h3>\n            <Bio className={styles.bio} />\n            <section className={styles.links}>\n              {meta.previousDetails && (\n                <NavLink\n                  className={styles.previous}\n                  href={meta.previousDetails.href}\n                >\n                  ← {meta.previousDetails.title}\n                </NavLink>\n              )}\n              {meta.nextDetails && (\n                <NavLink className={styles.next} href={meta.nextDetails.href}>\n                  {meta.nextDetails.title} →\n                </NavLink>\n              )}\n            </section>\n          </footer>\n        </article>\n      )}\n    </NavContent>\n  );\n}\n\nexport default BlogPostLayout;\n","import importAll from 'import-all.macro'\nimport * as Navi from 'navi'\nimport { join } from 'path'\nimport { sortBy } from 'lodash'\nimport slugify from 'slugify'\n\n// Get a list of all posts, that will not be loaded until the user\n// requests them.\nconst postModules = importAll.deferred('./**/post.ts?(x)')\nconst importPost = pathname => postModules[pathname]()\nconst postPathnames = Object.keys(postModules)\nconst datePattern = /^((\\d{1,4})-(\\d{1,4})-(\\d{1,4}))[/-]/\n\nlet postDetails = postPathnames.map(pathname => {\n  let slug = slugify(\n    pathname.replace(/post.tsx?$/, '').replace(/(\\d)\\/(\\d)/, '$1-$2'),\n  )\n    .replace(/^[-.]+|[.-]+$/g, '')\n    .replace(datePattern, '$1/')\n\n  let date\n  let dateMatch = slug.match(datePattern)\n  if (dateMatch) {\n    date = new Date(\n      parseInt(dateMatch[2], 10),\n      parseInt(dateMatch[3], 10) - 1,\n      parseInt(dateMatch[4], 10),\n    )\n  }\n\n  return {\n    slug,\n    pathname,\n    date,\n  }\n})\n\n// Sort the pages by slug (which contain the dates)\npostDetails = sortBy(postDetails, ['slug']).reverse()\n\n// Create url-friendly slugs from post pathnames, and a `getPage()` function\n// that can be used to load and return the post's Page object.\nlet posts = postDetails.map(({ slug, pathname, date }, i) => ({\n  getPage: async () => {\n    let { default: post } = await importPost(pathname)\n    let { title, getContent, ...meta } = post\n    let previousSlug, previousPost, nextSlug, nextPost\n\n    if (i !== 0) {\n      let previousPostDetails = postDetails[i - 1]\n      previousPost = (await importPost(previousPostDetails.pathname)).default\n      previousSlug = previousPostDetails.slug\n    }\n\n    if (i + 1 < postDetails.length) {\n      let nextPostDetails = postDetails[i + 1]\n      nextPost = (await importPost(nextPostDetails.pathname)).default\n      nextSlug = nextPostDetails.slug\n    }\n\n    return Navi.createPage({\n      title,\n      getMeta: env => ({\n        date,\n        pathname,\n        slug,\n        previousDetails: previousPost && {\n          title: previousPost.title,\n          href: join(env.pathname, '../..', previousSlug),\n        },\n        nextDetails: nextPost && {\n          title: nextPost.title,\n          href: join(env.pathname, '../..', nextSlug),\n        },\n        ...meta,\n      }),\n      getContent: async () => {\n        let { default: MDXComponent, ...other } = await getContent()\n        return { MDXComponent, ...other }\n      },\n    })\n  },\n  slug,\n}))\n\nexport default posts\n","import * as Navi from 'navi';\nimport React from 'react';\nimport { join } from 'path';\nimport { chunk, fromPairs } from 'lodash';\nimport BlogIndexPage from '../components/BlogIndexPage';\nimport BlogLayout from '../components/BlogLayout';\nimport BlogPostLayout from '../components/BlogPostLayout';\nimport siteMetadata from '../siteMetadata';\nimport posts from './posts';\n\n// Split the posts into a list of chunks of the given size, and\n// then build index pages for each chunk.\nlet chunks = chunk(posts, siteMetadata.indexPageSize);\nlet chunkPagePairs = chunks.map((chunk, i) => [\n  '/' + (i + 1),\n  async (env: Navi.Env) => {\n    // Get the blog's root pathname, as all index pages other than the first\n    // one are mounted at `/pages/n`\n    let blogPathname = i === 0 ? env.pathname : join(env.pathname, '../..');\n\n    // Get metadata for all pages on this page\n    let postRoutes = await Promise.all<Navi.Route>(\n      chunk.map(async post => {\n        let href = join(blogPathname, 'posts', post.slug);\n        return await env.router.resolve(href, {\n          // If you want to show the page content on the index page, set\n          // this to true to be able to access it.\n          withContent: false\n        });\n      })\n    );\n\n    // Only add a page number to the page title after the first index page.\n    let pageTitle = siteMetadata.title;\n    if (i > 0) {\n      pageTitle += ` – page ${i + 1}`;\n    }\n\n    return Navi.createPage({\n      title: pageTitle,\n      getContent: () => (\n        <BlogIndexPage\n          blogPathname={blogPathname}\n          pageNumber={i + 1}\n          pageCount={chunks.length}\n          postRoutes={postRoutes}\n        />\n      )\n    });\n  }\n]);\n\nconst pagesSwitch = Navi.createSwitch({\n  getContent: env => {\n    // Check if the current page is an index page by comparing the remaining\n    // portion of the URL's pathname with the index page paths.\n    let remainingPathname = env.url.pathname.replace(env.mountname, '');\n    let isViewingIndex =\n      remainingPathname === '/' || /^\\/page\\/\\d+\\/$/.test(remainingPathname);\n\n    // Wrap the current page's content with a React Context to pass global\n    // configuration to the blog's components.\n    return (\n      <BlogLayout\n        blogPathname={env.pathname || '/'}\n        isViewingIndex={isViewingIndex}\n      />\n    );\n  },\n\n  paths: {\n    // The blog's index pages go here. The first index page is mapped to the\n    // root URL, with a redirect from \"/page/1\". Subsequent index pages are\n    // mapped to \"/page/n\".\n    '/': chunkPagePairs.shift()[1],\n    '/page': Navi.createSwitch({\n      paths: {\n        '/1': env => Navi.createRedirect(join(env.pathname, '../..')),\n        ...fromPairs(chunkPagePairs)\n      }\n    }),\n\n    // Put posts under \"/posts\", so that they can be wrapped with a\n    // \"<BlogPostLayout />\" that configures MDX and adds a post-specific layout.\n    '/posts': Navi.createSwitch({\n      getContent: env => (\n        <BlogPostLayout blogPathname={join(env.pathname, '..')} />\n      ),\n\n      paths: fromPairs(posts.map(post => ['/' + post.slug, post.getPage]))\n    }),\n\n    // Miscellaneous pages can be added directly to the root switch.\n    '/tags': () => import('./tags'),\n    '/about': () => import('./about'),\n\n    // Only the statically built copy of the RSS feed is intended to be opened,\n    // but the content is fetched here.\n    '/rss': Navi.createPage({\n      getContent: env =>\n        env.router.resolveSiteMap('/posts', {\n          withContent: true\n        })\n    })\n  }\n});\n\nexport default pagesSwitch;\n","import { Navigation } from 'navi'\nimport React, { Component } from 'react'\nimport { NavProvider, NavContent } from 'react-navi'\n\ninterface AppProps {\n  navigation: Navigation\n}\n\nclass App extends Component<AppProps> {\n  render() {\n    return (\n      <NavProvider navigation={this.props.navigation}>\n        <NavContent />\n      </NavProvider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import * as Navi from 'navi';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.module.css';\nimport pages from './pages';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// `Navi.app()` is responsible for exporting your app's pages and App\n// component to the static renderer, and for starting the app with the\n// `main()` function when running within a browser.\nNavi.app({\n  // Specify the pages that navi-app should statically build, by passing in a\n  // Switch object.\n  pages,\n\n  // The default create-react-app renderer needs access to the App component.\n  // Learn about custom static renderers at:\n  // https://frontarm.com/navi/guides/static-rendering/\n  exports: {\n    App\n  },\n\n  // This will only be called when loading your app in the browser. It won't\n  // be called when performing static generation.\n  async main() {\n    let navigation = Navi.createBrowserNavigation({\n      pages\n    });\n\n    // Wait until the navigation has loaded the page's content, or failed to do\n    // so. If you want to load other data in parallel while the initial page is\n    // loading, make sure to start loading before this line.\n    await navigation.steady();\n\n    // React requires that you call `ReactDOM.hydrate` if there is statically\n    // rendered content in the root element, but prefers us to call\n    // `ReactDOM.render` when it is empty.\n    let hasStaticContent = process.env.NODE_ENV === 'production';\n    let renderer = hasStaticContent ? ReactDOM.hydrate : ReactDOM.render;\n\n    // Start react, passing in the current navigation state via the\n    // NavProvider.\n    renderer(<App navigation={navigation} />, document.getElementById('root'));\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n  }\n});\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pagination\":\"Pagination_Pagination__3WU49\",\"previous\":\"Pagination_previous__B6XOs\",\"next\":\"Pagination_next__2UdE7\"};"],"sourceRoot":""}