{"version":3,"sources":["components/TagIndexPage.module.css","components/TagPage.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/TagIndexPage.tsx","components/TagPage.tsx","utils/getTagsFromSiteMap.ts","pages/tags.tsx"],"names":["module","exports","TagIndexPage","TagPage","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","_iterableToArrayLimit","TypeError","_nonIterableRest","_ref","tags","react_default","a","createElement","className","styles","map","tag","key","href","dist_es","name","count","blogPathname","routes","route","url","ArticleSummary","getTagsFromSiteMap","siteMap","Object","values","pages","from","Set","concat","apply","meta","tagsSwitch","Navi","paths","/","title","getContent","_getContent","asyncToGenerator","regenerator_default","mark","_callee","env","tagsPathname","tagRoutes","wrap","_context","prev","mountname","replace","router","resolveSiteMap","predicate","segment","pathname","indexOf","sent","fromPairs","toLowerCase","entries","forEach","_ref2","console","warn","abrupt","components_TagIndexPage","join","stop","_x","this","arguments","/:tag","getTitle","params","_getContent2","_callee2","lowerCaseTag","_context2","_ref3","_ref4","find","metaTag","components_TagPage","_x2"],"mappings":"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","file":"static/js/1.b92c5504.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagIndexPage\":\"TagIndexPage_TagIndexPage__gmhpe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagPage\":\"TagPage_TagPage__3PbdT\"};","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React from 'react'\nimport { NavLink } from 'react-navi'\nimport styles from './TagIndexPage.module.css'\n\ninterface Tag {\n  count: number\n  href: string\n  name: string\n}\n\ninterface TagIndexPage {\n  tags: Tag[]\n}\n\nfunction TagIndexPage({ tags }: TagIndexPage) {\n  return (\n    <div className={styles.TagIndexPage}>\n      <h1>Tags</h1>\n      <ul>\n        {tags.map(tag => (\n          <li key={tag.href}>\n            <NavLink href={tag.href}>\n              {tag.name} ({tag.count})\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagIndexPage\n","import React from 'react'\nimport ArticleSummary from './ArticleSummary'\nimport styles from './TagPage.module.css'\nimport { Route } from 'navi'\n\ninterface TagPageProps {\n  blogPathname: string\n  name: string\n  routes: Route[]\n}\n\nfunction TagPage({ blogPathname, name, routes }: TagPageProps) {\n  return (\n    <div className={styles.TagPage}>\n      <h1>{name} posts</h1>\n      <ul>\n        {routes.map(route => (\n          <li key={route.url.href}>\n            <ArticleSummary blogPathname={blogPathname} route={route} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagPage\n","import { SiteMap } from 'navi'\n\n/**\n * Returns an object mapping the URL of each of the site's pages to it's `title`\n * and `meta` objects.\n *\n * This object can be computed at runtime given a `router`, or read from a\n * global `pageDetailsMap` object. This allows for access to the page map during\n * development, while also allowing production builds to use a prebuilt copy.\n */\nfunction getTagsFromSiteMap(siteMap: SiteMap): string[] {\n  let routes = Object.values(siteMap.pages)\n  return Array.from(\n    new Set(\n      [].concat.apply(\n        [],\n        routes.map(route => (route.meta && route.meta.tags) || []),\n      ),\n    ),\n  )\n}\n\nexport default getTagsFromSiteMap\n","import React from 'react';\nimport * as Navi from 'navi';\nimport { join } from 'path';\nimport { fromPairs } from 'lodash';\nimport TagIndexPage from '../components/TagIndexPage';\nimport TagPage from '../components/TagPage';\nimport getTagsFromSiteMap from '../utils/getTagsFromSiteMap';\n\nconst tagsSwitch = Navi.createSwitch({\n  paths: {\n    '/': Navi.createPage({\n      title: 'Tags',\n\n      getContent: async env => {\n        // Build a list of pages for each tag\n        let tagsPathname = env.mountname.replace(/\\/$/, '');\n        let siteMap = await env.router.resolveSiteMap('/', {\n          predicate: segment =>\n            segment.url.pathname.indexOf(tagsPathname) === -1\n        });\n        let tags = getTagsFromSiteMap(siteMap);\n        let tagRoutes = fromPairs(tags.map(name => [name.toLowerCase(), []]));\n        Object.entries(siteMap.pages).forEach(([href, route]) => {\n          let meta = route.meta;\n          if (meta && meta.tags) {\n            meta.tags.forEach(tag => {\n              tag = tag.toLowerCase();\n              if (tagRoutes[tag]) {\n                tagRoutes[tag].push(route);\n              } else {\n                console.warn(\n                  `The page at \"${href}\" used unindexed tag \"${tag}\".`\n                );\n              }\n            });\n          }\n        });\n\n        return (\n          <TagIndexPage\n            tags={tags.map(name => ({\n              name,\n              href: join(env.mountname, name.toLowerCase()),\n              count: (tagRoutes[name] || []).length\n            }))}\n          />\n        );\n      }\n    }),\n\n    '/:tag': Navi.createPage({\n      getTitle: env => env.params.tag,\n      getContent: async env => {\n        let lowerCaseTag = env.params.tag.toLowerCase();\n\n        // Build a list of pages that include the tag from the site map\n        let tagsPathname = join(env.mountname, '..').replace(/\\/$/, '');\n        let siteMap = await env.router.resolveSiteMap('/', {\n          predicate: segment =>\n            segment.url.pathname.indexOf(tagsPathname) === -1\n        });\n        let routes = [] as Navi.Route[];\n        Object.entries(siteMap.pages).forEach(([href, route]) => {\n          let tags = (route.meta && route.meta.tags) || [];\n          if (tags.find(metaTag => metaTag.toLowerCase() === lowerCaseTag)) {\n            routes.push(route);\n          }\n        });\n\n        return (\n          <TagPage\n            blogPathname={join(env.pathname, '..', '..')}\n            name={env.params.tag}\n            routes={routes}\n          />\n        );\n      }\n    })\n  }\n});\n\nexport default tagsSwitch;\n"],"sourceRoot":""}