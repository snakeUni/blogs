{"version":3,"sources":["pages/posts/2019-08-30-how-to-write-test/document.mdx"],"names":["readingTime","text","minutes","time","words","MDXContent","props","_this","Object","_Users_Vae_Desktop_project_my_lanyincaos_cn_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_Vae_Desktop_project_my_lanyincaos_cn_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_Vae_Desktop_project_my_lanyincaos_cn_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","layout","_this$props","components","_Users_Vae_Desktop_project_my_lanyincaos_cn_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","parentName","href","id","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","React","Component","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"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","file":"static/js/32.9f8e8c89.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { MDXTag } from '@mdx-js/tag'\nexport const readingTime = {\"text\":\"3 min read\",\"minutes\":2.485,\"time\":149100,\"words\":497}\n\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}>{`测试有可能很多人都认为是这是测试人员应该做的事情，但是很多时候开发也需要来写测试，\n很久以前可能被大家所知道的就是 `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://zh.wikipedia.org/wiki/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95\"}}>{`黑盒测试`}</MDXTag>{`\n和 `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://zh.wikipedia.org/wiki/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95\"}}>{`白盒测试`}</MDXTag>{`， 一般开发在测试自己的代码的时候都是\n白盒测试，因为白盒测试是知道内部代码的逻辑的。相当于是完全透明的。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"测试是否有必要\"}}>{`测试是否有必要`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`很多开发可能不会去主动写测试，不写测试的原因可能会有很多。但是无非以下几个`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`不知道测试是什么`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`知道部分测试，但是不会写`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`忙于业务，根本没时间去写`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`代码完美，毫无破绽，完全不需要去写`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`那么是否需要些测试呢？测试的作用是让你对你的代码有信心，可以及时的发现内部的问题，然后及时修复，避免发到线上的时候会出现线上问题，\n那么应该如何写测试呢？`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"what-are-you-testing\"}}>{`what are you testing?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在开始写一个测试的时候，需要问自己一个问题，需要测试什么？首先对理解想要测试的什么，才可以真正的开始写测试，比如一个 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sum`}</MDXTag>{` 函数`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">a<span class=\\\"token punctuation\\\">,</span> b</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`这是一个求和函数，假如此时准备开始写测试了，所以确认需要测试的就是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sum`}</MDXTag>{` 这个函数, 知道这个函数的功能就是求和，所以第一步就是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`确认需要测试的是什么`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"what-should-it-do\"}}>{`What should it do?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`测试的这个做了什么，还是以求和函数为例，求和函数做的就是求和，并且知道调用求和函数 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sum(1,2)`}</MDXTag>{` 应该返回数字 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`3`}</MDXTag>{`, 只有知道测试什么以及，测试的这个做了\n什么才能很多的写出测试的描述信息`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'sum(1, 2) should return 3'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"what-is-the-output\"}}>{`what is the Output`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`输入是什么，在写一个测试的时候需要知道两个输入，第一个是实际的输出，比如 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sum(1, 2)`}</MDXTag>{`, 在调用 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sum(1, 2)`}</MDXTag>{` 的时候应该返回 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`3`}</MDXTag>{`, 这个数字 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`3`}</MDXTag>{` 就是实际的输出。\n第二个是期望的输出，这通常是一个断言，比如 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sum(2, 2)`}</MDXTag>{` 实际输出是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`4`}</MDXTag>{`, 但是期望输出 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`5`}</MDXTag>{`, 那么是否是代码内部逻辑的错误呢？这发生错误的时候，就需要去查看是否\n是内部逻辑导致的原因。`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"how-to-write-test\"}}>{`How to write test`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在写测试开始之前，上面三个问题是首先要考虑的，还是以 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sum`}</MDXTag>{` 函数为例，想要测试 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sum`}</MDXTag>{` 函数，首先就是需要测试正常的情况，比如都是数字的时候，现在开始写一个基本的测试`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'这里是描述信息，写的是测试了什么，以及期望返回是什么'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 这里是一个回调，主要写测试的代码 比如</span>\\n  <span class=\\\"token keyword\\\">const</span> total <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sum</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 接下来开始写断言，total 期望的值是 2, 所以可以写, 这里使用的都是 jest</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>total<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`通过这样一个基础的测试就可以完成了。这是对于`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`工具函数`}</MDXTag>{`的基本测试，那么对于 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react component`}</MDXTag>{` 以及自定义的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react hook`}</MDXTag>{` 应该如何测试呢？`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"test-react-component\"}}>{`test react component`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`不妨写一个基础的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Count`}</MDXTag>{` 组件`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Count</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>span<span class=\\\"token operator\\\">></span>count<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>count<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setCount</span><span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>increase<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">setCount</span><span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>decrease<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`这是一个 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Count`}</MDXTag>{` 基础组件, 这个组件包含了两个功能，首先是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`increase`}</MDXTag>{` 增加 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`count`}</MDXTag>{`, 还有一个是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`decrease`}</MDXTag>{` 减少 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`count`}</MDXTag>{`, 那么对于\n这个组件需要测试什么呢？针对这个组件，需要测试的就是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`increase`}</MDXTag>{` 和 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`decrease`}</MDXTag>{`, 首先要保证这两个按钮的功能是正常的，否则要用户使用的时候\n很可能就会存在 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`bug`}</MDXTag>{` 导致白屏。`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`后面使用的测试库都是 @testing/react-library`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`现在开始写这个测试，首先按照文章开头说的，需要测试的是什么，需要测试的是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Count`}</MDXTag>{` 组件，那么需要测试 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Count`}</MDXTag>{` 组件的什么？需要测试的是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Count`}</MDXTag>{`\n组件的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`increase`}</MDXTag>{` 和 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`decrease`}</MDXTag>{` 功能。现在知道测试的是什么了，那么接下来这个组件的行为是什么？点击 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`increase`}</MDXTag>{` 期望 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`count`}</MDXTag>{` 是增加了 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`1`}</MDXTag>{`,\n点击 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`decrease`}</MDXTag>{`, 期望 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`count`}</MDXTag>{` 是减少了 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`1`}</MDXTag>{`。那么现在所有情况都知道了，不妨开始写这个测试。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> render<span class=\\\"token punctuation\\\">,</span> fireEvent <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'@testing/react-library'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'expect count increase 1 by trigger increase'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// render 方法是 @testing/react-library 内置的方法</span>\\n  <span class=\\\"token comment\\\">// getByText 是通过文本来查找对应的 dom 节点</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> getByText <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>Count <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 找到 increase 的 dom 节点, getByText 支持正则表达式</span>\\n  <span class=\\\"token keyword\\\">const</span> increaseNode <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getByText</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/increase/i</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 触发点击效果</span>\\n  fireEvent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span>increaseNode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 这个的断言是很重要的, 在 Count 组件中有个 &lt;span>count: {count}&lt;/span></span>\\n  <span class=\\\"token comment\\\">// 所以点击按钮后，这里的 `count` 变为了 2, 只需要查找这个 2 是否存在</span>\\n  <span class=\\\"token comment\\\">// toBeNull 都是 jest 中的方法</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getByText</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/count: 2/i</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>not<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBeNull</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`increase`}</MDXTag>{` 的测试是完全通过的，那么 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`decrease`}</MDXTag>{` 也是一样的。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">as</span> React <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> render<span class=\\\"token punctuation\\\">,</span> fireEvent <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'@testing/react-library'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'expect count decrease 1 by trigger decrease'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// render 方法是 @testing/react-library 内置的方法</span>\\n  <span class=\\\"token comment\\\">// getByText 是通过文本来查找对应的 dom 节点</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> getByText <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&lt;</span>Count <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 找到 increase 的 dom 节点, getByText 支持正则表达式</span>\\n  <span class=\\\"token keyword\\\">const</span> decreaseNode <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getByText</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/decrease/i</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 触发点击效果</span>\\n  fireEvent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">click</span><span class=\\\"token punctuation\\\">(</span>decreaseNode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 这个的断言是很重要的, 在 Count 组件中有个 &lt;span>count: {count}&lt;/span></span>\\n  <span class=\\\"token comment\\\">// 所以点击按钮后，这里的 `count` 变为了 -1, 只需要查找这个 -1 是否存在</span>\\n  <span class=\\\"token comment\\\">// toBeNull 都是 jest 中的方法</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getByText</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\">/count: -1/i</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>not<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBeNull</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`这就是一个基础的组件的测试。那么如果是自定义的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Hook`}</MDXTag>{` 呢?`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"test-custom-hook\"}}>{`test custom hook`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`自定义的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Hook`}</MDXTag>{` 通常返回的并不是 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ReactNode`}</MDXTag>{`, 而是一些值或者说是函数之类的。那么不妨将上面的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Count`}</MDXTag>{` 组件修改成一个\n自定义的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Count`}</MDXTag>{` hook。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`首先确认这个自定义的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Hook`}</MDXTag>{`, 有 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`increase`}</MDXTag>{` 和 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`decrease`}</MDXTag>{` 功能，以及应该返回 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`count`}</MDXTag>{` 变量。那么开始写这个自定义的 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Hook`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useCount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">increase</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setCount</span><span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">decrease</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setCount</span><span class=\\\"token punctuation\\\">(</span>count <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> increase<span class=\\\"token punctuation\\\">,</span> decrease <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`针对这个应该如何测试呢？这个就是一个普通的函数，但是又不能当做普通函数来测试。这里也`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/testing-library/react-hooks-testing-library/issues\"}}>{`使用一个库`}</MDXTag>{`，这个库本身很简单，就是封装了 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react`}</MDXTag>{` 提供的测试工具。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`开始这个测试`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\",\"data-language\":\"jsx\",\"data-highlighted-line-numbers\":\"\",\"dangerouslySetInnerHTML\":{\"__html\":\"<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> renderHook<span class=\\\"token punctuation\\\">,</span> act <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react-hooks-testing-library'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'use count'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> result <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">renderHook</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">useCount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 拿到返回的结果, result 包含一个 current, 其中 current 指向返回值</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 调用 increase</span>\\n  <span class=\\\"token function\\\">act</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    result<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">increase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 调用 decrease, 因为之前已经变为 1 了</span>\\n  <span class=\\\"token function\\\">act</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    result<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">decrease</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\"}}}></MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"conclusion\"}}>{`conclusion`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在写一个测试的时候首先需要明确测试的是什么？知道测试的是什么后，需要知道测试的这个做了什么？然后输出是什么？期望输入是什么？当知道了这些之后\n再去写测试，就会很简单。`}</MDXTag>\n           </MDXTag>\n  }\n}\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"测试是否有必要\",\n    level: 2,\n    title: \"测试是否有必要\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"what-are-you-testing\",\n    level: 2,\n    title: \"what are you testing?\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"what-should-it-do\",\n    level: 2,\n    title: \"What should it do?\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"what-is-the-output\",\n    level: 2,\n    title: \"what is the Output\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"how-to-write-test\",\n    level: 2,\n    title: \"How to write test\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"test-react-component\",\n    level: 2,\n    title: \"test react component\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"test-custom-hook\",\n    level: 2,\n    title: \"test custom hook\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"conclusion\",\n    level: 2,\n    title: \"conclusion\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}